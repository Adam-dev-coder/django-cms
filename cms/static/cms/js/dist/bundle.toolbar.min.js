//##############################################################################
// Function.prototype.bind

if (!Function.prototype.bind) {
    Function.prototype.bind = function(oThis) {
        if (typeof this !== 'function') {
            // closest thing possible to the ECMAScript 5
            // internal IsCallable function
            throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
        }

        var aArgs   = Array.prototype.slice.call(arguments, 1),
            fToBind = this,
            fNOP    = function() {},
            fBound  = function() {
                return fToBind.apply(this instanceof fNOP
                        ? this
                        : oThis,
                    aArgs.concat(Array.prototype.slice.call(arguments)));
            };

        if (this.prototype) {
            // native functions don't have a prototype
            fNOP.prototype = this.prototype;
        }
        fBound.prototype = new fNOP();

        return fBound;
    };
}

/*! jQuery v1.11.3 | (c) 2005, 2015 jQuery Foundation, Inc. | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l="1.11.3",m=function(a,b){return new m.fn.init(a,b)},n=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,o=/^-ms-/,p=/-([\da-z])/gi,q=function(a,b){return b.toUpperCase()};m.fn=m.prototype={jquery:l,constructor:m,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=m.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return m.each(this,a,b)},map:function(a){return this.pushStack(m.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},m.extend=m.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||m.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(e=arguments[h]))for(d in e)a=g[d],c=e[d],g!==c&&(j&&c&&(m.isPlainObject(c)||(b=m.isArray(c)))?(b?(b=!1,f=a&&m.isArray(a)?a:[]):f=a&&m.isPlainObject(a)?a:{},g[d]=m.extend(j,f,c)):void 0!==c&&(g[d]=c));return g},m.extend({expando:"jQuery"+(l+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===m.type(a)},isArray:Array.isArray||function(a){return"array"===m.type(a)},isWindow:function(a){return null!=a&&a==a.window},isNumeric:function(a){return!m.isArray(a)&&a-parseFloat(a)+1>=0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},isPlainObject:function(a){var b;if(!a||"object"!==m.type(a)||a.nodeType||m.isWindow(a))return!1;try{if(a.constructor&&!j.call(a,"constructor")&&!j.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}if(k.ownLast)for(b in a)return j.call(a,b);for(b in a);return void 0===b||j.call(a,b)},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(b){b&&m.trim(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(o,"ms-").replace(p,q)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=r(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(n,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(r(Object(a))?m.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){var d;if(b){if(g)return g.call(b,a,c);for(d=b.length,c=c?0>c?Math.max(0,d+c):c:0;d>c;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,b){var c=+b.length,d=0,e=a.length;while(c>d)a[e++]=b[d++];if(c!==c)while(void 0!==b[d])a[e++]=b[d++];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=r(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(f=a[b],b=a,a=f),m.isFunction(a)?(c=d.call(arguments,2),e=function(){return a.apply(b||this,c.concat(d.call(arguments)))},e.guid=a.guid=a.guid||m.guid++,e):void 0},now:function(){return+new Date},support:k}),m.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function r(a){var b="length"in a&&a.length,c=m.type(a);return"function"===c||m.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var s=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ha(),z=ha(),A=ha(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N=M.replace("w","w#"),O="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+N+"))|)"+L+"*\\]",P=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+O+")*)|.*)\\)|)",Q=new RegExp(L+"+","g"),R=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),S=new RegExp("^"+L+"*,"+L+"*"),T=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),U=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),V=new RegExp(P),W=new RegExp("^"+N+"$"),X={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M.replace("w","w*")+")"),ATTR:new RegExp("^"+O),PSEUDO:new RegExp("^"+P),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,aa=/[+~]/,ba=/'|\\/g,ca=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),da=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},ea=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(fa){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function ga(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],k=b.nodeType,"string"!=typeof a||!a||1!==k&&9!==k&&11!==k)return d;if(!e&&p){if(11!==k&&(f=_.exec(a)))if(j=f[1]){if(9===k){if(h=b.getElementById(j),!h||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return H.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName)return H.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=1!==k&&a,1===k&&"object"!==b.nodeName.toLowerCase()){o=g(a),(r=b.getAttribute("id"))?s=r.replace(ba,"\\$&"):b.setAttribute("id",s),s="[id='"+s+"'] ",l=o.length;while(l--)o[l]=s+ra(o[l]);w=aa.test(a)&&pa(b.parentNode)||b,x=o.join(",")}if(x)try{return H.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute("id")}}}return i(a.replace(R,"$1"),b,d,e)}function ha(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ia(a){return a[u]=!0,a}function ja(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ka(a,b){var c=a.split("|"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function la(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function na(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function oa(a){return ia(function(b){return b=+b,ia(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function pa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=ga.support={},f=ga.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=ga.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=g.documentElement,e=g.defaultView,e&&e!==e.top&&(e.addEventListener?e.addEventListener("unload",ea,!1):e.attachEvent&&e.attachEvent("onunload",ea)),p=!f(g),c.attributes=ja(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ja(function(a){return a.appendChild(g.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=$.test(g.getElementsByClassName),c.getById=ja(function(a){return o.appendChild(a).id=u,!g.getElementsByName||!g.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(g.querySelectorAll))&&(ja(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\f]' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ja(function(a){var b=g.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ja(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",P)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===g||a.ownerDocument===v&&t(v,a)?-1:b===g||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,h=[a],i=[b];if(!e||!f)return a===g?-1:b===g?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return la(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)i.unshift(c);while(h[d]===i[d])d++;return d?la(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},g):n},ga.matches=function(a,b){return ga(a,null,null,b)},ga.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,"='$1']"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return ga(b,n,null,[a]).length>0},ga.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},ga.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},ga.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},ga.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=ga.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=ga.selectors={cacheLength:50,createPseudo:ia,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ca,da),a[3]=(a[3]||a[4]||a[5]||"").replace(ca,da),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||ga.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&ga.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ca,da).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=ga.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(Q," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(s&&((l[u]||(l[u]={}))[a]=[w,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||ga.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ia(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ia(function(a){var b=[],c=[],d=h(a.replace(R,"$1"));return d[u]?ia(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ia(function(a){return function(b){return ga(a,b).length>0}}),contains:ia(function(a){return a=a.replace(ca,da),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ia(function(a){return W.test(a||"")||ga.error("unsupported lang: "+a),a=a.replace(ca,da).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:oa(function(){return[0]}),last:oa(function(a,b){return[b-1]}),eq:oa(function(a,b,c){return[0>c?c+b:c]}),even:oa(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:oa(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:oa(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:oa(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=ma(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=na(b);function qa(){}qa.prototype=d.filters=d.pseudos,d.setFilters=new qa,g=ga.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R," ")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?ga.error(a):z(a,i).slice(0)};function ra(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function sa(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function ta(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ua(a,b,c){for(var d=0,e=b.length;e>d;d++)ga(a,b[d],c);return c}function va(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function wa(a,b,c,d,e,f){return d&&!d[u]&&(d=wa(d)),e&&!e[u]&&(e=wa(e,f)),ia(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ua(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:va(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=va(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=va(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function xa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=sa(function(a){return a===b},h,!0),l=sa(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[sa(ta(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return wa(i>1&&ta(m),i>1&&ra(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(R,"$1"),c,e>i&&xa(a.slice(i,e)),f>e&&xa(a=a.slice(e)),f>e&&ra(a))}m.push(c)}return ta(m)}function ya(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q="0",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG("*",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){m=0;while(o=a[m++])if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){m=0;while(o=b[m++])o(r,s,g,h);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=F.call(i));s=va(s)}H.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&ga.uniqueSort(i)}return k&&(w=v,j=t),r};return c?ia(f):f}return h=ga.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=xa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,ya(e,d)),f.selector=a}return f},i=ga.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ca,da),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=X.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ca,da),aa.test(j[0].type)&&pa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&ra(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,aa.test(a)&&pa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ja(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ja(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ka("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ja(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ka("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ja(function(a){return null==a.getAttribute("disabled")})||ka(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),ga}(a);m.find=s,m.expr=s.selectors,m.expr[":"]=m.expr.pseudos,m.unique=s.uniqueSort,m.text=s.getText,m.isXMLDoc=s.isXML,m.contains=s.contains;var t=m.expr.match.needsContext,u=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,v=/^.[^:#\[\.,]*$/;function w(a,b,c){if(m.isFunction(b))return m.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return m.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(v.test(b))return m.filter(b,a,c);b=m.filter(b,a)}return m.grep(a,function(a){return m.inArray(a,b)>=0!==c})}m.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?m.find.matchesSelector(d,a)?[d]:[]:m.find.matches(a,m.grep(b,function(a){return 1===a.nodeType}))},m.fn.extend({find:function(a){var b,c=[],d=this,e=d.length;if("string"!=typeof a)return this.pushStack(m(a).filter(function(){for(b=0;e>b;b++)if(m.contains(d[b],this))return!0}));for(b=0;e>b;b++)m.find(a,d[b],c);return c=this.pushStack(e>1?m.unique(c):c),c.selector=this.selector?this.selector+" "+a:a,c},filter:function(a){return this.pushStack(w(this,a||[],!1))},not:function(a){return this.pushStack(w(this,a||[],!0))},is:function(a){return!!w(this,"string"==typeof a&&t.test(a)?m(a):a||[],!1).length}});var x,y=a.document,z=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,A=m.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(c="<"===a.charAt(0)&&">"===a.charAt(a.length-1)&&a.length>=3?[null,a,null]:z.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||x).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof m?b[0]:b,m.merge(this,m.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:y,!0)),u.test(c[1])&&m.isPlainObject(b))for(c in b)m.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}if(d=y.getElementById(c[2]),d&&d.parentNode){if(d.id!==c[2])return x.find(a);this.length=1,this[0]=d}return this.context=y,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):m.isFunction(a)?"undefined"!=typeof x.ready?x.ready(a):a(m):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),m.makeArray(a,this))};A.prototype=m.fn,x=m(y);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};m.extend({dir:function(a,b,c){var d=[],e=a[b];while(e&&9!==e.nodeType&&(void 0===c||1!==e.nodeType||!m(e).is(c)))1===e.nodeType&&d.push(e),e=e[b];return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),m.fn.extend({has:function(a){var b,c=m(a,this),d=c.length;return this.filter(function(){for(b=0;d>b;b++)if(m.contains(this,c[b]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=t.test(a)||"string"!=typeof a?m(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&m.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?m.unique(f):f)},index:function(a){return a?"string"==typeof a?m.inArray(this[0],m(a)):m.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(m.unique(m.merge(this.get(),m(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function D(a,b){do a=a[b];while(a&&1!==a.nodeType);return a}m.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return m.dir(a,"parentNode")},parentsUntil:function(a,b,c){return m.dir(a,"parentNode",c)},next:function(a){return D(a,"nextSibling")},prev:function(a){return D(a,"previousSibling")},nextAll:function(a){return m.dir(a,"nextSibling")},prevAll:function(a){return m.dir(a,"previousSibling")},nextUntil:function(a,b,c){return m.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return m.dir(a,"previousSibling",c)},siblings:function(a){return m.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return m.sibling(a.firstChild)},contents:function(a){return m.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:m.merge([],a.childNodes)}},function(a,b){m.fn[a]=function(c,d){var e=m.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=m.filter(d,e)),this.length>1&&(C[a]||(e=m.unique(e)),B.test(a)&&(e=e.reverse())),this.pushStack(e)}});var E=/\S+/g,F={};function G(a){var b=F[a]={};return m.each(a.match(E)||[],function(a,c){b[c]=!0}),b}m.Callbacks=function(a){a="string"==typeof a?F[a]||G(a):m.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(c=a.memory&&l,d=!0,f=g||0,g=0,e=h.length,b=!0;h&&e>f;f++)if(h[f].apply(l[0],l[1])===!1&&a.stopOnFalse){c=!1;break}b=!1,h&&(i?i.length&&j(i.shift()):c?h=[]:k.disable())},k={add:function(){if(h){var d=h.length;!function f(b){m.each(b,function(b,c){var d=m.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&f(c)})}(arguments),b?e=h.length:c&&(g=d,j(c))}return this},remove:function(){return h&&m.each(arguments,function(a,c){var d;while((d=m.inArray(c,h,d))>-1)h.splice(d,1),b&&(e>=d&&e--,f>=d&&f--)}),this},has:function(a){return a?m.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],e=0,this},disable:function(){return h=i=c=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,c||k.disable(),this},locked:function(){return!i},fireWith:function(a,c){return!h||d&&!i||(c=c||[],c=[a,c.slice?c.slice():c],b?i.push(c):j(c)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!d}};return k},m.extend({Deferred:function(a){var b=[["resolve","done",m.Callbacks("once memory"),"resolved"],["reject","fail",m.Callbacks("once memory"),"rejected"],["notify","progress",m.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return m.Deferred(function(c){m.each(b,function(b,f){var g=m.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&m.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?m.extend(a,d):d}},e={};return d.pipe=d.then,m.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&m.isFunction(a.promise)?e:0,g=1===f?a:m.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&m.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;m.fn.ready=function(a){return m.ready.promise().done(a),this},m.extend({isReady:!1,readyWait:1,holdReady:function(a){a?m.readyWait++:m.ready(!0)},ready:function(a){if(a===!0?!--m.readyWait:!m.isReady){if(!y.body)return setTimeout(m.ready);m.isReady=!0,a!==!0&&--m.readyWait>0||(H.resolveWith(y,[m]),m.fn.triggerHandler&&(m(y).triggerHandler("ready"),m(y).off("ready")))}}});function I(){y.addEventListener?(y.removeEventListener("DOMContentLoaded",J,!1),a.removeEventListener("load",J,!1)):(y.detachEvent("onreadystatechange",J),a.detachEvent("onload",J))}function J(){(y.addEventListener||"load"===event.type||"complete"===y.readyState)&&(I(),m.ready())}m.ready.promise=function(b){if(!H)if(H=m.Deferred(),"complete"===y.readyState)setTimeout(m.ready);else if(y.addEventListener)y.addEventListener("DOMContentLoaded",J,!1),a.addEventListener("load",J,!1);else{y.attachEvent("onreadystatechange",J),a.attachEvent("onload",J);var c=!1;try{c=null==a.frameElement&&y.documentElement}catch(d){}c&&c.doScroll&&!function e(){if(!m.isReady){try{c.doScroll("left")}catch(a){return setTimeout(e,50)}I(),m.ready()}}()}return H.promise(b)};var K="undefined",L;for(L in m(k))break;k.ownLast="0"!==L,k.inlineBlockNeedsLayout=!1,m(function(){var a,b,c,d;c=y.getElementsByTagName("body")[0],c&&c.style&&(b=y.createElement("div"),d=y.createElement("div"),d.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(d).appendChild(b),typeof b.style.zoom!==K&&(b.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",k.inlineBlockNeedsLayout=a=3===b.offsetWidth,a&&(c.style.zoom=1)),c.removeChild(d))}),function(){var a=y.createElement("div");if(null==k.deleteExpando){k.deleteExpando=!0;try{delete a.test}catch(b){k.deleteExpando=!1}}a=null}(),m.acceptData=function(a){var b=m.noData[(a.nodeName+" ").toLowerCase()],c=+a.nodeType||1;return 1!==c&&9!==c?!1:!b||b!==!0&&a.getAttribute("classid")===b};var M=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,N=/([A-Z])/g;function O(a,b,c){if(void 0===c&&1===a.nodeType){var d="data-"+b.replace(N,"-$1").toLowerCase();if(c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:M.test(c)?m.parseJSON(c):c}catch(e){}m.data(a,b,c)}else c=void 0}return c}function P(a){var b;for(b in a)if(("data"!==b||!m.isEmptyObject(a[b]))&&"toJSON"!==b)return!1;

return!0}function Q(a,b,d,e){if(m.acceptData(a)){var f,g,h=m.expando,i=a.nodeType,j=i?m.cache:a,k=i?a[h]:a[h]&&h;if(k&&j[k]&&(e||j[k].data)||void 0!==d||"string"!=typeof b)return k||(k=i?a[h]=c.pop()||m.guid++:h),j[k]||(j[k]=i?{}:{toJSON:m.noop}),("object"==typeof b||"function"==typeof b)&&(e?j[k]=m.extend(j[k],b):j[k].data=m.extend(j[k].data,b)),g=j[k],e||(g.data||(g.data={}),g=g.data),void 0!==d&&(g[m.camelCase(b)]=d),"string"==typeof b?(f=g[b],null==f&&(f=g[m.camelCase(b)])):f=g,f}}function R(a,b,c){if(m.acceptData(a)){var d,e,f=a.nodeType,g=f?m.cache:a,h=f?a[m.expando]:m.expando;if(g[h]){if(b&&(d=c?g[h]:g[h].data)){m.isArray(b)?b=b.concat(m.map(b,m.camelCase)):b in d?b=[b]:(b=m.camelCase(b),b=b in d?[b]:b.split(" ")),e=b.length;while(e--)delete d[b[e]];if(c?!P(d):!m.isEmptyObject(d))return}(c||(delete g[h].data,P(g[h])))&&(f?m.cleanData([a],!0):k.deleteExpando||g!=g.window?delete g[h]:g[h]=null)}}}m.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(a){return a=a.nodeType?m.cache[a[m.expando]]:a[m.expando],!!a&&!P(a)},data:function(a,b,c){return Q(a,b,c)},removeData:function(a,b){return R(a,b)},_data:function(a,b,c){return Q(a,b,c,!0)},_removeData:function(a,b){return R(a,b,!0)}}),m.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=m.data(f),1===f.nodeType&&!m._data(f,"parsedAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=m.camelCase(d.slice(5)),O(f,d,e[d])));m._data(f,"parsedAttrs",!0)}return e}return"object"==typeof a?this.each(function(){m.data(this,a)}):arguments.length>1?this.each(function(){m.data(this,a,b)}):f?O(f,a,m.data(f,a)):void 0},removeData:function(a){return this.each(function(){m.removeData(this,a)})}}),m.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=m._data(a,b),c&&(!d||m.isArray(c)?d=m._data(a,b,m.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=m.queue(a,b),d=c.length,e=c.shift(),f=m._queueHooks(a,b),g=function(){m.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return m._data(a,c)||m._data(a,c,{empty:m.Callbacks("once memory").add(function(){m._removeData(a,b+"queue"),m._removeData(a,c)})})}}),m.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?m.queue(this[0],a):void 0===b?this:this.each(function(){var c=m.queue(this,a,b);m._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&m.dequeue(this,a)})},dequeue:function(a){return this.each(function(){m.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=m.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=m._data(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var S=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,T=["Top","Right","Bottom","Left"],U=function(a,b){return a=b||a,"none"===m.css(a,"display")||!m.contains(a.ownerDocument,a)},V=m.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===m.type(c)){e=!0;for(h in c)m.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,m.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(m(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},W=/^(?:checkbox|radio)$/i;!function(){var a=y.createElement("input"),b=y.createElement("div"),c=y.createDocumentFragment();if(b.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",k.leadingWhitespace=3===b.firstChild.nodeType,k.tbody=!b.getElementsByTagName("tbody").length,k.htmlSerialize=!!b.getElementsByTagName("link").length,k.html5Clone="<:nav></:nav>"!==y.createElement("nav").cloneNode(!0).outerHTML,a.type="checkbox",a.checked=!0,c.appendChild(a),k.appendChecked=a.checked,b.innerHTML="<textarea>x</textarea>",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue,c.appendChild(b),b.innerHTML="<input type='radio' checked='checked' name='t'/>",k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,k.noCloneEvent=!0,b.attachEvent&&(b.attachEvent("onclick",function(){k.noCloneEvent=!1}),b.cloneNode(!0).click()),null==k.deleteExpando){k.deleteExpando=!0;try{delete b.test}catch(d){k.deleteExpando=!1}}}(),function(){var b,c,d=y.createElement("div");for(b in{submit:!0,change:!0,focusin:!0})c="on"+b,(k[b+"Bubbles"]=c in a)||(d.setAttribute(c,"t"),k[b+"Bubbles"]=d.attributes[c].expando===!1);d=null}();var X=/^(?:input|select|textarea)$/i,Y=/^key/,Z=/^(?:mouse|pointer|contextmenu)|click/,$=/^(?:focusinfocus|focusoutblur)$/,_=/^([^.]*)(?:\.(.+)|)$/;function aa(){return!0}function ba(){return!1}function ca(){try{return y.activeElement}catch(a){}}m.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,n,o,p,q,r=m._data(a);if(r){c.handler&&(i=c,c=i.handler,e=i.selector),c.guid||(c.guid=m.guid++),(g=r.events)||(g=r.events={}),(k=r.handle)||(k=r.handle=function(a){return typeof m===K||a&&m.event.triggered===a.type?void 0:m.event.dispatch.apply(k.elem,arguments)},k.elem=a),b=(b||"").match(E)||[""],h=b.length;while(h--)f=_.exec(b[h])||[],o=q=f[1],p=(f[2]||"").split(".").sort(),o&&(j=m.event.special[o]||{},o=(e?j.delegateType:j.bindType)||o,j=m.event.special[o]||{},l=m.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&m.expr.match.needsContext.test(e),namespace:p.join(".")},i),(n=g[o])||(n=g[o]=[],n.delegateCount=0,j.setup&&j.setup.call(a,d,p,k)!==!1||(a.addEventListener?a.addEventListener(o,k,!1):a.attachEvent&&a.attachEvent("on"+o,k))),j.add&&(j.add.call(a,l),l.handler.guid||(l.handler.guid=c.guid)),e?n.splice(n.delegateCount++,0,l):n.push(l),m.event.global[o]=!0);a=null}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,n,o,p,q,r=m.hasData(a)&&m._data(a);if(r&&(k=r.events)){b=(b||"").match(E)||[""],j=b.length;while(j--)if(h=_.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=m.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,n=k[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),i=f=n.length;while(f--)g=n[f],!e&&q!==g.origType||c&&c.guid!==g.guid||h&&!h.test(g.namespace)||d&&d!==g.selector&&("**"!==d||!g.selector)||(n.splice(f,1),g.selector&&n.delegateCount--,l.remove&&l.remove.call(a,g));i&&!n.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||m.removeEvent(a,o,r.handle),delete k[o])}else for(o in k)m.event.remove(a,o+b[j],c,d,!0);m.isEmptyObject(k)&&(delete r.handle,m._removeData(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,l,n,o=[d||y],p=j.call(b,"type")?b.type:b,q=j.call(b,"namespace")?b.namespace.split("."):[];if(h=l=d=d||y,3!==d.nodeType&&8!==d.nodeType&&!$.test(p+m.event.triggered)&&(p.indexOf(".")>=0&&(q=p.split("."),p=q.shift(),q.sort()),g=p.indexOf(":")<0&&"on"+p,b=b[m.expando]?b:new m.Event(p,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=q.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+q.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:m.makeArray(c,[b]),k=m.event.special[p]||{},e||!k.trigger||k.trigger.apply(d,c)!==!1)){if(!e&&!k.noBubble&&!m.isWindow(d)){for(i=k.delegateType||p,$.test(i+p)||(h=h.parentNode);h;h=h.parentNode)o.push(h),l=h;l===(d.ownerDocument||y)&&o.push(l.defaultView||l.parentWindow||a)}n=0;while((h=o[n++])&&!b.isPropagationStopped())b.type=n>1?i:k.bindType||p,f=(m._data(h,"events")||{})[b.type]&&m._data(h,"handle"),f&&f.apply(h,c),f=g&&h[g],f&&f.apply&&m.acceptData(h)&&(b.result=f.apply(h,c),b.result===!1&&b.preventDefault());if(b.type=p,!e&&!b.isDefaultPrevented()&&(!k._default||k._default.apply(o.pop(),c)===!1)&&m.acceptData(d)&&g&&d[p]&&!m.isWindow(d)){l=d[g],l&&(d[g]=null),m.event.triggered=p;try{d[p]()}catch(r){}m.event.triggered=void 0,l&&(d[g]=l)}return b.result}},dispatch:function(a){a=m.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(m._data(this,"events")||{})[a.type]||[],k=m.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=m.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,g=0;while((e=f.handlers[g++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(e.namespace))&&(a.handleObj=e,a.data=e.data,c=((m.event.special[e.origType]||{}).handle||e.handler).apply(f.elem,i),void 0!==c&&(a.result=c)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!=this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||"click"!==a.type)){for(e=[],f=0;h>f;f++)d=b[f],c=d.selector+" ",void 0===e[c]&&(e[c]=d.needsContext?m(c,this).index(i)>=0:m.find(c,this,null,[i]).length),e[c]&&e.push(d);e.length&&g.push({elem:i,handlers:e})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},fix:function(a){if(a[m.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=Z.test(e)?this.mouseHooks:Y.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new m.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=f.srcElement||y),3===a.target.nodeType&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,g.filter?g.filter(a,f):a},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button,g=b.fromElement;return null==a.pageX&&null!=b.clientX&&(d=a.target.ownerDocument||y,e=d.documentElement,c=d.body,a.pageX=b.clientX+(e&&e.scrollLeft||c&&c.scrollLeft||0)-(e&&e.clientLeft||c&&c.clientLeft||0),a.pageY=b.clientY+(e&&e.scrollTop||c&&c.scrollTop||0)-(e&&e.clientTop||c&&c.clientTop||0)),!a.relatedTarget&&g&&(a.relatedTarget=g===a.target?b.toElement:g),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==ca()&&this.focus)try{return this.focus(),!1}catch(a){}},delegateType:"focusin"},blur:{trigger:function(){return this===ca()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return m.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(a){return m.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=m.extend(new m.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?m.event.trigger(e,null,b):m.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},m.removeEvent=y.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){var d="on"+b;a.detachEvent&&(typeof a[d]===K&&(a[d]=null),a.detachEvent(d,c))},m.Event=function(a,b){return this instanceof m.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?aa:ba):this.type=a,b&&m.extend(this,b),this.timeStamp=a&&a.timeStamp||m.now(),void(this[m.expando]=!0)):new m.Event(a,b)},m.Event.prototype={isDefaultPrevented:ba,isPropagationStopped:ba,isImmediatePropagationStopped:ba,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=aa,a&&(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=aa,a&&(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=aa,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},m.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){m.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!m.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.submitBubbles||(m.event.special.submit={setup:function(){return m.nodeName(this,"form")?!1:void m.event.add(this,"click._submit keypress._submit",function(a){var b=a.target,c=m.nodeName(b,"input")||m.nodeName(b,"button")?b.form:void 0;c&&!m._data(c,"submitBubbles")&&(m.event.add(c,"submit._submit",function(a){a._submit_bubble=!0}),m._data(c,"submitBubbles",!0))})},postDispatch:function(a){a._submit_bubble&&(delete a._submit_bubble,this.parentNode&&!a.isTrigger&&m.event.simulate("submit",this.parentNode,a,!0))},teardown:function(){return m.nodeName(this,"form")?!1:void m.event.remove(this,"._submit")}}),k.changeBubbles||(m.event.special.change={setup:function(){return X.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(m.event.add(this,"propertychange._change",function(a){"checked"===a.originalEvent.propertyName&&(this._just_changed=!0)}),m.event.add(this,"click._change",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1),m.event.simulate("change",this,a,!0)})),!1):void m.event.add(this,"beforeactivate._change",function(a){var b=a.target;X.test(b.nodeName)&&!m._data(b,"changeBubbles")&&(m.event.add(b,"change._change",function(a){!this.parentNode||a.isSimulated||a.isTrigger||m.event.simulate("change",this.parentNode,a,!0)}),m._data(b,"changeBubbles",!0))})},handle:function(a){var b=a.target;return this!==b||a.isSimulated||a.isTrigger||"radio"!==b.type&&"checkbox"!==b.type?a.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return m.event.remove(this,"._change"),!X.test(this.nodeName)}}),k.focusinBubbles||m.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){m.event.simulate(b,a.target,m.event.fix(a),!0)};m.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=m._data(d,b);e||d.addEventListener(a,c,!0),m._data(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=m._data(d,b)-1;e?m._data(d,b,e):(d.removeEventListener(a,c,!0),m._removeData(d,b))}}}),m.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(f in a)this.on(f,b,c,a[f],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=ba;else if(!d)return this;return 1===e&&(g=d,d=function(a){return m().off(a),g.apply(this,arguments)},d.guid=g.guid||(g.guid=m.guid++)),this.each(function(){m.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,m(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=ba),this.each(function(){m.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){m.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?m.event.trigger(a,b,c,!0):void 0}});function da(a){var b=ea.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}var ea="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",fa=/ jQuery\d+="(?:null|\d+)"/g,ga=new RegExp("<(?:"+ea+")[\\s/>]","i"),ha=/^\s+/,ia=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,ja=/<([\w:]+)/,ka=/<tbody/i,la=/<|&#?\w+;/,ma=/<(?:script|style|link)/i,na=/checked\s*(?:[^=]|=\s*.checked.)/i,oa=/^$|\/(?:java|ecma)script/i,pa=/^true\/(.*)/,qa=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ra={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:k.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},sa=da(y),ta=sa.appendChild(y.createElement("div"));ra.optgroup=ra.option,ra.tbody=ra.tfoot=ra.colgroup=ra.caption=ra.thead,ra.th=ra.td;function ua(a,b){var c,d,e=0,f=typeof a.getElementsByTagName!==K?a.getElementsByTagName(b||"*"):typeof a.querySelectorAll!==K?a.querySelectorAll(b||"*"):void 0;if(!f)for(f=[],c=a.childNodes||a;null!=(d=c[e]);e++)!b||m.nodeName(d,b)?f.push(d):m.merge(f,ua(d,b));return void 0===b||b&&m.nodeName(a,b)?m.merge([a],f):f}function va(a){W.test(a.type)&&(a.defaultChecked=a.checked)}function wa(a,b){return m.nodeName(a,"table")&&m.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function xa(a){return a.type=(null!==m.find.attr(a,"type"))+"/"+a.type,a}function ya(a){var b=pa.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function za(a,b){for(var c,d=0;null!=(c=a[d]);d++)m._data(c,"globalEval",!b||m._data(b[d],"globalEval"))}function Aa(a,b){if(1===b.nodeType&&m.hasData(a)){var c,d,e,f=m._data(a),g=m._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;e>d;d++)m.event.add(b,c,h[c][d])}g.data&&(g.data=m.extend({},g.data))}}function Ba(a,b){var c,d,e;if(1===b.nodeType){if(c=b.nodeName.toLowerCase(),!k.noCloneEvent&&b[m.expando]){e=m._data(b);for(d in e.events)m.removeEvent(b,d,e.handle);b.removeAttribute(m.expando)}"script"===c&&b.text!==a.text?(xa(b).text=a.text,ya(b)):"object"===c?(b.parentNode&&(b.outerHTML=a.outerHTML),k.html5Clone&&a.innerHTML&&!m.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):"input"===c&&W.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):"option"===c?b.defaultSelected=b.selected=a.defaultSelected:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}}m.extend({clone:function(a,b,c){var d,e,f,g,h,i=m.contains(a.ownerDocument,a);if(k.html5Clone||m.isXMLDoc(a)||!ga.test("<"+a.nodeName+">")?f=a.cloneNode(!0):(ta.innerHTML=a.outerHTML,ta.removeChild(f=ta.firstChild)),!(k.noCloneEvent&&k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||m.isXMLDoc(a)))for(d=ua(f),h=ua(a),g=0;null!=(e=h[g]);++g)d[g]&&Ba(e,d[g]);if(b)if(c)for(h=h||ua(a),d=d||ua(f),g=0;null!=(e=h[g]);g++)Aa(e,d[g]);else Aa(a,f);return d=ua(f,"script"),d.length>0&&za(d,!i&&ua(a,"script")),d=h=e=null,f},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,l,n=a.length,o=da(b),p=[],q=0;n>q;q++)if(f=a[q],f||0===f)if("object"===m.type(f))m.merge(p,f.nodeType?[f]:f);else if(la.test(f)){h=h||o.appendChild(b.createElement("div")),i=(ja.exec(f)||["",""])[1].toLowerCase(),l=ra[i]||ra._default,h.innerHTML=l[1]+f.replace(ia,"<$1></$2>")+l[2],e=l[0];while(e--)h=h.lastChild;if(!k.leadingWhitespace&&ha.test(f)&&p.push(b.createTextNode(ha.exec(f)[0])),!k.tbody){f="table"!==i||ka.test(f)?"<table>"!==l[1]||ka.test(f)?0:h:h.firstChild,e=f&&f.childNodes.length;while(e--)m.nodeName(j=f.childNodes[e],"tbody")&&!j.childNodes.length&&f.removeChild(j)}m.merge(p,h.childNodes),h.textContent="";while(h.firstChild)h.removeChild(h.firstChild);h=o.lastChild}else p.push(b.createTextNode(f));h&&o.removeChild(h),k.appendChecked||m.grep(ua(p,"input"),va),q=0;while(f=p[q++])if((!d||-1===m.inArray(f,d))&&(g=m.contains(f.ownerDocument,f),h=ua(o.appendChild(f),"script"),g&&za(h),c)){e=0;while(f=h[e++])oa.test(f.type||"")&&c.push(f)}return h=null,o},cleanData:function(a,b){for(var d,e,f,g,h=0,i=m.expando,j=m.cache,l=k.deleteExpando,n=m.event.special;null!=(d=a[h]);h++)if((b||m.acceptData(d))&&(f=d[i],g=f&&j[f])){if(g.events)for(e in g.events)n[e]?m.event.remove(d,e):m.removeEvent(d,e,g.handle);j[f]&&(delete j[f],l?delete d[i]:typeof d.removeAttribute!==K?d.removeAttribute(i):d[i]=null,c.push(f))}}}),m.fn.extend({text:function(a){return V(this,function(a){return void 0===a?m.text(this):this.empty().append((this[0]&&this[0].ownerDocument||y).createTextNode(a))},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=wa(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=wa(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?m.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||m.cleanData(ua(c)),c.parentNode&&(b&&m.contains(c.ownerDocument,c)&&za(ua(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++){1===a.nodeType&&m.cleanData(ua(a,!1));while(a.firstChild)a.removeChild(a.firstChild);a.options&&m.nodeName(a,"select")&&(a.options.length=0)}return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return m.clone(this,a,b)})},html:function(a){return V(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a)return 1===b.nodeType?b.innerHTML.replace(fa,""):void 0;if(!("string"!=typeof a||ma.test(a)||!k.htmlSerialize&&ga.test(a)||!k.leadingWhitespace&&ha.test(a)||ra[(ja.exec(a)||["",""])[1].toLowerCase()])){a=a.replace(ia,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(m.cleanData(ua(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,m.cleanData(ua(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,n=this,o=l-1,p=a[0],q=m.isFunction(p);if(q||l>1&&"string"==typeof p&&!k.checkClone&&na.test(p))return this.each(function(c){var d=n.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(i=m.buildFragment(a,this[0].ownerDocument,!1,this),c=i.firstChild,1===i.childNodes.length&&(i=c),c)){for(g=m.map(ua(i,"script"),xa),f=g.length;l>j;j++)d=i,j!==o&&(d=m.clone(d,!0,!0),f&&m.merge(g,ua(d,"script"))),b.call(this[j],d,j);if(f)for(h=g[g.length-1].ownerDocument,m.map(g,ya),j=0;f>j;j++)d=g[j],oa.test(d.type||"")&&!m._data(d,"globalEval")&&m.contains(h,d)&&(d.src?m._evalUrl&&m._evalUrl(d.src):m.globalEval((d.text||d.textContent||d.innerHTML||"").replace(qa,"")));i=c=null}return this}}),m.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){m.fn[a]=function(a){for(var c,d=0,e=[],g=m(a),h=g.length-1;h>=d;d++)c=d===h?this:this.clone(!0),m(g[d])[b](c),f.apply(e,c.get());return this.pushStack(e)}});var Ca,Da={};function Ea(b,c){var d,e=m(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:m.css(e[0],"display");return e.detach(),f}function Fa(a){var b=y,c=Da[a];return c||(c=Ea(a,b),"none"!==c&&c||(Ca=(Ca||m("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=(Ca[0].contentWindow||Ca[0].contentDocument).document,b.write(),b.close(),c=Ea(a,b),Ca.detach()),Da[a]=c),c}!function(){var a;k.shrinkWrapBlocks=function(){if(null!=a)return a;a=!1;var b,c,d;return c=y.getElementsByTagName("body")[0],c&&c.style?(b=y.createElement("div"),d=y.createElement("div"),d.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(d).appendChild(b),typeof b.style.zoom!==K&&(b.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",b.appendChild(y.createElement("div")).style.width="5px",a=3!==b.offsetWidth),c.removeChild(d),a):void 0}}();var Ga=/^margin/,Ha=new RegExp("^("+S+")(?!px)[a-z%]+$","i"),Ia,Ja,Ka=/^(top|right|bottom|left)$/;a.getComputedStyle?(Ia=function(b){return b.ownerDocument.defaultView.opener?b.ownerDocument.defaultView.getComputedStyle(b,null):a.getComputedStyle(b,null)},Ja=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ia(a),g=c?c.getPropertyValue(b)||c[b]:void 0,c&&(""!==g||m.contains(a.ownerDocument,a)||(g=m.style(a,b)),Ha.test(g)&&Ga.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0===g?g:g+""}):y.documentElement.currentStyle&&(Ia=function(a){return a.currentStyle},Ja=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ia(a),g=c?c[b]:void 0,null==g&&h&&h[b]&&(g=h[b]),Ha.test(g)&&!Ka.test(b)&&(d=h.left,e=a.runtimeStyle,f=e&&e.left,f&&(e.left=a.currentStyle.left),h.left="fontSize"===b?"1em":g,g=h.pixelLeft+"px",h.left=d,f&&(e.left=f)),void 0===g?g:g+""||"auto"});function La(a,b){return{get:function(){var c=a();if(null!=c)return c?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d,e,f,g,h;if(b=y.createElement("div"),b.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",d=b.getElementsByTagName("a")[0],c=d&&d.style){c.cssText="float:left;opacity:.5",k.opacity="0.5"===c.opacity,k.cssFloat=!!c.cssFloat,b.style.backgroundClip="content-box",b.cloneNode(!0).style.backgroundClip="",k.clearCloneStyle="content-box"===b.style.backgroundClip,k.boxSizing=""===c.boxSizing||""===c.MozBoxSizing||""===c.WebkitBoxSizing,m.extend(k,{reliableHiddenOffsets:function(){return null==g&&i(),g},boxSizingReliable:function(){return null==f&&i(),f},pixelPosition:function(){return null==e&&i(),e},reliableMarginRight:function(){return null==h&&i(),h}});function i(){var b,c,d,i;c=y.getElementsByTagName("body")[0],c&&c.style&&(b=y.createElement("div"),d=y.createElement("div"),d.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(d).appendChild(b),b.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",e=f=!1,h=!0,a.getComputedStyle&&(e="1%"!==(a.getComputedStyle(b,null)||{}).top,f="4px"===(a.getComputedStyle(b,null)||{width:"4px"}).width,i=b.appendChild(y.createElement("div")),i.style.cssText=b.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",i.style.marginRight=i.style.width="0",b.style.width="1px",h=!parseFloat((a.getComputedStyle(i,null)||{}).marginRight),b.removeChild(i)),b.innerHTML="<table><tr><td></td><td>t</td></tr></table>",i=b.getElementsByTagName("td"),i[0].style.cssText="margin:0;border:0;padding:0;display:none",g=0===i[0].offsetHeight,g&&(i[0].style.display="",i[1].style.display="none",g=0===i[0].offsetHeight),c.removeChild(d))}}}(),m.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var Ma=/alpha\([^)]*\)/i,Na=/opacity\s*=\s*([^)]*)/,Oa=/^(none|table(?!-c[ea]).+)/,Pa=new RegExp("^("+S+")(.*)$","i"),Qa=new RegExp("^([+-])=("+S+")","i"),Ra={position:"absolute",visibility:"hidden",display:"block"},Sa={letterSpacing:"0",fontWeight:"400"},Ta=["Webkit","O","Moz","ms"];function Ua(a,b){if(b in a)return b;var c=b.charAt(0).toUpperCase()+b.slice(1),d=b,e=Ta.length;while(e--)if(b=Ta[e]+c,b in a)return b;return d}function Va(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=m._data(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&U(d)&&(f[g]=m._data(d,"olddisplay",Fa(d.nodeName)))):(e=U(d),(c&&"none"!==c||!e)&&m._data(d,"olddisplay",e?c:m.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}function Wa(a,b,c){var d=Pa.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Xa(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=m.css(a,c+T[f],!0,e)),d?("content"===c&&(g-=m.css(a,"padding"+T[f],!0,e)),"margin"!==c&&(g-=m.css(a,"border"+T[f]+"Width",!0,e))):(g+=m.css(a,"padding"+T[f],!0,e),"padding"!==c&&(g+=m.css(a,"border"+T[f]+"Width",!0,e)));return g}function Ya(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=Ia(a),g=k.boxSizing&&"border-box"===m.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=Ja(a,b,f),(0>e||null==e)&&(e=a.style[b]),Ha.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Xa(a,b,c||(g?"border":"content"),d,f)+"px"}m.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Ja(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":k.cssFloat?"cssFloat":"styleFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=m.camelCase(b),i=a.style;if(b=m.cssProps[h]||(m.cssProps[h]=Ua(i,h)),g=m.cssHooks[b]||m.cssHooks[h],void 0===c)return g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b];if(f=typeof c,"string"===f&&(e=Qa.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(m.css(a,b)),f="number"),null!=c&&c===c&&("number"!==f||m.cssNumber[h]||(c+="px"),k.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),!(g&&"set"in g&&void 0===(c=g.set(a,c,d)))))try{i[b]=c}catch(j){}}},css:function(a,b,c,d){var e,f,g,h=m.camelCase(b);return b=m.cssProps[h]||(m.cssProps[h]=Ua(a.style,h)),g=m.cssHooks[b]||m.cssHooks[h],g&&"get"in g&&(f=g.get(a,!0,c)),void 0===f&&(f=Ja(a,b,d)),"normal"===f&&b in Sa&&(f=Sa[b]),""===c||c?(e=parseFloat(f),c===!0||m.isNumeric(e)?e||0:f):f}}),m.each(["height","width"],function(a,b){m.cssHooks[b]={get:function(a,c,d){return c?Oa.test(m.css(a,"display"))&&0===a.offsetWidth?m.swap(a,Ra,function(){return Ya(a,b,d)}):Ya(a,b,d):void 0},set:function(a,c,d){var e=d&&Ia(a);return Wa(a,c,d?Xa(a,b,d,k.boxSizing&&"border-box"===m.css(a,"boxSizing",!1,e),e):0)}}}),k.opacity||(m.cssHooks.opacity={get:function(a,b){return Na.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=m.isNumeric(b)?"alpha(opacity="+100*b+")":"",f=d&&d.filter||c.filter||"";c.zoom=1,(b>=1||""===b)&&""===m.trim(f.replace(Ma,""))&&c.removeAttribute&&(c.removeAttribute("filter"),""===b||d&&!d.filter)||(c.filter=Ma.test(f)?f.replace(Ma,e):f+" "+e)}}),m.cssHooks.marginRight=La(k.reliableMarginRight,function(a,b){return b?m.swap(a,{display:"inline-block"},Ja,[a,"marginRight"]):void 0}),m.each({margin:"",padding:"",border:"Width"},function(a,b){m.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+T[d]+b]=f[d]||f[d-2]||f[0];return e}},Ga.test(a)||(m.cssHooks[a+b].set=Wa)}),m.fn.extend({css:function(a,b){return V(this,function(a,b,c){var d,e,f={},g=0;if(m.isArray(b)){for(d=Ia(a),e=b.length;e>g;g++)f[b[g]]=m.css(a,b[g],!1,d);return f}return void 0!==c?m.style(a,b,c):m.css(a,b)},a,b,arguments.length>1)},show:function(){return Va(this,!0)},hide:function(){return Va(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){U(this)?m(this).show():m(this).hide()})}});function Za(a,b,c,d,e){
return new Za.prototype.init(a,b,c,d,e)}m.Tween=Za,Za.prototype={constructor:Za,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(m.cssNumber[c]?"":"px")},cur:function(){var a=Za.propHooks[this.prop];return a&&a.get?a.get(this):Za.propHooks._default.get(this)},run:function(a){var b,c=Za.propHooks[this.prop];return this.options.duration?this.pos=b=m.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Za.propHooks._default.set(this),this}},Za.prototype.init.prototype=Za.prototype,Za.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=m.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){m.fx.step[a.prop]?m.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[m.cssProps[a.prop]]||m.cssHooks[a.prop])?m.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Za.propHooks.scrollTop=Za.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},m.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},m.fx=Za.prototype.init,m.fx.step={};var $a,_a,ab=/^(?:toggle|show|hide)$/,bb=new RegExp("^(?:([+-])=|)("+S+")([a-z%]*)$","i"),cb=/queueHooks$/,db=[ib],eb={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=bb.exec(b),f=e&&e[3]||(m.cssNumber[a]?"":"px"),g=(m.cssNumber[a]||"px"!==f&&+d)&&bb.exec(m.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||".5",g/=h,m.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function fb(){return setTimeout(function(){$a=void 0}),$a=m.now()}function gb(a,b){var c,d={height:a},e=0;for(b=b?1:0;4>e;e+=2-b)c=T[e],d["margin"+c]=d["padding"+c]=a;return b&&(d.opacity=d.width=a),d}function hb(a,b,c){for(var d,e=(eb[b]||[]).concat(eb["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function ib(a,b,c){var d,e,f,g,h,i,j,l,n=this,o={},p=a.style,q=a.nodeType&&U(a),r=m._data(a,"fxshow");c.queue||(h=m._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,n.always(function(){n.always(function(){h.unqueued--,m.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[p.overflow,p.overflowX,p.overflowY],j=m.css(a,"display"),l="none"===j?m._data(a,"olddisplay")||Fa(a.nodeName):j,"inline"===l&&"none"===m.css(a,"float")&&(k.inlineBlockNeedsLayout&&"inline"!==Fa(a.nodeName)?p.zoom=1:p.display="inline-block")),c.overflow&&(p.overflow="hidden",k.shrinkWrapBlocks()||n.always(function(){p.overflow=c.overflow[0],p.overflowX=c.overflow[1],p.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],ab.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(q?"hide":"show")){if("show"!==e||!r||void 0===r[d])continue;q=!0}o[d]=r&&r[d]||m.style(a,d)}else j=void 0;if(m.isEmptyObject(o))"inline"===("none"===j?Fa(a.nodeName):j)&&(p.display=j);else{r?"hidden"in r&&(q=r.hidden):r=m._data(a,"fxshow",{}),f&&(r.hidden=!q),q?m(a).show():n.done(function(){m(a).hide()}),n.done(function(){var b;m._removeData(a,"fxshow");for(b in o)m.style(a,b,o[b])});for(d in o)g=hb(q?r[d]:0,d,n),d in r||(r[d]=g.start,q&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function jb(a,b){var c,d,e,f,g;for(c in a)if(d=m.camelCase(c),e=b[d],f=a[c],m.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=m.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function kb(a,b,c){var d,e,f=0,g=db.length,h=m.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=$a||fb(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:m.extend({},b),opts:m.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:$a||fb(),duration:c.duration,tweens:[],createTween:function(b,c){var d=m.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(jb(k,j.opts.specialEasing);g>f;f++)if(d=db[f].call(j,a,k,j.opts))return d;return m.map(k,hb,j),m.isFunction(j.opts.start)&&j.opts.start.call(a,j),m.fx.timer(m.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}m.Animation=m.extend(kb,{tweener:function(a,b){m.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],eb[c]=eb[c]||[],eb[c].unshift(b)},prefilter:function(a,b){b?db.unshift(a):db.push(a)}}),m.speed=function(a,b,c){var d=a&&"object"==typeof a?m.extend({},a):{complete:c||!c&&b||m.isFunction(a)&&a,duration:a,easing:c&&b||b&&!m.isFunction(b)&&b};return d.duration=m.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in m.fx.speeds?m.fx.speeds[d.duration]:m.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){m.isFunction(d.old)&&d.old.call(this),d.queue&&m.dequeue(this,d.queue)},d},m.fn.extend({fadeTo:function(a,b,c,d){return this.filter(U).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=m.isEmptyObject(a),f=m.speed(b,c,d),g=function(){var b=kb(this,m.extend({},a),f);(e||m._data(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=m.timers,g=m._data(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&cb.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&m.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=m._data(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=m.timers,g=d?d.length:0;for(c.finish=!0,m.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),m.each(["toggle","show","hide"],function(a,b){var c=m.fn[b];m.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(gb(b,!0),a,d,e)}}),m.each({slideDown:gb("show"),slideUp:gb("hide"),slideToggle:gb("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){m.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),m.timers=[],m.fx.tick=function(){var a,b=m.timers,c=0;for($a=m.now();c<b.length;c++)a=b[c],a()||b[c]!==a||b.splice(c--,1);b.length||m.fx.stop(),$a=void 0},m.fx.timer=function(a){m.timers.push(a),a()?m.fx.start():m.timers.pop()},m.fx.interval=13,m.fx.start=function(){_a||(_a=setInterval(m.fx.tick,m.fx.interval))},m.fx.stop=function(){clearInterval(_a),_a=null},m.fx.speeds={slow:600,fast:200,_default:400},m.fn.delay=function(a,b){return a=m.fx?m.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a,b,c,d,e;b=y.createElement("div"),b.setAttribute("className","t"),b.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",d=b.getElementsByTagName("a")[0],c=y.createElement("select"),e=c.appendChild(y.createElement("option")),a=b.getElementsByTagName("input")[0],d.style.cssText="top:1px",k.getSetAttribute="t"!==b.className,k.style=/top/.test(d.getAttribute("style")),k.hrefNormalized="/a"===d.getAttribute("href"),k.checkOn=!!a.value,k.optSelected=e.selected,k.enctype=!!y.createElement("form").enctype,c.disabled=!0,k.optDisabled=!e.disabled,a=y.createElement("input"),a.setAttribute("value",""),k.input=""===a.getAttribute("value"),a.value="t",a.setAttribute("type","radio"),k.radioValue="t"===a.value}();var lb=/\r/g;m.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=m.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,m(this).val()):a,null==e?e="":"number"==typeof e?e+="":m.isArray(e)&&(e=m.map(e,function(a){return null==a?"":a+""})),b=m.valHooks[this.type]||m.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=m.valHooks[e.type]||m.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(lb,""):null==c?"":c)}}}),m.extend({valHooks:{option:{get:function(a){var b=m.find.attr(a,"value");return null!=b?b:m.trim(m.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&m.nodeName(c.parentNode,"optgroup"))){if(b=m(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=m.makeArray(b),g=e.length;while(g--)if(d=e[g],m.inArray(m.valHooks.option.get(d),f)>=0)try{d.selected=c=!0}catch(h){d.scrollHeight}else d.selected=!1;return c||(a.selectedIndex=-1),e}}}}),m.each(["radio","checkbox"],function(){m.valHooks[this]={set:function(a,b){return m.isArray(b)?a.checked=m.inArray(m(a).val(),b)>=0:void 0}},k.checkOn||(m.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var mb,nb,ob=m.expr.attrHandle,pb=/^(?:checked|selected)$/i,qb=k.getSetAttribute,rb=k.input;m.fn.extend({attr:function(a,b){return V(this,m.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){m.removeAttr(this,a)})}}),m.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===K?m.prop(a,b,c):(1===f&&m.isXMLDoc(a)||(b=b.toLowerCase(),d=m.attrHooks[b]||(m.expr.match.bool.test(b)?nb:mb)),void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=m.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void m.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)while(c=f[e++])d=m.propFix[c]||c,m.expr.match.bool.test(c)?rb&&qb||!pb.test(c)?a[d]=!1:a[m.camelCase("default-"+c)]=a[d]=!1:m.attr(a,c,""),a.removeAttribute(qb?c:d)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&"radio"===b&&m.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),nb={set:function(a,b,c){return b===!1?m.removeAttr(a,c):rb&&qb||!pb.test(c)?a.setAttribute(!qb&&m.propFix[c]||c,c):a[m.camelCase("default-"+c)]=a[c]=!0,c}},m.each(m.expr.match.bool.source.match(/\w+/g),function(a,b){var c=ob[b]||m.find.attr;ob[b]=rb&&qb||!pb.test(b)?function(a,b,d){var e,f;return d||(f=ob[b],ob[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,ob[b]=f),e}:function(a,b,c){return c?void 0:a[m.camelCase("default-"+b)]?b.toLowerCase():null}}),rb&&qb||(m.attrHooks.value={set:function(a,b,c){return m.nodeName(a,"input")?void(a.defaultValue=b):mb&&mb.set(a,b,c)}}),qb||(mb={set:function(a,b,c){var d=a.getAttributeNode(c);return d||a.setAttributeNode(d=a.ownerDocument.createAttribute(c)),d.value=b+="","value"===c||b===a.getAttribute(c)?b:void 0}},ob.id=ob.name=ob.coords=function(a,b,c){var d;return c?void 0:(d=a.getAttributeNode(b))&&""!==d.value?d.value:null},m.valHooks.button={get:function(a,b){var c=a.getAttributeNode(b);return c&&c.specified?c.value:void 0},set:mb.set},m.attrHooks.contenteditable={set:function(a,b,c){mb.set(a,""===b?!1:b,c)}},m.each(["width","height"],function(a,b){m.attrHooks[b]={set:function(a,c){return""===c?(a.setAttribute(b,"auto"),c):void 0}}})),k.style||(m.attrHooks.style={get:function(a){return a.style.cssText||void 0},set:function(a,b){return a.style.cssText=b+""}});var sb=/^(?:input|select|textarea|button|object)$/i,tb=/^(?:a|area)$/i;m.fn.extend({prop:function(a,b){return V(this,m.prop,a,b,arguments.length>1)},removeProp:function(a){return a=m.propFix[a]||a,this.each(function(){try{this[a]=void 0,delete this[a]}catch(b){}})}}),m.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!m.isXMLDoc(a),f&&(b=m.propFix[b]||b,e=m.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=m.find.attr(a,"tabindex");return b?parseInt(b,10):sb.test(a.nodeName)||tb.test(a.nodeName)&&a.href?0:-1}}}}),k.hrefNormalized||m.each(["href","src"],function(a,b){m.propHooks[b]={get:function(a){return a.getAttribute(b,4)}}}),k.optSelected||(m.propHooks.selected={get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null}}),m.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){m.propFix[this.toLowerCase()]=this}),k.enctype||(m.propFix.enctype="encoding");var ub=/[\t\r\n\f]/g;m.fn.extend({addClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j="string"==typeof a&&a;if(m.isFunction(a))return this.each(function(b){m(this).addClass(a.call(this,b,this.className))});if(j)for(b=(a||"").match(E)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ub," "):" ")){f=0;while(e=b[f++])d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=m.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j=0===arguments.length||"string"==typeof a&&a;if(m.isFunction(a))return this.each(function(b){m(this).removeClass(a.call(this,b,this.className))});if(j)for(b=(a||"").match(E)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ub," "):"")){f=0;while(e=b[f++])while(d.indexOf(" "+e+" ")>=0)d=d.replace(" "+e+" "," ");g=a?m.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(m.isFunction(a)?function(c){m(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c){var b,d=0,e=m(this),f=a.match(E)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===K||"boolean"===c)&&(this.className&&m._data(this,"__className__",this.className),this.className=this.className||a===!1?"":m._data(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(ub," ").indexOf(b)>=0)return!0;return!1}}),m.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){m.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),m.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var vb=m.now(),wb=/\?/,xb=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;m.parseJSON=function(b){if(a.JSON&&a.JSON.parse)return a.JSON.parse(b+"");var c,d=null,e=m.trim(b+"");return e&&!m.trim(e.replace(xb,function(a,b,e,f){return c&&b&&(d=0),0===d?a:(c=e||b,d+=!f-!e,"")}))?Function("return "+e)():m.error("Invalid JSON: "+b)},m.parseXML=function(b){var c,d;if(!b||"string"!=typeof b)return null;try{a.DOMParser?(d=new DOMParser,c=d.parseFromString(b,"text/xml")):(c=new ActiveXObject("Microsoft.XMLDOM"),c.async="false",c.loadXML(b))}catch(e){c=void 0}return c&&c.documentElement&&!c.getElementsByTagName("parsererror").length||m.error("Invalid XML: "+b),c};var yb,zb,Ab=/#.*$/,Bb=/([?&])_=[^&]*/,Cb=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Db=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Eb=/^(?:GET|HEAD)$/,Fb=/^\/\//,Gb=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Hb={},Ib={},Jb="*/".concat("*");try{zb=location.href}catch(Kb){zb=y.createElement("a"),zb.href="",zb=zb.href}yb=Gb.exec(zb.toLowerCase())||[];function Lb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(E)||[];if(m.isFunction(c))while(d=f[e++])"+"===d.charAt(0)?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Mb(a,b,c,d){var e={},f=a===Ib;function g(h){var i;return e[h]=!0,m.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function Nb(a,b){var c,d,e=m.ajaxSettings.flatOptions||{};for(d in b)void 0!==b[d]&&((e[d]?a:c||(c={}))[d]=b[d]);return c&&m.extend(!0,a,c),a}function Ob(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===e&&(e=a.mimeType||b.getResponseHeader("Content-Type"));if(e)for(g in h)if(h[g]&&h[g].test(e)){i.unshift(g);break}if(i[0]in c)f=i[0];else{for(g in c){if(!i[0]||a.converters[g+" "+i[0]]){f=g;break}d||(d=g)}f=f||d}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Pb(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}m.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:zb,type:"GET",isLocal:Db.test(yb[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Jb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":m.parseJSON,"text xml":m.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Nb(Nb(a,m.ajaxSettings),b):Nb(m.ajaxSettings,a)},ajaxPrefilter:Lb(Hb),ajaxTransport:Lb(Ib),ajax:function(a,b){"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=m.ajaxSetup({},b),l=k.context||k,n=k.context&&(l.nodeType||l.jquery)?m(l):m.event,o=m.Deferred(),p=m.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!j){j={};while(b=Cb.exec(f))j[b[1].toLowerCase()]=b[2]}b=j[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?f:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return i&&i.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||zb)+"").replace(Ab,"").replace(Fb,yb[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=m.trim(k.dataType||"*").toLowerCase().match(E)||[""],null==k.crossDomain&&(c=Gb.exec(k.url.toLowerCase()),k.crossDomain=!(!c||c[1]===yb[1]&&c[2]===yb[2]&&(c[3]||("http:"===c[1]?"80":"443"))===(yb[3]||("http:"===yb[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=m.param(k.data,k.traditional)),Mb(Hb,k,b,v),2===t)return v;h=m.event&&k.global,h&&0===m.active++&&m.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!Eb.test(k.type),e=k.url,k.hasContent||(k.data&&(e=k.url+=(wb.test(e)?"&":"?")+k.data,delete k.data),k.cache===!1&&(k.url=Bb.test(e)?e.replace(Bb,"$1_="+vb++):e+(wb.test(e)?"&":"?")+"_="+vb++)),k.ifModified&&(m.lastModified[e]&&v.setRequestHeader("If-Modified-Since",m.lastModified[e]),m.etag[e]&&v.setRequestHeader("If-None-Match",m.etag[e])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+Jb+"; q=0.01":""):k.accepts["*"]);for(d in k.headers)v.setRequestHeader(d,k.headers[d]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u="abort";for(d in{success:1,error:1,complete:1})v[d](k[d]);if(i=Mb(Ib,k,b,v)){v.readyState=1,h&&n.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,i.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");function x(a,b,c,d){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),i=void 0,f=d||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,c&&(u=Ob(k,v,c)),u=Pb(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(m.lastModified[e]=w),w=v.getResponseHeader("etag"),w&&(m.etag[e]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,h&&n.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),h&&(n.trigger("ajaxComplete",[v,k]),--m.active||m.event.trigger("ajaxStop")))}return v},getJSON:function(a,b,c){return m.get(a,b,c,"json")},getScript:function(a,b){return m.get(a,void 0,b,"script")}}),m.each(["get","post"],function(a,b){m[b]=function(a,c,d,e){return m.isFunction(c)&&(e=e||d,d=c,c=void 0),m.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),m._evalUrl=function(a){return m.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},m.fn.extend({wrapAll:function(a){if(m.isFunction(a))return this.each(function(b){m(this).wrapAll(a.call(this,b))});if(this[0]){var b=m(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&1===a.firstChild.nodeType)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return this.each(m.isFunction(a)?function(b){m(this).wrapInner(a.call(this,b))}:function(){var b=m(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=m.isFunction(a);return this.each(function(c){m(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){m.nodeName(this,"body")||m(this).replaceWith(this.childNodes)}).end()}}),m.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0||!k.reliableHiddenOffsets()&&"none"===(a.style&&a.style.display||m.css(a,"display"))},m.expr.filters.visible=function(a){return!m.expr.filters.hidden(a)};var Qb=/%20/g,Rb=/\[\]$/,Sb=/\r?\n/g,Tb=/^(?:submit|button|image|reset|file)$/i,Ub=/^(?:input|select|textarea|keygen)/i;function Vb(a,b,c,d){var e;if(m.isArray(b))m.each(b,function(b,e){c||Rb.test(a)?d(a,e):Vb(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==m.type(b))d(a,b);else for(e in b)Vb(a+"["+e+"]",b[e],c,d)}m.param=function(a,b){var c,d=[],e=function(a,b){b=m.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=m.ajaxSettings&&m.ajaxSettings.traditional),m.isArray(a)||a.jquery&&!m.isPlainObject(a))m.each(a,function(){e(this.name,this.value)});else for(c in a)Vb(c,a[c],b,e);return d.join("&").replace(Qb,"+")},m.fn.extend({serialize:function(){return m.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=m.prop(this,"elements");return a?m.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!m(this).is(":disabled")&&Ub.test(this.nodeName)&&!Tb.test(a)&&(this.checked||!W.test(a))}).map(function(a,b){var c=m(this).val();return null==c?null:m.isArray(c)?m.map(c,function(a){return{name:b.name,value:a.replace(Sb,"\r\n")}}):{name:b.name,value:c.replace(Sb,"\r\n")}}).get()}}),m.ajaxSettings.xhr=void 0!==a.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&Zb()||$b()}:Zb;var Wb=0,Xb={},Yb=m.ajaxSettings.xhr();a.attachEvent&&a.attachEvent("onunload",function(){for(var a in Xb)Xb[a](void 0,!0)}),k.cors=!!Yb&&"withCredentials"in Yb,Yb=k.ajax=!!Yb,Yb&&m.ajaxTransport(function(a){if(!a.crossDomain||k.cors){var b;return{send:function(c,d){var e,f=a.xhr(),g=++Wb;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)void 0!==c[e]&&f.setRequestHeader(e,c[e]+"");f.send(a.hasContent&&a.data||null),b=function(c,e){var h,i,j;if(b&&(e||4===f.readyState))if(delete Xb[g],b=void 0,f.onreadystatechange=m.noop,e)4!==f.readyState&&f.abort();else{j={},h=f.status,"string"==typeof f.responseText&&(j.text=f.responseText);try{i=f.statusText}catch(k){i=""}h||!a.isLocal||a.crossDomain?1223===h&&(h=204):h=j.text?200:404}j&&d(h,i,j,f.getAllResponseHeaders())},a.async?4===f.readyState?setTimeout(b):f.onreadystatechange=Xb[g]=b:b()},abort:function(){b&&b(void 0,!0)}}}});function Zb(){try{return new a.XMLHttpRequest}catch(b){}}function $b(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}m.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return m.globalEval(a),a}}}),m.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),m.ajaxTransport("script",function(a){if(a.crossDomain){var b,c=y.head||m("head")[0]||y.documentElement;return{send:function(d,e){b=y.createElement("script"),b.async=!0,a.scriptCharset&&(b.charset=a.scriptCharset),b.src=a.url,b.onload=b.onreadystatechange=function(a,c){(c||!b.readyState||/loaded|complete/.test(b.readyState))&&(b.onload=b.onreadystatechange=null,b.parentNode&&b.parentNode.removeChild(b),b=null,c||e(200,"success"))},c.insertBefore(b,c.firstChild)},abort:function(){b&&b.onload(void 0,!0)}}}});var _b=[],ac=/(=)\?(?=&|$)|\?\?/;m.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=_b.pop()||m.expando+"_"+vb++;return this[a]=!0,a}}),m.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(ac.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&ac.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=m.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(ac,"$1"+e):b.jsonp!==!1&&(b.url+=(wb.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||m.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,_b.push(e)),g&&m.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),m.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||y;var d=u.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=m.buildFragment([a],b,e),e&&e.length&&m(e).remove(),m.merge([],d.childNodes))};var bc=m.fn.load;m.fn.load=function(a,b,c){if("string"!=typeof a&&bc)return bc.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=m.trim(a.slice(h,a.length)),a=a.slice(0,h)),m.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(f="POST"),g.length>0&&m.ajax({url:a,type:f,dataType:"html",data:b}).done(function(a){e=arguments,g.html(d?m("<div>").append(m.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,e||[a.responseText,b,a])}),this},m.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){m.fn[b]=function(a){return this.on(b,a)}}),m.expr.filters.animated=function(a){return m.grep(m.timers,function(b){return a===b.elem}).length};var cc=a.document.documentElement;function dc(a){return m.isWindow(a)?a:9===a.nodeType?a.defaultView||a.parentWindow:!1}m.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=m.css(a,"position"),l=m(a),n={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=m.css(a,"top"),i=m.css(a,"left"),j=("absolute"===k||"fixed"===k)&&m.inArray("auto",[f,i])>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),m.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(n.top=b.top-h.top+g),null!=b.left&&(n.left=b.left-h.left+e),"using"in b?b.using.call(a,n):l.css(n)}},m.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){m.offset.setOffset(this,a,b)});var b,c,d={top:0,left:0},e=this[0],f=e&&e.ownerDocument;if(f)return b=f.documentElement,m.contains(b,e)?(typeof e.getBoundingClientRect!==K&&(d=e.getBoundingClientRect()),c=dc(f),{top:d.top+(c.pageYOffset||b.scrollTop)-(b.clientTop||0),left:d.left+(c.pageXOffset||b.scrollLeft)-(b.clientLeft||0)}):d},position:function(){if(this[0]){var a,b,c={top:0,left:0},d=this[0];return"fixed"===m.css(d,"position")?b=d.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),m.nodeName(a[0],"html")||(c=a.offset()),c.top+=m.css(a[0],"borderTopWidth",!0),c.left+=m.css(a[0],"borderLeftWidth",!0)),{top:b.top-c.top-m.css(d,"marginTop",!0),left:b.left-c.left-m.css(d,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||cc;while(a&&!m.nodeName(a,"html")&&"static"===m.css(a,"position"))a=a.offsetParent;return a||cc})}}),m.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c=/Y/.test(b);m.fn[a]=function(d){return V(this,function(a,d,e){var f=dc(a);return void 0===e?f?b in f?f[b]:f.document.documentElement[d]:a[d]:void(f?f.scrollTo(c?m(f).scrollLeft():e,c?e:m(f).scrollTop()):a[d]=e)},a,d,arguments.length,null)}}),m.each(["top","left"],function(a,b){m.cssHooks[b]=La(k.pixelPosition,function(a,c){return c?(c=Ja(a,b),Ha.test(c)?m(a).position()[b]+"px":c):void 0})}),m.each({Height:"height",Width:"width"},function(a,b){m.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){m.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return V(this,function(b,c,d){var e;return m.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?m.css(b,c,g):m.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),m.fn.size=function(){return this.length},m.fn.andSelf=m.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return m});var ec=a.jQuery,fc=a.$;return m.noConflict=function(b){return a.$===m&&(a.$=fc),b&&a.jQuery===m&&(a.jQuery=ec),m},typeof b===K&&(a.jQuery=a.$=m),m});

/*!
 * @author    Angelo Dini
 * @version   1.0
 * @copyright Distributed under the BSD License.
 */
(function(){var d="1.0";var c=window.Class;var b=window.Class=function(n){n=n||{};var m=function(){return(this.initialize)?this.initialize.apply(this,arguments):j};if(n.implement){var j=window===this?g(m.prototype):this;var l=n.implement;a(n,"implement");n=f(n,e(l))}m.prototype=g(n);m.constructor=m;m._parent=g(n);for(var k=0,h=["extend","implement","getOptions","setOptions"];k<h.length;k++){m[h[k]]=b[h[k]]}return m};b.extend=function(j){var h=this;if(j.implement){this.prototype=f(this.prototype,e(j.implement));a(j,"implement")}for(var i in j){j[i]=typeof j[i]==="function"&&/parent/.test(j[i].toString())?(function(l,k){return function(){this.parent=h._parent[k];return l.apply(this,arguments)}})(j[i],i):j[i]}this._parent=f(this._parent,j,true);this.prototype=f(this.prototype,j);return this};b.implement=function(h){return this.prototype=f(this.prototype,e(h))};b.getOptions=function(){return this.prototype.options||{}};b.setOptions=function(h){return this.prototype.options=f(this.prototype.options,h)};b.noConflict=function(){window.Class=c;return b};b.version=d;function g(i){var h=function(){};h.prototype=i.prototype||i;return new h()}function a(l,i,k){if(k){var h={};for(var j in l){if(j!==i){h[j]=l[j]}}}else{delete l[i]}return h||l}function f(h,i,k){if(!h||!i){return h||i||{}}h=g(h);i=g(i);for(var j in i){if(Object.prototype.toString.call(i[j])==="[object Object]"){f(h[j],i[j])}else{h[j]=(k&&h[j])?h[j]:i[j]}}return h}function e(l){var k={};for(var h=0;h<l.length;h++){if(typeof(l[h])==="function"){l[h]=l[h].prototype}var j=a(l[h],"initialize",true);if(j.implement){k=e(j.implement)}else{k=f(k,j)}}return k}})();
/*!
 * PEP v0.3.0 | https://github.com/jquery/PEP
 * Copyright jQuery Foundation and other contributors | http://jquery.org/license
 *
 * This file is modified for CMS. All `touch-action` attributes are now `data-touch-action`
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  global.PointerEventsPolyfill = factory()
}(this, function () { 'use strict';

  /**
   * This module implements an map of pointer states
   */
  var USE_MAP = window.Map && window.Map.prototype.forEach;
  var POINTERS_FN = function(){ return this.size; };
  function PointerMap() {
    if (USE_MAP) {
      var m = new Map();
      m.pointers = POINTERS_FN;
      return m;
    } else {
      this.keys = [];
      this.values = [];
    }
  }

  PointerMap.prototype = {
    set: function(inId, inEvent) {
      var i = this.keys.indexOf(inId);
      if (i > -1) {
        this.values[i] = inEvent;
      } else {
        this.keys.push(inId);
        this.values.push(inEvent);
      }
    },
    has: function(inId) {
      return this.keys.indexOf(inId) > -1;
    },
    'delete': function(inId) {
      var i = this.keys.indexOf(inId);
      if (i > -1) {
        this.keys.splice(i, 1);
        this.values.splice(i, 1);
      }
    },
    get: function(inId) {
      var i = this.keys.indexOf(inId);
      return this.values[i];
    },
    clear: function() {
      this.keys.length = 0;
      this.values.length = 0;
    },
    // return value, key, map
    forEach: function(callback, thisArg) {
      this.values.forEach(function(v, i) {
        callback.call(thisArg, v, this.keys[i], this);
      }, this);
    },
    pointers: function() {
      return this.keys.length;
    }
  };

  var _pointermap = PointerMap;

  var CLONE_PROPS = [
    // MouseEvent
    'bubbles',
    'cancelable',
    'view',
    'detail',
    'screenX',
    'screenY',
    'clientX',
    'clientY',
    'ctrlKey',
    'altKey',
    'shiftKey',
    'metaKey',
    'button',
    'relatedTarget',
    // DOM Level 3
    'buttons',
    // PointerEvent
    'pointerId',
    'width',
    'height',
    'pressure',
    'tiltX',
    'tiltY',
    'pointerType',
    'hwTimestamp',
    'isPrimary',
    // event instance
    'type',
    'target',
    'currentTarget',
    'which',
    'pageX',
    'pageY',
    'timeStamp'
  ];

  var CLONE_DEFAULTS = [
    // MouseEvent
    false,
    false,
    null,
    null,
    0,
    0,
    0,
    0,
    false,
    false,
    false,
    false,
    0,
    null,
    // DOM Level 3
    0,
    // PointerEvent
    0,
    0,
    0,
    0,
    0,
    0,
    '',
    0,
    false,
    // event instance
    '',
    null,
    null,
    0,
    0,
    0,
    0
  ];

  var HAS_SVG_INSTANCE = (typeof SVGElementInstance !== 'undefined');

  /**
   * This module is for normalizing events. Mouse and Touch events will be
   * collected here, and fire PointerEvents that have the same semantics, no
   * matter the source.
   * Events fired:
   *   - pointerdown: a pointing is added
   *   - pointerup: a pointer is removed
   *   - pointermove: a pointer is moved
   *   - pointerover: a pointer crosses into an element
   *   - pointerout: a pointer leaves an element
   *   - pointercancel: a pointer will no longer generate events
   */
  var dispatcher = {
    pointermap: new _pointermap(),
    eventMap: Object.create(null),
    captureInfo: Object.create(null),
    // Scope objects for native events.
    // This exists for ease of testing.
    eventSources: Object.create(null),
    eventSourceList: [],
    /**
     * Add a new event source that will generate pointer events.
     *
     * `inSource` must contain an array of event names named `events`, and
     * functions with the names specified in the `events` array.
     * @param {string} name A name for the event source
     * @param {Object} source A new source of platform events.
     */
    registerSource: function(name, source) {
      var s = source;
      var newEvents = s.events;
      if (newEvents) {
        newEvents.forEach(function(e) {
          if (s[e]) {
            this.eventMap[e] = s[e].bind(s);
          }
        }, this);
        this.eventSources[name] = s;
        this.eventSourceList.push(s);
      }
    },
    register: function(element) {
      var l = this.eventSourceList.length;
      for (var i = 0, es; (i < l) && (es = this.eventSourceList[i]); i++) {
        // call eventsource register
        es.register.call(es, element);
      }
    },
    unregister: function(element) {
      var l = this.eventSourceList.length;
      for (var i = 0, es; (i < l) && (es = this.eventSourceList[i]); i++) {
        // call eventsource register
        es.unregister.call(es, element);
      }
    },
    contains: /*scope.external.contains || */function(container, contained) {
      return container.contains(contained);
    },
    // EVENTS
    down: function(inEvent) {
      inEvent.bubbles = true;
      this.fireEvent('pointerdown', inEvent);
    },
    move: function(inEvent) {
      inEvent.bubbles = true;
      this.fireEvent('pointermove', inEvent);
    },
    up: function(inEvent) {
      inEvent.bubbles = true;
      this.fireEvent('pointerup', inEvent);
    },
    enter: function(inEvent) {
      inEvent.bubbles = false;
      this.fireEvent('pointerenter', inEvent);
    },
    leave: function(inEvent) {
      inEvent.bubbles = false;
      this.fireEvent('pointerleave', inEvent);
    },
    over: function(inEvent) {
      inEvent.bubbles = true;
      this.fireEvent('pointerover', inEvent);
    },
    out: function(inEvent) {
      inEvent.bubbles = true;
      this.fireEvent('pointerout', inEvent);
    },
    cancel: function(inEvent) {
      inEvent.bubbles = true;
      this.fireEvent('pointercancel', inEvent);
    },
    leaveOut: function(event) {
      this.out(event);
      if (!this.contains(event.target, event.relatedTarget)) {
        this.leave(event);
      }
    },
    enterOver: function(event) {
      this.over(event);
      if (!this.contains(event.target, event.relatedTarget)) {
        this.enter(event);
      }
    },
    // LISTENER LOGIC
    eventHandler: function(inEvent) {
      // This is used to prevent multiple dispatch of pointerevents from
      // platform events. This can happen when two elements in different scopes
      // are set up to create pointer events, which is relevant to Shadow DOM.
      if (inEvent._handledByPE) {
        return;
      }
      var type = inEvent.type;
      var fn = this.eventMap && this.eventMap[type];
      if (fn) {
        fn(inEvent);
      }
      inEvent._handledByPE = true;
    },
    // set up event listeners
    listen: function(target, events) {
      events.forEach(function(e) {
        this.addEvent(target, e);
      }, this);
    },
    // remove event listeners
    unlisten: function(target, events) {
      events.forEach(function(e) {
        this.removeEvent(target, e);
      }, this);
    },
    addEvent: /*scope.external.addEvent || */function(target, eventName) {
      target.addEventListener(eventName, this.boundHandler);
    },
    removeEvent: /*scope.external.removeEvent || */function(target, eventName) {
      target.removeEventListener(eventName, this.boundHandler);
    },
    // EVENT CREATION AND TRACKING
    /**
     * Creates a new Event of type `inType`, based on the information in
     * `inEvent`.
     *
     * @param {string} inType A string representing the type of event to create
     * @param {Event} inEvent A platform event with a target
     * @return {Event} A PointerEvent of type `inType`
     */
    makeEvent: function(inType, inEvent) {
      // relatedTarget must be null if pointer is captured
      if (this.captureInfo[inEvent.pointerId]) {
        inEvent.relatedTarget = null;
      }
      var e = new PointerEvent(inType, inEvent);
      if (inEvent.preventDefault) {
        e.preventDefault = inEvent.preventDefault;
      }
      e._target = e._target || inEvent.target;
      return e;
    },
    // make and dispatch an event in one call
    fireEvent: function(inType, inEvent) {
      var e = this.makeEvent(inType, inEvent);
      return this.dispatchEvent(e);
    },
    /**
     * Returns a snapshot of inEvent, with writable properties.
     *
     * @param {Event} inEvent An event that contains properties to copy.
     * @return {Object} An object containing shallow copies of `inEvent`'s
     *    properties.
     */
    cloneEvent: function(inEvent) {
      var eventCopy = Object.create(null), p;
      for (var i = 0; i < CLONE_PROPS.length; i++) {
        p = CLONE_PROPS[i];
        eventCopy[p] = inEvent[p] || CLONE_DEFAULTS[i];
        // Work around SVGInstanceElement shadow tree
        // Return the <use> element that is represented by the instance for Safari, Chrome, IE.
        // This is the behavior implemented by Firefox.
        if (HAS_SVG_INSTANCE && (p === 'target' || p === 'relatedTarget')) {
          if (eventCopy[p] instanceof SVGElementInstance) {
            eventCopy[p] = eventCopy[p].correspondingUseElement;
          }
        }
      }
      // keep the semantics of preventDefault
      if (inEvent.preventDefault) {
        eventCopy.preventDefault = function() {
          inEvent.preventDefault();
        };
      }
      return eventCopy;
    },
    getTarget: function(inEvent) {
      // if pointer capture is set, route all events for the specified pointerId
      // to the capture target
      return this.captureInfo[inEvent.pointerId] || inEvent._target;
    },
    setCapture: function(inPointerId, inTarget) {
      if (this.captureInfo[inPointerId]) {
        this.releaseCapture(inPointerId);
      }
      this.captureInfo[inPointerId] = inTarget;
      var e = document.createEvent('Event');
      e.initEvent('gotpointercapture', true, false);
      e.pointerId = inPointerId;
      this.implicitRelease = this.releaseCapture.bind(this, inPointerId);
      document.addEventListener('pointerup', this.implicitRelease);
      document.addEventListener('pointercancel', this.implicitRelease);
      e._target = inTarget;
      this.asyncDispatchEvent(e);
    },
    releaseCapture: function(inPointerId) {
      var t = this.captureInfo[inPointerId];
      if (t) {
        var e = document.createEvent('Event');
        e.initEvent('lostpointercapture', true, false);
        e.pointerId = inPointerId;
        this.captureInfo[inPointerId] = undefined;
        document.removeEventListener('pointerup', this.implicitRelease);
        document.removeEventListener('pointercancel', this.implicitRelease);
        e._target = t;
        this.asyncDispatchEvent(e);
      }
    },
    /**
     * Dispatches the event to its target.
     *
     * @param {Event} inEvent The event to be dispatched.
     * @return {Boolean} True if an event handler returns true, false otherwise.
     */
    dispatchEvent: /*scope.external.dispatchEvent || */function(inEvent) {
      var t = this.getTarget(inEvent);
      if (t) {
        return t.dispatchEvent(inEvent);
      }
    },
    asyncDispatchEvent: function(inEvent) {
      requestAnimationFrame(this.dispatchEvent.bind(this, inEvent));
    }
  };
  dispatcher.boundHandler = dispatcher.eventHandler.bind(dispatcher);

  var _dispatcher = dispatcher;

  var targeting = {
    shadow: function(inEl) {
      if (inEl) {
        return inEl.shadowRoot || inEl.webkitShadowRoot;
      }
    },
    canTarget: function(shadow) {
      return shadow && Boolean(shadow.elementFromPoint);
    },
    targetingShadow: function(inEl) {
      var s = this.shadow(inEl);
      if (this.canTarget(s)) {
        return s;
      }
    },
    olderShadow: function(shadow) {
      var os = shadow.olderShadowRoot;
      if (!os) {
        var se = shadow.querySelector('shadow');
        if (se) {
          os = se.olderShadowRoot;
        }
      }
      return os;
    },
    allShadows: function(element) {
      var shadows = [], s = this.shadow(element);
      while(s) {
        shadows.push(s);
        s = this.olderShadow(s);
      }
      return shadows;
    },
    searchRoot: function(inRoot, x, y) {
      if (inRoot) {
        var t = inRoot.elementFromPoint(x, y);
        var st, sr, os;
        // is element a shadow host?
        sr = this.targetingShadow(t);
        while (sr) {
          // find the the element inside the shadow root
          st = sr.elementFromPoint(x, y);
          if (!st) {
            // check for older shadows
            sr = this.olderShadow(sr);
          } else {
            // shadowed element may contain a shadow root
            var ssr = this.targetingShadow(st);
            return this.searchRoot(ssr, x, y) || st;
          }
        }
        // light dom element is the target
        return t;
      }
    },
    owner: function(element) {
      var s = element;
      // walk up until you hit the shadow root or document
      while (s.parentNode) {
        s = s.parentNode;
      }
      // the owner element is expected to be a Document or ShadowRoot
      if (s.nodeType != Node.DOCUMENT_NODE && s.nodeType != Node.DOCUMENT_FRAGMENT_NODE) {
        s = document;
      }
      return s;
    },
    findTarget: function(inEvent) {
      var x = inEvent.clientX, y = inEvent.clientY;
      // if the listener is in the shadow root, it is much faster to start there
      var s = this.owner(inEvent.target);
      // if x, y is not in this root, fall back to document search
      if (!s.elementFromPoint(x, y)) {
        s = document;
      }
      return this.searchRoot(s, x, y);
    }
  };

  /**
   * This module uses Mutation Observers to dynamically adjust which nodes will
   * generate Pointer Events.
   *
   * All nodes that wish to generate Pointer Events must have the attribute
   * `data-touch-action` set to `none`.
   */
  var forEach = Array.prototype.forEach.call.bind(Array.prototype.forEach);
  var map = Array.prototype.map.call.bind(Array.prototype.map);
  var toArray = Array.prototype.slice.call.bind(Array.prototype.slice);
  var filter = Array.prototype.filter.call.bind(Array.prototype.filter);
  var MO = window.MutationObserver || window.WebKitMutationObserver;
  var SELECTOR = '[data-touch-action]';
  var OBSERVER_INIT = {
    subtree: true,
    childList: true,
    attributes: true,
    attributeOldValue: true,
    attributeFilter: ['data-touch-action']
  };

  function Installer(add, remove, changed, binder) {
    this.addCallback = add.bind(binder);
    this.removeCallback = remove.bind(binder);
    this.changedCallback = changed.bind(binder);
    if (MO) {
      this.observer = new MO(this.mutationWatcher.bind(this));
    }
  }

  Installer.prototype = {
    watchSubtree: function(target) {
      // Only watch scopes that can target find, as these are top-level.
      // Otherwise we can see duplicate additions and removals that add noise.
      //
      // TODO(dfreedman): For some instances with ShadowDOMPolyfill, we can see
      // a removal without an insertion when a node is redistributed among
      // shadows. Since it all ends up correct in the document, watching only
      // the document will yield the correct mutations to watch.
      if (targeting.canTarget(target)) {
        this.observer.observe(target, OBSERVER_INIT);
      }
    },
    enableOnSubtree: function(target) {
      this.watchSubtree(target);
      if (target === document && document.readyState !== 'complete') {
        this.installOnLoad();
      } else {
        this.installNewSubtree(target);
      }
    },
    installNewSubtree: function(target) {
      forEach(this.findElements(target), this.addElement, this);
    },
    findElements: function(target) {
      if (target.querySelectorAll) {
        return target.querySelectorAll(SELECTOR);
      }
      return [];
    },
    removeElement: function(el) {
      this.removeCallback(el);
    },
    addElement: function(el) {
      this.addCallback(el);
    },
    elementChanged: function(el, oldValue) {
      this.changedCallback(el, oldValue);
    },
    concatLists: function(accum, list) {
      return accum.concat(toArray(list));
    },
    // register all data-touch-action = none nodes on document load
    installOnLoad: function() {
      document.addEventListener('readystatechange', function() {
        if (document.readyState === 'complete') {
          this.installNewSubtree(document);
        }
      }.bind(this));
    },
    isElement: function(n) {
      return n.nodeType === Node.ELEMENT_NODE;
    },
    flattenMutationTree: function(inNodes) {
      // find children with data-touch-action
      var tree = map(inNodes, this.findElements, this);
      // make sure the added nodes are accounted for
      tree.push(filter(inNodes, this.isElement));
      // flatten the list
      return tree.reduce(this.concatLists, []);
    },
    mutationWatcher: function(mutations) {
      mutations.forEach(this.mutationHandler, this);
    },
    mutationHandler: function(m) {
      if (m.type === 'childList') {
        var added = this.flattenMutationTree(m.addedNodes);
        added.forEach(this.addElement, this);
        var removed = this.flattenMutationTree(m.removedNodes);
        removed.forEach(this.removeElement, this);
      } else if (m.type === 'attributes') {
        this.elementChanged(m.target, m.oldValue);
      }
    }
  };

  if (!MO) {
    Installer.prototype.watchSubtree = function(){
      console.warn('PointerEventsPolyfill: MutationObservers not found, data-touch-action will not be dynamically detected');
    };
  }

  var installer = Installer;

  /**
   * This is the constructor for new PointerEvents.
   *
   * New Pointer Events must be given a type, and an optional dictionary of
   * initialization properties.
   *
   * Due to certain platform requirements, events returned from the constructor
   * identify as MouseEvents.
   *
   * @constructor
   * @param {String} inType The type of the event to create.
   * @param {Object} [inDict] An optional dictionary of initial event properties.
   * @return {Event} A new PointerEvent of type `inType` and initialized with properties from `inDict`.
   */
  var MOUSE_PROPS = [
    'bubbles',
    'cancelable',
    'view',
    'detail',
    'screenX',
    'screenY',
    'clientX',
    'clientY',
    'ctrlKey',
    'altKey',
    'shiftKey',
    'metaKey',
    'button',
    'relatedTarget',
    'pageX',
    'pageY'
  ];

  var MOUSE_DEFAULTS = [
    false,
    false,
    null,
    null,
    0,
    0,
    0,
    0,
    false,
    false,
    false,
    false,
    0,
    null,
    0,
    0
  ];

  function _PointerEvent__PointerEvent(inType, inDict) {
    inDict = inDict || Object.create(null);

    var e = document.createEvent('Event');
    e.initEvent(inType, inDict.bubbles || false, inDict.cancelable || false);

    // define inherited MouseEvent properties
    // skip bubbles and cancelable since they're set above in initEvent()
    for(var i = 2, p; i < MOUSE_PROPS.length; i++) {
      p = MOUSE_PROPS[i];
      e[p] = inDict[p] || MOUSE_DEFAULTS[i];
    }
    e.buttons = inDict.buttons || 0;

    // Spec requires that pointers without pressure specified use 0.5 for down
    // state and 0 for up state.
    var pressure = 0;
    if (inDict.pressure) {
      pressure = inDict.pressure;
    } else {
      pressure = e.buttons ? 0.5 : 0;
    }

    // add x/y properties aliased to clientX/Y
    e.x = e.clientX;
    e.y = e.clientY;

    // define the properties of the PointerEvent interface
    e.pointerId = inDict.pointerId || 0;
    e.width = inDict.width || 0;
    e.height = inDict.height || 0;
    e.pressure = pressure;
    e.tiltX = inDict.tiltX || 0;
    e.tiltY = inDict.tiltY || 0;
    e.pointerType = inDict.pointerType || '';
    e.hwTimestamp = inDict.hwTimestamp || 0;
    e.isPrimary = inDict.isPrimary || false;
    return e;
  }

  var _PointerEvent = _PointerEvent__PointerEvent;

  function shadowSelector(v) {
    return 'body /shadow-deep/ ' + selector(v);
  }
  function selector(v) {
    return '[data-touch-action="' + v + '"]';
  }
  function rule(v) {
    return '{ -ms-touch-action: ' + v + '; touch-action: ' + v + '; touch-action-delay: none; }';
  }
  var attrib2css = [
    'none',
    'auto',
    'pan-x',
    'pan-y',
    {
      rule: 'pan-x pan-y',
      selectors: [
        'pan-x pan-y',
        'pan-y pan-x'
      ]
    }
  ];
  var styles = '';
  // only install stylesheet if the browser has touch action support
  var head = document.head;
  var hasNativePE = window.PointerEvent || window.MSPointerEvent;
  // only add shadow selectors if shadowdom is supported
  var hasShadowRoot = !window.ShadowDOMPolyfill && document.head.createShadowRoot;

  function applyAttributeStyles() {
    if (hasNativePE) {
      attrib2css.forEach(function(r) {
        if (String(r) === r) {
          styles += selector(r) + rule(r) + '\n';
          if (hasShadowRoot) {
            styles += shadowSelector(r) + rule(r) + '\n';
          }
        } else {
          styles += r.selectors.map(selector) + rule(r.rule) + '\n';
          if (hasShadowRoot) {
            styles += r.selectors.map(shadowSelector) + rule(r.rule) + '\n';
          }
        }
      });

      var el = document.createElement('style');
      el.textContent = styles;
      document.head.appendChild(el);
    }
  }

  var mouse__pointermap = _dispatcher.pointermap;
  // radius around touchend that swallows mouse events
  var DEDUP_DIST = 25;

  var WHICH_TO_BUTTONS = [0, 1, 4, 2];

  var HAS_BUTTONS = false;
  try {
    HAS_BUTTONS = new MouseEvent('test', {buttons: 1}).buttons === 1;
  } catch (e) {}

  // handler block for native mouse events
  var mouseEvents = {
    POINTER_ID: 1,
    POINTER_TYPE: 'mouse',
    events: [
      'mousedown',
      'mousemove',
      'mouseup',
      'mouseover',
      'mouseout'
    ],
    register: function(target) {
      _dispatcher.listen(target, this.events);
    },
    unregister: function(target) {
      _dispatcher.unlisten(target, this.events);
    },
    lastTouches: [],
    // collide with the global mouse listener
    isEventSimulatedFromTouch: function(inEvent) {
      var lts = this.lastTouches;
      var x = inEvent.clientX, y = inEvent.clientY;
      for (var i = 0, l = lts.length, t; i < l && (t = lts[i]); i++) {
        // simulated mouse events will be swallowed near a primary touchend
        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);
        if (dx <= DEDUP_DIST && dy <= DEDUP_DIST) {
          return true;
        }
      }
    },
    prepareEvent: function(inEvent) {
      var e = _dispatcher.cloneEvent(inEvent);
      // forward mouse preventDefault
      var pd = e.preventDefault;
      e.preventDefault = function() {
        inEvent.preventDefault();
        pd();
      };
      e.pointerId = this.POINTER_ID;
      e.isPrimary = true;
      e.pointerType = this.POINTER_TYPE;
      if (!HAS_BUTTONS) {
        e.buttons = WHICH_TO_BUTTONS[e.which] || 0;
      }
      return e;
    },
    mousedown: function(inEvent) {
      if (!this.isEventSimulatedFromTouch(inEvent)) {
        var p = mouse__pointermap.has(this.POINTER_ID);
        // TODO(dfreedman) workaround for some elements not sending mouseup
        // http://crbug/149091
        if (p) {
          this.cancel(inEvent);
        }
        var e = this.prepareEvent(inEvent);
        mouse__pointermap.set(this.POINTER_ID, inEvent);
        _dispatcher.down(e);
      }
    },
    mousemove: function(inEvent) {
      if (!this.isEventSimulatedFromTouch(inEvent)) {
        var e = this.prepareEvent(inEvent);
        _dispatcher.move(e);
      }
    },
    mouseup: function(inEvent) {
      if (!this.isEventSimulatedFromTouch(inEvent)) {
        var p = mouse__pointermap.get(this.POINTER_ID);
        if (p && p.button === inEvent.button) {
          var e = this.prepareEvent(inEvent);
          _dispatcher.up(e);
          this.cleanupMouse();
        }
      }
    },
    mouseover: function(inEvent) {
      if (!this.isEventSimulatedFromTouch(inEvent)) {
        var e = this.prepareEvent(inEvent);
        _dispatcher.enterOver(e);
      }
    },
    mouseout: function(inEvent) {
      if (!this.isEventSimulatedFromTouch(inEvent)) {
        var e = this.prepareEvent(inEvent);
        _dispatcher.leaveOut(e);
      }
    },
    cancel: function(inEvent) {
      var e = this.prepareEvent(inEvent);
      _dispatcher.cancel(e);
      this.cleanupMouse();
    },
    cleanupMouse: function() {
      mouse__pointermap['delete'](this.POINTER_ID);
    }
  };

  var mouse = mouseEvents;

  var captureInfo = _dispatcher.captureInfo;
  var findTarget = targeting.findTarget.bind(targeting);
  var allShadows = targeting.allShadows.bind(targeting);
  var touch__pointermap = _dispatcher.pointermap;
  var touchMap = Array.prototype.map.call.bind(Array.prototype.map);
  // This should be long enough to ignore compat mouse events made by touch
  var DEDUP_TIMEOUT = 2500;
  var CLICK_COUNT_TIMEOUT = 200;
  var ATTRIB = 'data-touch-action';
  var INSTALLER;
  // The presence of touch event handlers blocks scrolling, and so we must be careful to
  // avoid adding handlers unnecessarily.  Chrome plans to add a touch-action-delay property
  // (crbug.com/329559) to address this, and once we have that we can opt-in to a simpler
  // handler registration mechanism.  Rather than try to predict how exactly to opt-in to
  // that we'll just leave this disabled until there is a build of Chrome to test.
  var HAS_TOUCH_ACTION_DELAY = false;

  // handler block for native touch events
  var touchEvents = {
    events: [
      'touchstart',
      'touchmove',
      'touchend',
      'touchcancel'
    ],
    register: function(target) {
      if (HAS_TOUCH_ACTION_DELAY) {
        _dispatcher.listen(target, this.events);
      } else {
        INSTALLER.enableOnSubtree(target);
      }
    },
    unregister: function(target) {
      if (HAS_TOUCH_ACTION_DELAY) {
        _dispatcher.unlisten(target, this.events);
      } else {
        // TODO(dfreedman): is it worth it to disconnect the MO?
      }
    },
    elementAdded: function(el) {
      var a = el.getAttribute(ATTRIB);
      var st = this.touchActionToScrollType(a);
      if (st) {
        el._scrollType = st;
        _dispatcher.listen(el, this.events);
        // set data-touch-action on shadows as well
        allShadows(el).forEach(function(s) {
          s._scrollType = st;
          _dispatcher.listen(s, this.events);
        }, this);
      }
    },
    elementRemoved: function(el) {
      el._scrollType = undefined;
      _dispatcher.unlisten(el, this.events);
      // remove data-touch-action from shadow
      allShadows(el).forEach(function(s) {
        s._scrollType = undefined;
        _dispatcher.unlisten(s, this.events);
      }, this);
    },
    elementChanged: function(el, oldValue) {
      var a = el.getAttribute(ATTRIB);
      var st = this.touchActionToScrollType(a);
      var oldSt = this.touchActionToScrollType(oldValue);
      // simply update scrollType if listeners are already established
      if (st && oldSt) {
        el._scrollType = st;
        allShadows(el).forEach(function(s) {
          s._scrollType = st;
        }, this);
      } else if (oldSt) {
        this.elementRemoved(el);
      } else if (st) {
        this.elementAdded(el);
      }
    },
    scrollTypes: {
      EMITTER: 'none',
      XSCROLLER: 'pan-x',
      YSCROLLER: 'pan-y',
      SCROLLER: /^(?:pan-x pan-y)|(?:pan-y pan-x)|auto$/
    },
    touchActionToScrollType: function(touchAction) {
      var t = touchAction;
      var st = this.scrollTypes;
      if (t === 'none') {
        return 'none';
      } else if (t === st.XSCROLLER) {
        return 'X';
      } else if (t === st.YSCROLLER) {
        return 'Y';
      } else if (st.SCROLLER.exec(t)) {
        return 'XY';
      }
    },
    POINTER_TYPE: 'touch',
    firstTouch: null,
    isPrimaryTouch: function(inTouch) {
      return this.firstTouch === inTouch.identifier;
    },
    setPrimaryTouch: function(inTouch) {
      // set primary touch if there no pointers, or the only pointer is the mouse
      if (touch__pointermap.pointers() === 0 || (touch__pointermap.pointers() === 1 && touch__pointermap.has(1))) {
        this.firstTouch = inTouch.identifier;
        this.firstXY = {X: inTouch.clientX, Y: inTouch.clientY};
        this.scrolling = false;
        this.cancelResetClickCount();
      }
    },
    removePrimaryPointer: function(inPointer) {
      if (inPointer.isPrimary) {
        this.firstTouch = null;
        this.firstXY = null;
        this.resetClickCount();
      }
    },
    clickCount: 0,
    resetId: null,
    resetClickCount: function() {
      var fn = function() {
        this.clickCount = 0;
        this.resetId = null;
      }.bind(this);
      this.resetId = setTimeout(fn, CLICK_COUNT_TIMEOUT);
    },
    cancelResetClickCount: function() {
      if (this.resetId) {
        clearTimeout(this.resetId);
      }
    },
    typeToButtons: function(type) {
      var ret = 0;
      if (type === 'touchstart' || type === 'touchmove') {
        ret = 1;
      }
      return ret;
    },
    touchToPointer: function(inTouch) {
      var cte = this.currentTouchEvent;
      var e = _dispatcher.cloneEvent(inTouch);
      // Spec specifies that pointerId 1 is reserved for Mouse.
      // Touch identifiers can start at 0.
      // Add 2 to the touch identifier for compatibility.
      var id = e.pointerId = inTouch.identifier + 2;
      e.target = captureInfo[id] || findTarget(e);
      e.bubbles = true;
      e.cancelable = true;
      e.detail = this.clickCount;
      e.button = 0;
      e.buttons = this.typeToButtons(cte.type);
      e.width = inTouch.webkitRadiusX || inTouch.radiusX || 0;
      e.height = inTouch.webkitRadiusY || inTouch.radiusY || 0;
      e.pressure = inTouch.webkitForce || inTouch.force || 0.5;
      e.isPrimary = this.isPrimaryTouch(inTouch);
      e.pointerType = this.POINTER_TYPE;
      // forward touch preventDefaults
      var self = this;
      e.preventDefault = function() {
        self.scrolling = false;
        self.firstXY = null;
        cte.preventDefault();
      };
      return e;
    },
    processTouches: function(inEvent, inFunction) {
      var tl = inEvent.changedTouches;
      this.currentTouchEvent = inEvent;
      for (var i = 0, t; i < tl.length; i++) {
        t = tl[i];
        inFunction.call(this, this.touchToPointer(t));
      }
    },
    // For single axis scrollers, determines whether the element should emit
    // pointer events or behave as a scroller
    shouldScroll: function(inEvent) {
      if (this.firstXY) {
        var ret;
        var scrollAxis = inEvent.currentTarget._scrollType;
        if (scrollAxis === 'none') {
          // this element is a touch-action: none, should never scroll
          ret = false;
        } else if (scrollAxis === 'XY') {
          // this element should always scroll
          ret = true;
        } else {
          var t = inEvent.changedTouches[0];
          // check the intended scroll axis, and other axis
          var a = scrollAxis;
          var oa = scrollAxis === 'Y' ? 'X' : 'Y';
          var da = Math.abs(t['client' + a] - this.firstXY[a]);
          var doa = Math.abs(t['client' + oa] - this.firstXY[oa]);
          // if delta in the scroll axis > delta other axis, scroll instead of
          // making events
          ret = da >= doa;
        }
        this.firstXY = null;
        return ret;
      }
    },
    findTouch: function(inTL, inId) {
      for (var i = 0, l = inTL.length, t; i < l && (t = inTL[i]); i++) {
        if (t.identifier === inId) {
          return true;
        }
      }
    },
    // In some instances, a touchstart can happen without a touchend. This
    // leaves the pointermap in a broken state.
    // Therefore, on every touchstart, we remove the touches that did not fire a
    // touchend event.
    // To keep state globally consistent, we fire a
    // pointercancel for this "abandoned" touch
    vacuumTouches: function(inEvent) {
      var tl = inEvent.touches;
      // pointermap.pointers() should be < tl.length here, as the touchstart has not
      // been processed yet.
      if (touch__pointermap.pointers() >= tl.length) {
        var d = [];
        touch__pointermap.forEach(function(value, key) {
          // Never remove pointerId == 1, which is mouse.
          // Touch identifiers are 2 smaller than their pointerId, which is the
          // index in pointermap.
          if (key !== 1 && !this.findTouch(tl, key - 2)) {
            var p = value.out;
            d.push(p);
          }
        }, this);
        d.forEach(this.cancelOut, this);
      }
    },
    touchstart: function(inEvent) {
      this.vacuumTouches(inEvent);
      this.setPrimaryTouch(inEvent.changedTouches[0]);
      this.dedupSynthMouse(inEvent);
      if (!this.scrolling) {
        this.clickCount++;
        this.processTouches(inEvent, this.overDown);
      }
    },
    overDown: function(inPointer) {
      var p = touch__pointermap.set(inPointer.pointerId, {
        target: inPointer.target,
        out: inPointer,
        outTarget: inPointer.target
      });
      _dispatcher.over(inPointer);
      _dispatcher.enter(inPointer);
      _dispatcher.down(inPointer);
    },
    touchmove: function(inEvent) {
      if (!this.scrolling) {
        if (this.shouldScroll(inEvent)) {
          this.scrolling = true;
          this.touchcancel(inEvent);
        } else {
          inEvent.preventDefault();
          this.processTouches(inEvent, this.moveOverOut);
        }
      }
    },
    moveOverOut: function(inPointer) {
      var event = inPointer;
      var pointer = touch__pointermap.get(event.pointerId);
      // a finger drifted off the screen, ignore it
      if (!pointer) {
        return;
      }
      var outEvent = pointer.out;
      var outTarget = pointer.outTarget;
      _dispatcher.move(event);
      if (outEvent && outTarget !== event.target) {
        outEvent.relatedTarget = event.target;
        event.relatedTarget = outTarget;
        // recover from retargeting by shadow
        outEvent.target = outTarget;
        if (event.target) {
          _dispatcher.leaveOut(outEvent);
          _dispatcher.enterOver(event);
        } else {
          // clean up case when finger leaves the screen
          event.target = outTarget;
          event.relatedTarget = null;
          this.cancelOut(event);
        }
      }
      pointer.out = event;
      pointer.outTarget = event.target;
    },
    touchend: function(inEvent) {
      this.dedupSynthMouse(inEvent);
      this.processTouches(inEvent, this.upOut);
    },
    upOut: function(inPointer) {
      if (!this.scrolling) {
        _dispatcher.up(inPointer);
        _dispatcher.out(inPointer);
        _dispatcher.leave(inPointer);
      }
      this.cleanUpPointer(inPointer);
    },
    touchcancel: function(inEvent) {
      this.processTouches(inEvent, this.cancelOut);
    },
    cancelOut: function(inPointer) {
      _dispatcher.cancel(inPointer);
      _dispatcher.out(inPointer);
      _dispatcher.leave(inPointer);
      this.cleanUpPointer(inPointer);
    },
    cleanUpPointer: function(inPointer) {
      touch__pointermap['delete'](inPointer.pointerId);
      this.removePrimaryPointer(inPointer);
    },
    // prevent synth mouse events from creating pointer events
    dedupSynthMouse: function(inEvent) {
      var lts = mouse.lastTouches;
      var t = inEvent.changedTouches[0];
      // only the primary finger will synth mouse events
      if (this.isPrimaryTouch(t)) {
        // remember x/y of last touch
        var lt = {x: t.clientX, y: t.clientY};
        lts.push(lt);
        var fn = (function(lts, lt){
          var i = lts.indexOf(lt);
          if (i > -1) {
            lts.splice(i, 1);
          }
        }).bind(null, lts, lt);
        setTimeout(fn, DEDUP_TIMEOUT);
      }
    }
  };

  if (!HAS_TOUCH_ACTION_DELAY) {
    INSTALLER = new installer(touchEvents.elementAdded, touchEvents.elementRemoved, touchEvents.elementChanged, touchEvents);
  }

  var touch = touchEvents;

  var ms__pointermap = _dispatcher.pointermap;
  var HAS_BITMAP_TYPE = window.MSPointerEvent && typeof window.MSPointerEvent.MSPOINTER_TYPE_MOUSE === 'number';
  var msEvents = {
    events: [
      'MSPointerDown',
      'MSPointerMove',
      'MSPointerUp',
      'MSPointerOut',
      'MSPointerOver',
      'MSPointerCancel',
      'MSGotPointerCapture',
      'MSLostPointerCapture'
    ],
    register: function(target) {
      _dispatcher.listen(target, this.events);
    },
    unregister: function(target) {
      _dispatcher.unlisten(target, this.events);
    },
    POINTER_TYPES: [
      '',
      'unavailable',
      'touch',
      'pen',
      'mouse'
    ],
    prepareEvent: function(inEvent) {
      var e = inEvent;
      if (HAS_BITMAP_TYPE) {
        e = _dispatcher.cloneEvent(inEvent);
        e.pointerType = this.POINTER_TYPES[inEvent.pointerType];
      }
      return e;
    },
    cleanup: function(id) {
      ms__pointermap['delete'](id);
    },
    MSPointerDown: function(inEvent) {
      ms__pointermap.set(inEvent.pointerId, inEvent);
      var e = this.prepareEvent(inEvent);
      _dispatcher.down(e);
    },
    MSPointerMove: function(inEvent) {
      var e = this.prepareEvent(inEvent);
      _dispatcher.move(e);
    },
    MSPointerUp: function(inEvent) {
      var e = this.prepareEvent(inEvent);
      _dispatcher.up(e);
      this.cleanup(inEvent.pointerId);
    },
    MSPointerOut: function(inEvent) {
      var e = this.prepareEvent(inEvent);
      _dispatcher.leaveOut(e);
    },
    MSPointerOver: function(inEvent) {
      var e = this.prepareEvent(inEvent);
      _dispatcher.enterOver(e);
    },
    MSPointerCancel: function(inEvent) {
      var e = this.prepareEvent(inEvent);
      _dispatcher.cancel(e);
      this.cleanup(inEvent.pointerId);
    },
    MSLostPointerCapture: function(inEvent) {
      var e = _dispatcher.makeEvent('lostpointercapture', inEvent);
      _dispatcher.dispatchEvent(e);
    },
    MSGotPointerCapture: function(inEvent) {
      var e = _dispatcher.makeEvent('gotpointercapture', inEvent);
      _dispatcher.dispatchEvent(e);
    }
  };

  var ms = msEvents;

  function platform_events__applyPolyfill() {
    // only activate if this platform does not have pointer events
    if (!window.PointerEvent) {
      window.PointerEvent = _PointerEvent;

      if (window.navigator.msPointerEnabled) {
        var tp = window.navigator.msMaxTouchPoints;
        Object.defineProperty(window.navigator, 'maxTouchPoints', {
          value: tp,
          enumerable: true
        });
        _dispatcher.registerSource('ms', ms);
      } else {
        _dispatcher.registerSource('mouse', mouse);
        if (window.ontouchstart !== undefined) {
          _dispatcher.registerSource('touch', touch);
        }
      }

      _dispatcher.register(document);
    }
  }

  var n = window.navigator;
  var s, r;
  function assertDown(id) {
    if (!_dispatcher.pointermap.has(id)) {
      throw new Error('InvalidPointerId');
    }
  }
  if (n.msPointerEnabled) {
    s = function(pointerId) {
      assertDown(pointerId);
      this.msSetPointerCapture(pointerId);
    };
    r = function(pointerId) {
      assertDown(pointerId);
      this.msReleasePointerCapture(pointerId);
    };
  } else {
    s = function setPointerCapture(pointerId) {
      assertDown(pointerId);
      _dispatcher.setCapture(pointerId, this);
    };
    r = function releasePointerCapture(pointerId) {
      assertDown(pointerId);
      _dispatcher.releaseCapture(pointerId, this);
    };
  }

  function capture__applyPolyfill() {
    if (window.Element && !Element.prototype.setPointerCapture) {
      Object.defineProperties(Element.prototype, {
        'setPointerCapture': {
          value: s
        },
        'releasePointerCapture': {
          value: r
        }
      });
    }
  }

  applyAttributeStyles();
  platform_events__applyPolyfill();
  capture__applyPolyfill();

  var pointerevents = {
    dispatcher: _dispatcher,
    Installer: installer,
    PointerEvent: _PointerEvent,
    PointerMap: _pointermap,
    targetFinding: targeting
  };

  return pointerevents;

}));

/*! jQuery UI - v1.11.4 - 2015-11-13
* http://jqueryui.com
* Includes: core.js, widget.js, mouse.js, sortable.js, effect.js
* Copyright jQuery Foundation and other contributors; Licensed MIT */

(function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e(jQuery)})(function(e){function t(t,s){var n,a,o,r=t.nodeName.toLowerCase();return"area"===r?(n=t.parentNode,a=n.name,t.href&&a&&"map"===n.nodeName.toLowerCase()?(o=e("img[usemap='#"+a+"']")[0],!!o&&i(o)):!1):(/^(input|select|textarea|button|object)$/.test(r)?!t.disabled:"a"===r?t.href||s:s)&&i(t)}function i(t){return e.expr.filters.visible(t)&&!e(t).parents().addBack().filter(function(){return"hidden"===e.css(this,"visibility")}).length}e.ui=e.ui||{},e.extend(e.ui,{version:"1.11.4",keyCode:{BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38}}),e.fn.extend({scrollParent:function(t){var i=this.css("position"),s="absolute"===i,n=t?/(auto|scroll|hidden)/:/(auto|scroll)/,a=this.parents().filter(function(){var t=e(this);return s&&"static"===t.css("position")?!1:n.test(t.css("overflow")+t.css("overflow-y")+t.css("overflow-x"))}).eq(0);return"fixed"!==i&&a.length?a:e(this[0].ownerDocument||document)},uniqueId:function(){var e=0;return function(){return this.each(function(){this.id||(this.id="ui-id-"+ ++e)})}}(),removeUniqueId:function(){return this.each(function(){/^ui-id-\d+$/.test(this.id)&&e(this).removeAttr("id")})}}),e.extend(e.expr[":"],{data:e.expr.createPseudo?e.expr.createPseudo(function(t){return function(i){return!!e.data(i,t)}}):function(t,i,s){return!!e.data(t,s[3])},focusable:function(i){return t(i,!isNaN(e.attr(i,"tabindex")))},tabbable:function(i){var s=e.attr(i,"tabindex"),n=isNaN(s);return(n||s>=0)&&t(i,!n)}}),e("<a>").outerWidth(1).jquery||e.each(["Width","Height"],function(t,i){function s(t,i,s,a){return e.each(n,function(){i-=parseFloat(e.css(t,"padding"+this))||0,s&&(i-=parseFloat(e.css(t,"border"+this+"Width"))||0),a&&(i-=parseFloat(e.css(t,"margin"+this))||0)}),i}var n="Width"===i?["Left","Right"]:["Top","Bottom"],a=i.toLowerCase(),o={innerWidth:e.fn.innerWidth,innerHeight:e.fn.innerHeight,outerWidth:e.fn.outerWidth,outerHeight:e.fn.outerHeight};e.fn["inner"+i]=function(t){return void 0===t?o["inner"+i].call(this):this.each(function(){e(this).css(a,s(this,t)+"px")})},e.fn["outer"+i]=function(t,n){return"number"!=typeof t?o["outer"+i].call(this,t):this.each(function(){e(this).css(a,s(this,t,!0,n)+"px")})}}),e.fn.addBack||(e.fn.addBack=function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}),e("<a>").data("a-b","a").removeData("a-b").data("a-b")&&(e.fn.removeData=function(t){return function(i){return arguments.length?t.call(this,e.camelCase(i)):t.call(this)}}(e.fn.removeData)),e.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()),e.fn.extend({focus:function(t){return function(i,s){return"number"==typeof i?this.each(function(){var t=this;setTimeout(function(){e(t).focus(),s&&s.call(t)},i)}):t.apply(this,arguments)}}(e.fn.focus),disableSelection:function(){var e="onselectstart"in document.createElement("div")?"selectstart":"mousedown";return function(){return this.bind(e+".ui-disableSelection",function(e){e.preventDefault()})}}(),enableSelection:function(){return this.unbind(".ui-disableSelection")},zIndex:function(t){if(void 0!==t)return this.css("zIndex",t);if(this.length)for(var i,s,n=e(this[0]);n.length&&n[0]!==document;){if(i=n.css("position"),("absolute"===i||"relative"===i||"fixed"===i)&&(s=parseInt(n.css("zIndex"),10),!isNaN(s)&&0!==s))return s;n=n.parent()}return 0}}),e.ui.plugin={add:function(t,i,s){var n,a=e.ui[t].prototype;for(n in s)a.plugins[n]=a.plugins[n]||[],a.plugins[n].push([i,s[n]])},call:function(e,t,i,s){var n,a=e.plugins[t];if(a&&(s||e.element[0].parentNode&&11!==e.element[0].parentNode.nodeType))for(n=0;a.length>n;n++)e.options[a[n][0]]&&a[n][1].apply(e.element,i)}};var s=0,n=Array.prototype.slice;e.cleanData=function(t){return function(i){var s,n,a;for(a=0;null!=(n=i[a]);a++)try{s=e._data(n,"events"),s&&s.remove&&e(n).triggerHandler("remove")}catch(o){}t(i)}}(e.cleanData),e.widget=function(t,i,s){var n,a,o,r,h={},l=t.split(".")[0];return t=t.split(".")[1],n=l+"-"+t,s||(s=i,i=e.Widget),e.expr[":"][n.toLowerCase()]=function(t){return!!e.data(t,n)},e[l]=e[l]||{},a=e[l][t],o=e[l][t]=function(e,t){return this._createWidget?(arguments.length&&this._createWidget(e,t),void 0):new o(e,t)},e.extend(o,a,{version:s.version,_proto:e.extend({},s),_childConstructors:[]}),r=new i,r.options=e.widget.extend({},r.options),e.each(s,function(t,s){return e.isFunction(s)?(h[t]=function(){var e=function(){return i.prototype[t].apply(this,arguments)},n=function(e){return i.prototype[t].apply(this,e)};return function(){var t,i=this._super,a=this._superApply;return this._super=e,this._superApply=n,t=s.apply(this,arguments),this._super=i,this._superApply=a,t}}(),void 0):(h[t]=s,void 0)}),o.prototype=e.widget.extend(r,{widgetEventPrefix:a?r.widgetEventPrefix||t:t},h,{constructor:o,namespace:l,widgetName:t,widgetFullName:n}),a?(e.each(a._childConstructors,function(t,i){var s=i.prototype;e.widget(s.namespace+"."+s.widgetName,o,i._proto)}),delete a._childConstructors):i._childConstructors.push(o),e.widget.bridge(t,o),o},e.widget.extend=function(t){for(var i,s,a=n.call(arguments,1),o=0,r=a.length;r>o;o++)for(i in a[o])s=a[o][i],a[o].hasOwnProperty(i)&&void 0!==s&&(t[i]=e.isPlainObject(s)?e.isPlainObject(t[i])?e.widget.extend({},t[i],s):e.widget.extend({},s):s);return t},e.widget.bridge=function(t,i){var s=i.prototype.widgetFullName||t;e.fn[t]=function(a){var o="string"==typeof a,r=n.call(arguments,1),h=this;return o?this.each(function(){var i,n=e.data(this,s);return"instance"===a?(h=n,!1):n?e.isFunction(n[a])&&"_"!==a.charAt(0)?(i=n[a].apply(n,r),i!==n&&void 0!==i?(h=i&&i.jquery?h.pushStack(i.get()):i,!1):void 0):e.error("no such method '"+a+"' for "+t+" widget instance"):e.error("cannot call methods on "+t+" prior to initialization; "+"attempted to call method '"+a+"'")}):(r.length&&(a=e.widget.extend.apply(null,[a].concat(r))),this.each(function(){var t=e.data(this,s);t?(t.option(a||{}),t._init&&t._init()):e.data(this,s,new i(a,this))})),h}},e.Widget=function(){},e.Widget._childConstructors=[],e.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{disabled:!1,create:null},_createWidget:function(t,i){i=e(i||this.defaultElement||this)[0],this.element=e(i),this.uuid=s++,this.eventNamespace="."+this.widgetName+this.uuid,this.bindings=e(),this.hoverable=e(),this.focusable=e(),i!==this&&(e.data(i,this.widgetFullName,this),this._on(!0,this.element,{remove:function(e){e.target===i&&this.destroy()}}),this.document=e(i.style?i.ownerDocument:i.document||i),this.window=e(this.document[0].defaultView||this.document[0].parentWindow)),this.options=e.widget.extend({},this.options,this._getCreateOptions(),t),this._create(),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:e.noop,_getCreateEventData:e.noop,_create:e.noop,_init:e.noop,destroy:function(){this._destroy(),this.element.unbind(this.eventNamespace).removeData(this.widgetFullName).removeData(e.camelCase(this.widgetFullName)),this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName+"-disabled "+"ui-state-disabled"),this.bindings.unbind(this.eventNamespace),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")},_destroy:e.noop,widget:function(){return this.element},option:function(t,i){var s,n,a,o=t;if(0===arguments.length)return e.widget.extend({},this.options);if("string"==typeof t)if(o={},s=t.split("."),t=s.shift(),s.length){for(n=o[t]=e.widget.extend({},this.options[t]),a=0;s.length-1>a;a++)n[s[a]]=n[s[a]]||{},n=n[s[a]];if(t=s.pop(),1===arguments.length)return void 0===n[t]?null:n[t];n[t]=i}else{if(1===arguments.length)return void 0===this.options[t]?null:this.options[t];o[t]=i}return this._setOptions(o),this},_setOptions:function(e){var t;for(t in e)this._setOption(t,e[t]);return this},_setOption:function(e,t){return this.options[e]=t,"disabled"===e&&(this.widget().toggleClass(this.widgetFullName+"-disabled",!!t),t&&(this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus"))),this},enable:function(){return this._setOptions({disabled:!1})},disable:function(){return this._setOptions({disabled:!0})},_on:function(t,i,s){var n,a=this;"boolean"!=typeof t&&(s=i,i=t,t=!1),s?(i=n=e(i),this.bindings=this.bindings.add(i)):(s=i,i=this.element,n=this.widget()),e.each(s,function(s,o){function r(){return t||a.options.disabled!==!0&&!e(this).hasClass("ui-state-disabled")?("string"==typeof o?a[o]:o).apply(a,arguments):void 0}"string"!=typeof o&&(r.guid=o.guid=o.guid||r.guid||e.guid++);var h=s.match(/^([\w:-]*)\s*(.*)$/),l=h[1]+a.eventNamespace,u=h[2];u?n.delegate(u,l,r):i.bind(l,r)})},_off:function(t,i){i=(i||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,t.unbind(i).undelegate(i),this.bindings=e(this.bindings.not(t).get()),this.focusable=e(this.focusable.not(t).get()),this.hoverable=e(this.hoverable.not(t).get())},_delay:function(e,t){function i(){return("string"==typeof e?s[e]:e).apply(s,arguments)}var s=this;return setTimeout(i,t||0)},_hoverable:function(t){this.hoverable=this.hoverable.add(t),this._on(t,{mouseenter:function(t){e(t.currentTarget).addClass("ui-state-hover")},mouseleave:function(t){e(t.currentTarget).removeClass("ui-state-hover")}})},_focusable:function(t){this.focusable=this.focusable.add(t),this._on(t,{focusin:function(t){e(t.currentTarget).addClass("ui-state-focus")},focusout:function(t){e(t.currentTarget).removeClass("ui-state-focus")}})},_trigger:function(t,i,s){var n,a,o=this.options[t];if(s=s||{},i=e.Event(i),i.type=(t===this.widgetEventPrefix?t:this.widgetEventPrefix+t).toLowerCase(),i.target=this.element[0],a=i.originalEvent)for(n in a)n in i||(i[n]=a[n]);return this.element.trigger(i,s),!(e.isFunction(o)&&o.apply(this.element[0],[i].concat(s))===!1||i.isDefaultPrevented())}},e.each({show:"fadeIn",hide:"fadeOut"},function(t,i){e.Widget.prototype["_"+t]=function(s,n,a){"string"==typeof n&&(n={effect:n});var o,r=n?n===!0||"number"==typeof n?i:n.effect||i:t;n=n||{},"number"==typeof n&&(n={duration:n}),o=!e.isEmptyObject(n),n.complete=a,n.delay&&s.delay(n.delay),o&&e.effects&&e.effects.effect[r]?s[t](n):r!==t&&s[r]?s[r](n.duration,n.easing,a):s.queue(function(i){e(this)[t](),a&&a.call(s[0]),i()})}}),e.widget;var a=!1;e(document).mouseup(function(){a=!1}),e.widget("ui.mouse",{version:"1.11.4",options:{cancel:"input,textarea,button,select,option",distance:1,delay:0},_mouseInit:function(){var t=this;this.element.bind("mousedown."+this.widgetName,function(e){return t._mouseDown(e)}).bind("click."+this.widgetName,function(i){return!0===e.data(i.target,t.widgetName+".preventClickEvent")?(e.removeData(i.target,t.widgetName+".preventClickEvent"),i.stopImmediatePropagation(),!1):void 0}),this.started=!1},_mouseDestroy:function(){this.element.unbind("."+this.widgetName),this._mouseMoveDelegate&&this.document.unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(t){if(!a){this._mouseMoved=!1,this._mouseStarted&&this._mouseUp(t),this._mouseDownEvent=t;var i=this,s=1===t.which,n="string"==typeof this.options.cancel&&t.target.nodeName?e(t.target).closest(this.options.cancel).length:!1;return s&&!n&&this._mouseCapture(t)?(this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout(function(){i.mouseDelayMet=!0},this.options.delay)),this._mouseDistanceMet(t)&&this._mouseDelayMet(t)&&(this._mouseStarted=this._mouseStart(t)!==!1,!this._mouseStarted)?(t.preventDefault(),!0):(!0===e.data(t.target,this.widgetName+".preventClickEvent")&&e.removeData(t.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(e){return i._mouseMove(e)},this._mouseUpDelegate=function(e){return i._mouseUp(e)},this.document.bind("mousemove."+this.widgetName,this._mouseMoveDelegate).bind("mouseup."+this.widgetName,this._mouseUpDelegate),t.preventDefault(),a=!0,!0)):!0}},_mouseMove:function(t){if(this._mouseMoved){if(e.ui.ie&&(!document.documentMode||9>document.documentMode)&&!t.button)return this._mouseUp(t);if(!t.which)return this._mouseUp(t)}return(t.which||t.button)&&(this._mouseMoved=!0),this._mouseStarted?(this._mouseDrag(t),t.preventDefault()):(this._mouseDistanceMet(t)&&this._mouseDelayMet(t)&&(this._mouseStarted=this._mouseStart(this._mouseDownEvent,t)!==!1,this._mouseStarted?this._mouseDrag(t):this._mouseUp(t)),!this._mouseStarted)},_mouseUp:function(t){return this.document.unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,t.target===this._mouseDownEvent.target&&e.data(t.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(t)),a=!1,!1},_mouseDistanceMet:function(e){return Math.max(Math.abs(this._mouseDownEvent.pageX-e.pageX),Math.abs(this._mouseDownEvent.pageY-e.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return!0}}),e.widget("ui.sortable",e.ui.mouse,{version:"1.11.4",widgetEventPrefix:"sort",ready:!1,options:{appendTo:"parent",axis:!1,connectWith:!1,containment:!1,cursor:"auto",cursorAt:!1,dropOnEmpty:!0,forcePlaceholderSize:!1,forceHelperSize:!1,grid:!1,handle:!1,helper:"original",items:"> *",opacity:!1,placeholder:!1,revert:!1,scroll:!0,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1e3,activate:null,beforeStop:null,change:null,deactivate:null,out:null,over:null,receive:null,remove:null,sort:null,start:null,stop:null,update:null},_isOverAxis:function(e,t,i){return e>=t&&t+i>e},_isFloating:function(e){return/left|right/.test(e.css("float"))||/inline|table-cell/.test(e.css("display"))},_create:function(){this.containerCache={},this.element.addClass("ui-sortable"),this.refresh(),this.offset=this.element.offset(),this._mouseInit(),this._setHandleClassName(),this.ready=!0},_setOption:function(e,t){this._super(e,t),"handle"===e&&this._setHandleClassName()},_setHandleClassName:function(){this.element.find(".ui-sortable-handle").removeClass("ui-sortable-handle"),e.each(this.items,function(){(this.instance.options.handle?this.item.find(this.instance.options.handle):this.item).addClass("ui-sortable-handle")})},_destroy:function(){this.element.removeClass("ui-sortable ui-sortable-disabled").find(".ui-sortable-handle").removeClass("ui-sortable-handle"),this._mouseDestroy();for(var e=this.items.length-1;e>=0;e--)this.items[e].item.removeData(this.widgetName+"-item");return this},_mouseCapture:function(t,i){var s=null,n=!1,a=this;return this.reverting?!1:this.options.disabled||"static"===this.options.type?!1:(this._refreshItems(t),e(t.target).parents().each(function(){return e.data(this,a.widgetName+"-item")===a?(s=e(this),!1):void 0}),e.data(t.target,a.widgetName+"-item")===a&&(s=e(t.target)),s?!this.options.handle||i||(e(this.options.handle,s).find("*").addBack().each(function(){this===t.target&&(n=!0)}),n)?(this.currentItem=s,this._removeCurrentsFromItems(),!0):!1:!1)},_mouseStart:function(t,i,s){var n,a,o=this.options;if(this.currentContainer=this,this.refreshPositions(),this.helper=this._createHelper(t),this._cacheHelperProportions(),this._cacheMargins(),this.scrollParent=this.helper.scrollParent(),this.offset=this.currentItem.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},e.extend(this.offset,{click:{left:t.pageX-this.offset.left,top:t.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.helper.css("position","absolute"),this.cssPosition=this.helper.css("position"),this.originalPosition=this._generatePosition(t),this.originalPageX=t.pageX,this.originalPageY=t.pageY,o.cursorAt&&this._adjustOffsetFromHelper(o.cursorAt),this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]},this.helper[0]!==this.currentItem[0]&&this.currentItem.hide(),this._createPlaceholder(),o.containment&&this._setContainment(),o.cursor&&"auto"!==o.cursor&&(a=this.document.find("body"),this.storedCursor=a.css("cursor"),a.css("cursor",o.cursor),this.storedStylesheet=e("<style>*{ cursor: "+o.cursor+" !important; }</style>").appendTo(a)),o.opacity&&(this.helper.css("opacity")&&(this._storedOpacity=this.helper.css("opacity")),this.helper.css("opacity",o.opacity)),o.zIndex&&(this.helper.css("zIndex")&&(this._storedZIndex=this.helper.css("zIndex")),this.helper.css("zIndex",o.zIndex)),this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName&&(this.overflowOffset=this.scrollParent.offset()),this._trigger("start",t,this._uiHash()),this._preserveHelperProportions||this._cacheHelperProportions(),!s)for(n=this.containers.length-1;n>=0;n--)this.containers[n]._trigger("activate",t,this._uiHash(this));return e.ui.ddmanager&&(e.ui.ddmanager.current=this),e.ui.ddmanager&&!o.dropBehaviour&&e.ui.ddmanager.prepareOffsets(this,t),this.dragging=!0,this.helper.addClass("ui-sortable-helper"),this._mouseDrag(t),!0},_mouseDrag:function(t){var i,s,n,a,o=this.options,r=!1;for(this.position=this._generatePosition(t),this.positionAbs=this._convertPositionTo("absolute"),this.lastPositionAbs||(this.lastPositionAbs=this.positionAbs),this.options.scroll&&(this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName?(this.overflowOffset.top+this.scrollParent[0].offsetHeight-t.pageY<o.scrollSensitivity?this.scrollParent[0].scrollTop=r=this.scrollParent[0].scrollTop+o.scrollSpeed:t.pageY-this.overflowOffset.top<o.scrollSensitivity&&(this.scrollParent[0].scrollTop=r=this.scrollParent[0].scrollTop-o.scrollSpeed),this.overflowOffset.left+this.scrollParent[0].offsetWidth-t.pageX<o.scrollSensitivity?this.scrollParent[0].scrollLeft=r=this.scrollParent[0].scrollLeft+o.scrollSpeed:t.pageX-this.overflowOffset.left<o.scrollSensitivity&&(this.scrollParent[0].scrollLeft=r=this.scrollParent[0].scrollLeft-o.scrollSpeed)):(t.pageY-this.document.scrollTop()<o.scrollSensitivity?r=this.document.scrollTop(this.document.scrollTop()-o.scrollSpeed):this.window.height()-(t.pageY-this.document.scrollTop())<o.scrollSensitivity&&(r=this.document.scrollTop(this.document.scrollTop()+o.scrollSpeed)),t.pageX-this.document.scrollLeft()<o.scrollSensitivity?r=this.document.scrollLeft(this.document.scrollLeft()-o.scrollSpeed):this.window.width()-(t.pageX-this.document.scrollLeft())<o.scrollSensitivity&&(r=this.document.scrollLeft(this.document.scrollLeft()+o.scrollSpeed))),r!==!1&&e.ui.ddmanager&&!o.dropBehaviour&&e.ui.ddmanager.prepareOffsets(this,t)),this.positionAbs=this._convertPositionTo("absolute"),this.options.axis&&"y"===this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"===this.options.axis||(this.helper[0].style.top=this.position.top+"px"),i=this.items.length-1;i>=0;i--)if(s=this.items[i],n=s.item[0],a=this._intersectsWithPointer(s),a&&s.instance===this.currentContainer&&n!==this.currentItem[0]&&this.placeholder[1===a?"next":"prev"]()[0]!==n&&!e.contains(this.placeholder[0],n)&&("semi-dynamic"===this.options.type?!e.contains(this.element[0],n):!0)){if(this.direction=1===a?"down":"up","pointer"!==this.options.tolerance&&!this._intersectsWithSides(s))break;this._rearrange(t,s),this._trigger("change",t,this._uiHash());break}return this._contactContainers(t),e.ui.ddmanager&&e.ui.ddmanager.drag(this,t),this._trigger("sort",t,this._uiHash()),this.lastPositionAbs=this.positionAbs,!1},_mouseStop:function(t,i){if(t){if(e.ui.ddmanager&&!this.options.dropBehaviour&&e.ui.ddmanager.drop(this,t),this.options.revert){var s=this,n=this.placeholder.offset(),a=this.options.axis,o={};a&&"x"!==a||(o.left=n.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollLeft)),a&&"y"!==a||(o.top=n.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollTop)),this.reverting=!0,e(this.helper).animate(o,parseInt(this.options.revert,10)||500,function(){s._clear(t)})}else this._clear(t,i);return!1}},cancel:function(){if(this.dragging){this._mouseUp({target:null}),"original"===this.options.helper?this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper"):this.currentItem.show();for(var t=this.containers.length-1;t>=0;t--)this.containers[t]._trigger("deactivate",null,this._uiHash(this)),this.containers[t].containerCache.over&&(this.containers[t]._trigger("out",null,this._uiHash(this)),this.containers[t].containerCache.over=0)}return this.placeholder&&(this.placeholder[0].parentNode&&this.placeholder[0].parentNode.removeChild(this.placeholder[0]),"original"!==this.options.helper&&this.helper&&this.helper[0].parentNode&&this.helper.remove(),e.extend(this,{helper:null,dragging:!1,reverting:!1,_noFinalSort:null}),this.domPosition.prev?e(this.domPosition.prev).after(this.currentItem):e(this.domPosition.parent).prepend(this.currentItem)),this},serialize:function(t){var i=this._getItemsAsjQuery(t&&t.connected),s=[];return t=t||{},e(i).each(function(){var i=(e(t.item||this).attr(t.attribute||"id")||"").match(t.expression||/(.+)[\-=_](.+)/);i&&s.push((t.key||i[1]+"[]")+"="+(t.key&&t.expression?i[1]:i[2]))}),!s.length&&t.key&&s.push(t.key+"="),s.join("&")},toArray:function(t){var i=this._getItemsAsjQuery(t&&t.connected),s=[];return t=t||{},i.each(function(){s.push(e(t.item||this).attr(t.attribute||"id")||"")}),s},_intersectsWith:function(e){var t=this.positionAbs.left,i=t+this.helperProportions.width,s=this.positionAbs.top,n=s+this.helperProportions.height,a=e.left,o=a+e.width,r=e.top,h=r+e.height,l=this.offset.click.top,u=this.offset.click.left,d="x"===this.options.axis||s+l>r&&h>s+l,c="y"===this.options.axis||t+u>a&&o>t+u,p=d&&c;return"pointer"===this.options.tolerance||this.options.forcePointerForContainers||"pointer"!==this.options.tolerance&&this.helperProportions[this.floating?"width":"height"]>e[this.floating?"width":"height"]?p:t+this.helperProportions.width/2>a&&o>i-this.helperProportions.width/2&&s+this.helperProportions.height/2>r&&h>n-this.helperProportions.height/2},_intersectsWithPointer:function(e){var t="x"===this.options.axis||this._isOverAxis(this.positionAbs.top+this.offset.click.top,e.top,e.height),i="y"===this.options.axis||this._isOverAxis(this.positionAbs.left+this.offset.click.left,e.left,e.width),s=t&&i,n=this._getDragVerticalDirection(),a=this._getDragHorizontalDirection();return s?this.floating?a&&"right"===a||"down"===n?2:1:n&&("down"===n?2:1):!1},_intersectsWithSides:function(e){var t=this._isOverAxis(this.positionAbs.top+this.offset.click.top,e.top+e.height/2,e.height),i=this._isOverAxis(this.positionAbs.left+this.offset.click.left,e.left+e.width/2,e.width),s=this._getDragVerticalDirection(),n=this._getDragHorizontalDirection();return this.floating&&n?"right"===n&&i||"left"===n&&!i:s&&("down"===s&&t||"up"===s&&!t)},_getDragVerticalDirection:function(){var e=this.positionAbs.top-this.lastPositionAbs.top;return 0!==e&&(e>0?"down":"up")},_getDragHorizontalDirection:function(){var e=this.positionAbs.left-this.lastPositionAbs.left;return 0!==e&&(e>0?"right":"left")},refresh:function(e){return this._refreshItems(e),this._setHandleClassName(),this.refreshPositions(),this},_connectWith:function(){var e=this.options;return e.connectWith.constructor===String?[e.connectWith]:e.connectWith},_getItemsAsjQuery:function(t){function i(){r.push(this)}var s,n,a,o,r=[],h=[],l=this._connectWith();if(l&&t)for(s=l.length-1;s>=0;s--)for(a=e(l[s],this.document[0]),n=a.length-1;n>=0;n--)o=e.data(a[n],this.widgetFullName),o&&o!==this&&!o.options.disabled&&h.push([e.isFunction(o.options.items)?o.options.items.call(o.element):e(o.options.items,o.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),o]);for(h.push([e.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):e(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]),s=h.length-1;s>=0;s--)h[s][0].each(i);return e(r)},_removeCurrentsFromItems:function(){var t=this.currentItem.find(":data("+this.widgetName+"-item)");this.items=e.grep(this.items,function(e){for(var i=0;t.length>i;i++)if(t[i]===e.item[0])return!1;return!0})},_refreshItems:function(t){this.items=[],this.containers=[this];var i,s,n,a,o,r,h,l,u=this.items,d=[[e.isFunction(this.options.items)?this.options.items.call(this.element[0],t,{item:this.currentItem}):e(this.options.items,this.element),this]],c=this._connectWith();if(c&&this.ready)for(i=c.length-1;i>=0;i--)for(n=e(c[i],this.document[0]),s=n.length-1;s>=0;s--)a=e.data(n[s],this.widgetFullName),a&&a!==this&&!a.options.disabled&&(d.push([e.isFunction(a.options.items)?a.options.items.call(a.element[0],t,{item:this.currentItem}):e(a.options.items,a.element),a]),this.containers.push(a));for(i=d.length-1;i>=0;i--)for(o=d[i][1],r=d[i][0],s=0,l=r.length;l>s;s++)h=e(r[s]),h.data(this.widgetName+"-item",o),u.push({item:h,instance:o,width:0,height:0,left:0,top:0})},refreshPositions:function(t){this.floating=this.items.length?"x"===this.options.axis||this._isFloating(this.items[0].item):!1,this.offsetParent&&this.helper&&(this.offset.parent=this._getParentOffset());var i,s,n,a;for(i=this.items.length-1;i>=0;i--)s=this.items[i],s.instance!==this.currentContainer&&this.currentContainer&&s.item[0]!==this.currentItem[0]||(n=this.options.toleranceElement?e(this.options.toleranceElement,s.item):s.item,t||(s.width=n.outerWidth(),s.height=n.outerHeight()),a=n.offset(),s.left=a.left,s.top=a.top);if(this.options.custom&&this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(i=this.containers.length-1;i>=0;i--)a=this.containers[i].element.offset(),this.containers[i].containerCache.left=a.left,this.containers[i].containerCache.top=a.top,this.containers[i].containerCache.width=this.containers[i].element.outerWidth(),this.containers[i].containerCache.height=this.containers[i].element.outerHeight();return this},_createPlaceholder:function(t){t=t||this;var i,s=t.options;s.placeholder&&s.placeholder.constructor!==String||(i=s.placeholder,s.placeholder={element:function(){var s=t.currentItem[0].nodeName.toLowerCase(),n=e("<"+s+">",t.document[0]).addClass(i||t.currentItem[0].className+" ui-sortable-placeholder").removeClass("ui-sortable-helper");return"tbody"===s?t._createTrPlaceholder(t.currentItem.find("tr").eq(0),e("<tr>",t.document[0]).appendTo(n)):"tr"===s?t._createTrPlaceholder(t.currentItem,n):"img"===s&&n.attr("src",t.currentItem.attr("src")),i||n.css("visibility","hidden"),n},update:function(e,n){(!i||s.forcePlaceholderSize)&&(n.height()||n.height(t.currentItem.innerHeight()-parseInt(t.currentItem.css("paddingTop")||0,10)-parseInt(t.currentItem.css("paddingBottom")||0,10)),n.width()||n.width(t.currentItem.innerWidth()-parseInt(t.currentItem.css("paddingLeft")||0,10)-parseInt(t.currentItem.css("paddingRight")||0,10)))}}),t.placeholder=e(s.placeholder.element.call(t.element,t.currentItem)),t.currentItem.after(t.placeholder),s.placeholder.update(t,t.placeholder)},_createTrPlaceholder:function(t,i){var s=this;t.children().each(function(){e("<td>&#160;</td>",s.document[0]).attr("colspan",e(this).attr("colspan")||1).appendTo(i)})},_contactContainers:function(t){var i,s,n,a,o,r,h,l,u,d,c=null,p=null;for(i=this.containers.length-1;i>=0;i--)if(!e.contains(this.currentItem[0],this.containers[i].element[0]))if(this._intersectsWith(this.containers[i].containerCache)){if(c&&e.contains(this.containers[i].element[0],c.element[0]))continue;c=this.containers[i],p=i}else this.containers[i].containerCache.over&&(this.containers[i]._trigger("out",t,this._uiHash(this)),this.containers[i].containerCache.over=0);if(c)if(1===this.containers.length)this.containers[p].containerCache.over||(this.containers[p]._trigger("over",t,this._uiHash(this)),this.containers[p].containerCache.over=1);else{for(n=1e4,a=null,u=c.floating||this._isFloating(this.currentItem),o=u?"left":"top",r=u?"width":"height",d=u?"clientX":"clientY",s=this.items.length-1;s>=0;s--)e.contains(this.containers[p].element[0],this.items[s].item[0])&&this.items[s].item[0]!==this.currentItem[0]&&(h=this.items[s].item.offset()[o],l=!1,t[d]-h>this.items[s][r]/2&&(l=!0),n>Math.abs(t[d]-h)&&(n=Math.abs(t[d]-h),a=this.items[s],this.direction=l?"up":"down"));if(!a&&!this.options.dropOnEmpty)return;if(this.currentContainer===this.containers[p])return this.currentContainer.containerCache.over||(this.containers[p]._trigger("over",t,this._uiHash()),this.currentContainer.containerCache.over=1),void 0;a?this._rearrange(t,a,null,!0):this._rearrange(t,null,this.containers[p].element,!0),this._trigger("change",t,this._uiHash()),this.containers[p]._trigger("change",t,this._uiHash(this)),this.currentContainer=this.containers[p],this.options.placeholder.update(this.currentContainer,this.placeholder),this.containers[p]._trigger("over",t,this._uiHash(this)),this.containers[p].containerCache.over=1}},_createHelper:function(t){var i=this.options,s=e.isFunction(i.helper)?e(i.helper.apply(this.element[0],[t,this.currentItem])):"clone"===i.helper?this.currentItem.clone():this.currentItem;return s.parents("body").length||e("parent"!==i.appendTo?i.appendTo:this.currentItem[0].parentNode)[0].appendChild(s[0]),s[0]===this.currentItem[0]&&(this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")}),(!s[0].style.width||i.forceHelperSize)&&s.width(this.currentItem.width()),(!s[0].style.height||i.forceHelperSize)&&s.height(this.currentItem.height()),s},_adjustOffsetFromHelper:function(t){"string"==typeof t&&(t=t.split(" ")),e.isArray(t)&&(t={left:+t[0],top:+t[1]||0}),"left"in t&&(this.offset.click.left=t.left+this.margins.left),"right"in t&&(this.offset.click.left=this.helperProportions.width-t.right+this.margins.left),"top"in t&&(this.offset.click.top=t.top+this.margins.top),"bottom"in t&&(this.offset.click.top=this.helperProportions.height-t.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var t=this.offsetParent.offset();return"absolute"===this.cssPosition&&this.scrollParent[0]!==this.document[0]&&e.contains(this.scrollParent[0],this.offsetParent[0])&&(t.left+=this.scrollParent.scrollLeft(),t.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]===this.document[0].body||this.offsetParent[0].tagName&&"html"===this.offsetParent[0].tagName.toLowerCase()&&e.ui.ie)&&(t={top:0,left:0}),{top:t.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:t.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"===this.cssPosition){var e=this.currentItem.position();return{top:e.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:e.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var t,i,s,n=this.options;"parent"===n.containment&&(n.containment=this.helper[0].parentNode),("document"===n.containment||"window"===n.containment)&&(this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,"document"===n.containment?this.document.width():this.window.width()-this.helperProportions.width-this.margins.left,("document"===n.containment?this.document.width():this.window.height()||this.document[0].body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]),/^(document|window|parent)$/.test(n.containment)||(t=e(n.containment)[0],i=e(n.containment).offset(),s="hidden"!==e(t).css("overflow"),this.containment=[i.left+(parseInt(e(t).css("borderLeftWidth"),10)||0)+(parseInt(e(t).css("paddingLeft"),10)||0)-this.margins.left,i.top+(parseInt(e(t).css("borderTopWidth"),10)||0)+(parseInt(e(t).css("paddingTop"),10)||0)-this.margins.top,i.left+(s?Math.max(t.scrollWidth,t.offsetWidth):t.offsetWidth)-(parseInt(e(t).css("borderLeftWidth"),10)||0)-(parseInt(e(t).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,i.top+(s?Math.max(t.scrollHeight,t.offsetHeight):t.offsetHeight)-(parseInt(e(t).css("borderTopWidth"),10)||0)-(parseInt(e(t).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top])
},_convertPositionTo:function(t,i){i||(i=this.position);var s="absolute"===t?1:-1,n="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,a=/(html|body)/i.test(n[0].tagName);return{top:i.top+this.offset.relative.top*s+this.offset.parent.top*s-("fixed"===this.cssPosition?-this.scrollParent.scrollTop():a?0:n.scrollTop())*s,left:i.left+this.offset.relative.left*s+this.offset.parent.left*s-("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():a?0:n.scrollLeft())*s}},_generatePosition:function(t){var i,s,n=this.options,a=t.pageX,o=t.pageY,r="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,h=/(html|body)/i.test(r[0].tagName);return"relative"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&this.scrollParent[0]!==this.offsetParent[0]||(this.offset.relative=this._getRelativeOffset()),this.originalPosition&&(this.containment&&(t.pageX-this.offset.click.left<this.containment[0]&&(a=this.containment[0]+this.offset.click.left),t.pageY-this.offset.click.top<this.containment[1]&&(o=this.containment[1]+this.offset.click.top),t.pageX-this.offset.click.left>this.containment[2]&&(a=this.containment[2]+this.offset.click.left),t.pageY-this.offset.click.top>this.containment[3]&&(o=this.containment[3]+this.offset.click.top)),n.grid&&(i=this.originalPageY+Math.round((o-this.originalPageY)/n.grid[1])*n.grid[1],o=this.containment?i-this.offset.click.top>=this.containment[1]&&i-this.offset.click.top<=this.containment[3]?i:i-this.offset.click.top>=this.containment[1]?i-n.grid[1]:i+n.grid[1]:i,s=this.originalPageX+Math.round((a-this.originalPageX)/n.grid[0])*n.grid[0],a=this.containment?s-this.offset.click.left>=this.containment[0]&&s-this.offset.click.left<=this.containment[2]?s:s-this.offset.click.left>=this.containment[0]?s-n.grid[0]:s+n.grid[0]:s)),{top:o-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.scrollParent.scrollTop():h?0:r.scrollTop()),left:a-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():h?0:r.scrollLeft())}},_rearrange:function(e,t,i,s){i?i[0].appendChild(this.placeholder[0]):t.item[0].parentNode.insertBefore(this.placeholder[0],"down"===this.direction?t.item[0]:t.item[0].nextSibling),this.counter=this.counter?++this.counter:1;var n=this.counter;this._delay(function(){n===this.counter&&this.refreshPositions(!s)})},_clear:function(e,t){function i(e,t,i){return function(s){i._trigger(e,s,t._uiHash(t))}}this.reverting=!1;var s,n=[];if(!this._noFinalSort&&this.currentItem.parent().length&&this.placeholder.before(this.currentItem),this._noFinalSort=null,this.helper[0]===this.currentItem[0]){for(s in this._storedCSS)("auto"===this._storedCSS[s]||"static"===this._storedCSS[s])&&(this._storedCSS[s]="");this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")}else this.currentItem.show();for(this.fromOutside&&!t&&n.push(function(e){this._trigger("receive",e,this._uiHash(this.fromOutside))}),!this.fromOutside&&this.domPosition.prev===this.currentItem.prev().not(".ui-sortable-helper")[0]&&this.domPosition.parent===this.currentItem.parent()[0]||t||n.push(function(e){this._trigger("update",e,this._uiHash())}),this!==this.currentContainer&&(t||(n.push(function(e){this._trigger("remove",e,this._uiHash())}),n.push(function(e){return function(t){e._trigger("receive",t,this._uiHash(this))}}.call(this,this.currentContainer)),n.push(function(e){return function(t){e._trigger("update",t,this._uiHash(this))}}.call(this,this.currentContainer)))),s=this.containers.length-1;s>=0;s--)t||n.push(i("deactivate",this,this.containers[s])),this.containers[s].containerCache.over&&(n.push(i("out",this,this.containers[s])),this.containers[s].containerCache.over=0);if(this.storedCursor&&(this.document.find("body").css("cursor",this.storedCursor),this.storedStylesheet.remove()),this._storedOpacity&&this.helper.css("opacity",this._storedOpacity),this._storedZIndex&&this.helper.css("zIndex","auto"===this._storedZIndex?"":this._storedZIndex),this.dragging=!1,t||this._trigger("beforeStop",e,this._uiHash()),this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.cancelHelperRemoval||(this.helper[0]!==this.currentItem[0]&&this.helper.remove(),this.helper=null),!t){for(s=0;n.length>s;s++)n[s].call(this,e);this._trigger("stop",e,this._uiHash())}return this.fromOutside=!1,!this.cancelHelperRemoval},_trigger:function(){e.Widget.prototype._trigger.apply(this,arguments)===!1&&this.cancel()},_uiHash:function(t){var i=t||this;return{helper:i.helper,placeholder:i.placeholder||e([]),position:i.position,originalPosition:i.originalPosition,offset:i.positionAbs,item:i.currentItem,sender:t?t.element:null}}});var o="ui-effects-",r=e;e.effects={effect:{}},function(e,t){function i(e,t,i){var s=d[t.type]||{};return null==e?i||!t.def?null:t.def:(e=s.floor?~~e:parseFloat(e),isNaN(e)?t.def:s.mod?(e+s.mod)%s.mod:0>e?0:e>s.max?s.max:e)}function s(i){var s=l(),n=s._rgba=[];return i=i.toLowerCase(),f(h,function(e,a){var o,r=a.re.exec(i),h=r&&a.parse(r),l=a.space||"rgba";return h?(o=s[l](h),s[u[l].cache]=o[u[l].cache],n=s._rgba=o._rgba,!1):t}),n.length?("0,0,0,0"===n.join()&&e.extend(n,a.transparent),s):a[i]}function n(e,t,i){return i=(i+1)%1,1>6*i?e+6*(t-e)*i:1>2*i?t:2>3*i?e+6*(t-e)*(2/3-i):e}var a,o="backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",r=/^([\-+])=\s*(\d+\.?\d*)/,h=[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(e){return[e[1],e[2],e[3],e[4]]}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(e){return[2.55*e[1],2.55*e[2],2.55*e[3],e[4]]}},{re:/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,parse:function(e){return[parseInt(e[1],16),parseInt(e[2],16),parseInt(e[3],16)]}},{re:/#([a-f0-9])([a-f0-9])([a-f0-9])/,parse:function(e){return[parseInt(e[1]+e[1],16),parseInt(e[2]+e[2],16),parseInt(e[3]+e[3],16)]}},{re:/hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,space:"hsla",parse:function(e){return[e[1],e[2]/100,e[3]/100,e[4]]}}],l=e.Color=function(t,i,s,n){return new e.Color.fn.parse(t,i,s,n)},u={rgba:{props:{red:{idx:0,type:"byte"},green:{idx:1,type:"byte"},blue:{idx:2,type:"byte"}}},hsla:{props:{hue:{idx:0,type:"degrees"},saturation:{idx:1,type:"percent"},lightness:{idx:2,type:"percent"}}}},d={"byte":{floor:!0,max:255},percent:{max:1},degrees:{mod:360,floor:!0}},c=l.support={},p=e("<p>")[0],f=e.each;p.style.cssText="background-color:rgba(1,1,1,.5)",c.rgba=p.style.backgroundColor.indexOf("rgba")>-1,f(u,function(e,t){t.cache="_"+e,t.props.alpha={idx:3,type:"percent",def:1}}),l.fn=e.extend(l.prototype,{parse:function(n,o,r,h){if(n===t)return this._rgba=[null,null,null,null],this;(n.jquery||n.nodeType)&&(n=e(n).css(o),o=t);var d=this,c=e.type(n),p=this._rgba=[];return o!==t&&(n=[n,o,r,h],c="array"),"string"===c?this.parse(s(n)||a._default):"array"===c?(f(u.rgba.props,function(e,t){p[t.idx]=i(n[t.idx],t)}),this):"object"===c?(n instanceof l?f(u,function(e,t){n[t.cache]&&(d[t.cache]=n[t.cache].slice())}):f(u,function(t,s){var a=s.cache;f(s.props,function(e,t){if(!d[a]&&s.to){if("alpha"===e||null==n[e])return;d[a]=s.to(d._rgba)}d[a][t.idx]=i(n[e],t,!0)}),d[a]&&0>e.inArray(null,d[a].slice(0,3))&&(d[a][3]=1,s.from&&(d._rgba=s.from(d[a])))}),this):t},is:function(e){var i=l(e),s=!0,n=this;return f(u,function(e,a){var o,r=i[a.cache];return r&&(o=n[a.cache]||a.to&&a.to(n._rgba)||[],f(a.props,function(e,i){return null!=r[i.idx]?s=r[i.idx]===o[i.idx]:t})),s}),s},_space:function(){var e=[],t=this;return f(u,function(i,s){t[s.cache]&&e.push(i)}),e.pop()},transition:function(e,t){var s=l(e),n=s._space(),a=u[n],o=0===this.alpha()?l("transparent"):this,r=o[a.cache]||a.to(o._rgba),h=r.slice();return s=s[a.cache],f(a.props,function(e,n){var a=n.idx,o=r[a],l=s[a],u=d[n.type]||{};null!==l&&(null===o?h[a]=l:(u.mod&&(l-o>u.mod/2?o+=u.mod:o-l>u.mod/2&&(o-=u.mod)),h[a]=i((l-o)*t+o,n)))}),this[n](h)},blend:function(t){if(1===this._rgba[3])return this;var i=this._rgba.slice(),s=i.pop(),n=l(t)._rgba;return l(e.map(i,function(e,t){return(1-s)*n[t]+s*e}))},toRgbaString:function(){var t="rgba(",i=e.map(this._rgba,function(e,t){return null==e?t>2?1:0:e});return 1===i[3]&&(i.pop(),t="rgb("),t+i.join()+")"},toHslaString:function(){var t="hsla(",i=e.map(this.hsla(),function(e,t){return null==e&&(e=t>2?1:0),t&&3>t&&(e=Math.round(100*e)+"%"),e});return 1===i[3]&&(i.pop(),t="hsl("),t+i.join()+")"},toHexString:function(t){var i=this._rgba.slice(),s=i.pop();return t&&i.push(~~(255*s)),"#"+e.map(i,function(e){return e=(e||0).toString(16),1===e.length?"0"+e:e}).join("")},toString:function(){return 0===this._rgba[3]?"transparent":this.toRgbaString()}}),l.fn.parse.prototype=l.fn,u.hsla.to=function(e){if(null==e[0]||null==e[1]||null==e[2])return[null,null,null,e[3]];var t,i,s=e[0]/255,n=e[1]/255,a=e[2]/255,o=e[3],r=Math.max(s,n,a),h=Math.min(s,n,a),l=r-h,u=r+h,d=.5*u;return t=h===r?0:s===r?60*(n-a)/l+360:n===r?60*(a-s)/l+120:60*(s-n)/l+240,i=0===l?0:.5>=d?l/u:l/(2-u),[Math.round(t)%360,i,d,null==o?1:o]},u.hsla.from=function(e){if(null==e[0]||null==e[1]||null==e[2])return[null,null,null,e[3]];var t=e[0]/360,i=e[1],s=e[2],a=e[3],o=.5>=s?s*(1+i):s+i-s*i,r=2*s-o;return[Math.round(255*n(r,o,t+1/3)),Math.round(255*n(r,o,t)),Math.round(255*n(r,o,t-1/3)),a]},f(u,function(s,n){var a=n.props,o=n.cache,h=n.to,u=n.from;l.fn[s]=function(s){if(h&&!this[o]&&(this[o]=h(this._rgba)),s===t)return this[o].slice();var n,r=e.type(s),d="array"===r||"object"===r?s:arguments,c=this[o].slice();return f(a,function(e,t){var s=d["object"===r?e:t.idx];null==s&&(s=c[t.idx]),c[t.idx]=i(s,t)}),u?(n=l(u(c)),n[o]=c,n):l(c)},f(a,function(t,i){l.fn[t]||(l.fn[t]=function(n){var a,o=e.type(n),h="alpha"===t?this._hsla?"hsla":"rgba":s,l=this[h](),u=l[i.idx];return"undefined"===o?u:("function"===o&&(n=n.call(this,u),o=e.type(n)),null==n&&i.empty?this:("string"===o&&(a=r.exec(n),a&&(n=u+parseFloat(a[2])*("+"===a[1]?1:-1))),l[i.idx]=n,this[h](l)))})})}),l.hook=function(t){var i=t.split(" ");f(i,function(t,i){e.cssHooks[i]={set:function(t,n){var a,o,r="";if("transparent"!==n&&("string"!==e.type(n)||(a=s(n)))){if(n=l(a||n),!c.rgba&&1!==n._rgba[3]){for(o="backgroundColor"===i?t.parentNode:t;(""===r||"transparent"===r)&&o&&o.style;)try{r=e.css(o,"backgroundColor"),o=o.parentNode}catch(h){}n=n.blend(r&&"transparent"!==r?r:"_default")}n=n.toRgbaString()}try{t.style[i]=n}catch(h){}}},e.fx.step[i]=function(t){t.colorInit||(t.start=l(t.elem,i),t.end=l(t.end),t.colorInit=!0),e.cssHooks[i].set(t.elem,t.start.transition(t.end,t.pos))}})},l.hook(o),e.cssHooks.borderColor={expand:function(e){var t={};return f(["Top","Right","Bottom","Left"],function(i,s){t["border"+s+"Color"]=e}),t}},a=e.Color.names={aqua:"#00ffff",black:"#000000",blue:"#0000ff",fuchsia:"#ff00ff",gray:"#808080",green:"#008000",lime:"#00ff00",maroon:"#800000",navy:"#000080",olive:"#808000",purple:"#800080",red:"#ff0000",silver:"#c0c0c0",teal:"#008080",white:"#ffffff",yellow:"#ffff00",transparent:[null,null,null,0],_default:"#ffffff"}}(r),function(){function t(t){var i,s,n=t.ownerDocument.defaultView?t.ownerDocument.defaultView.getComputedStyle(t,null):t.currentStyle,a={};if(n&&n.length&&n[0]&&n[n[0]])for(s=n.length;s--;)i=n[s],"string"==typeof n[i]&&(a[e.camelCase(i)]=n[i]);else for(i in n)"string"==typeof n[i]&&(a[i]=n[i]);return a}function i(t,i){var s,a,o={};for(s in i)a=i[s],t[s]!==a&&(n[s]||(e.fx.step[s]||!isNaN(parseFloat(a)))&&(o[s]=a));return o}var s=["add","remove","toggle"],n={border:1,borderBottom:1,borderColor:1,borderLeft:1,borderRight:1,borderTop:1,borderWidth:1,margin:1,padding:1};e.each(["borderLeftStyle","borderRightStyle","borderBottomStyle","borderTopStyle"],function(t,i){e.fx.step[i]=function(e){("none"!==e.end&&!e.setAttr||1===e.pos&&!e.setAttr)&&(r.style(e.elem,i,e.end),e.setAttr=!0)}}),e.fn.addBack||(e.fn.addBack=function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}),e.effects.animateClass=function(n,a,o,r){var h=e.speed(a,o,r);return this.queue(function(){var a,o=e(this),r=o.attr("class")||"",l=h.children?o.find("*").addBack():o;l=l.map(function(){var i=e(this);return{el:i,start:t(this)}}),a=function(){e.each(s,function(e,t){n[t]&&o[t+"Class"](n[t])})},a(),l=l.map(function(){return this.end=t(this.el[0]),this.diff=i(this.start,this.end),this}),o.attr("class",r),l=l.map(function(){var t=this,i=e.Deferred(),s=e.extend({},h,{queue:!1,complete:function(){i.resolve(t)}});return this.el.animate(this.diff,s),i.promise()}),e.when.apply(e,l.get()).done(function(){a(),e.each(arguments,function(){var t=this.el;e.each(this.diff,function(e){t.css(e,"")})}),h.complete.call(o[0])})})},e.fn.extend({addClass:function(t){return function(i,s,n,a){return s?e.effects.animateClass.call(this,{add:i},s,n,a):t.apply(this,arguments)}}(e.fn.addClass),removeClass:function(t){return function(i,s,n,a){return arguments.length>1?e.effects.animateClass.call(this,{remove:i},s,n,a):t.apply(this,arguments)}}(e.fn.removeClass),toggleClass:function(t){return function(i,s,n,a,o){return"boolean"==typeof s||void 0===s?n?e.effects.animateClass.call(this,s?{add:i}:{remove:i},n,a,o):t.apply(this,arguments):e.effects.animateClass.call(this,{toggle:i},s,n,a)}}(e.fn.toggleClass),switchClass:function(t,i,s,n,a){return e.effects.animateClass.call(this,{add:i,remove:t},s,n,a)}})}(),function(){function t(t,i,s,n){return e.isPlainObject(t)&&(i=t,t=t.effect),t={effect:t},null==i&&(i={}),e.isFunction(i)&&(n=i,s=null,i={}),("number"==typeof i||e.fx.speeds[i])&&(n=s,s=i,i={}),e.isFunction(s)&&(n=s,s=null),i&&e.extend(t,i),s=s||i.duration,t.duration=e.fx.off?0:"number"==typeof s?s:s in e.fx.speeds?e.fx.speeds[s]:e.fx.speeds._default,t.complete=n||i.complete,t}function i(t){return!t||"number"==typeof t||e.fx.speeds[t]?!0:"string"!=typeof t||e.effects.effect[t]?e.isFunction(t)?!0:"object"!=typeof t||t.effect?!1:!0:!0}e.extend(e.effects,{version:"1.11.4",save:function(e,t){for(var i=0;t.length>i;i++)null!==t[i]&&e.data(o+t[i],e[0].style[t[i]])},restore:function(e,t){var i,s;for(s=0;t.length>s;s++)null!==t[s]&&(i=e.data(o+t[s]),void 0===i&&(i=""),e.css(t[s],i))},setMode:function(e,t){return"toggle"===t&&(t=e.is(":hidden")?"show":"hide"),t},getBaseline:function(e,t){var i,s;switch(e[0]){case"top":i=0;break;case"middle":i=.5;break;case"bottom":i=1;break;default:i=e[0]/t.height}switch(e[1]){case"left":s=0;break;case"center":s=.5;break;case"right":s=1;break;default:s=e[1]/t.width}return{x:s,y:i}},createWrapper:function(t){if(t.parent().is(".ui-effects-wrapper"))return t.parent();var i={width:t.outerWidth(!0),height:t.outerHeight(!0),"float":t.css("float")},s=e("<div></div>").addClass("ui-effects-wrapper").css({fontSize:"100%",background:"transparent",border:"none",margin:0,padding:0}),n={width:t.width(),height:t.height()},a=document.activeElement;try{a.id}catch(o){a=document.body}return t.wrap(s),(t[0]===a||e.contains(t[0],a))&&e(a).focus(),s=t.parent(),"static"===t.css("position")?(s.css({position:"relative"}),t.css({position:"relative"})):(e.extend(i,{position:t.css("position"),zIndex:t.css("z-index")}),e.each(["top","left","bottom","right"],function(e,s){i[s]=t.css(s),isNaN(parseInt(i[s],10))&&(i[s]="auto")}),t.css({position:"relative",top:0,left:0,right:"auto",bottom:"auto"})),t.css(n),s.css(i).show()},removeWrapper:function(t){var i=document.activeElement;return t.parent().is(".ui-effects-wrapper")&&(t.parent().replaceWith(t),(t[0]===i||e.contains(t[0],i))&&e(i).focus()),t},setTransition:function(t,i,s,n){return n=n||{},e.each(i,function(e,i){var a=t.cssUnit(i);a[0]>0&&(n[i]=a[0]*s+a[1])}),n}}),e.fn.extend({effect:function(){function i(t){function i(){e.isFunction(a)&&a.call(n[0]),e.isFunction(t)&&t()}var n=e(this),a=s.complete,r=s.mode;(n.is(":hidden")?"hide"===r:"show"===r)?(n[r](),i()):o.call(n[0],s,i)}var s=t.apply(this,arguments),n=s.mode,a=s.queue,o=e.effects.effect[s.effect];return e.fx.off||!o?n?this[n](s.duration,s.complete):this.each(function(){s.complete&&s.complete.call(this)}):a===!1?this.each(i):this.queue(a||"fx",i)},show:function(e){return function(s){if(i(s))return e.apply(this,arguments);var n=t.apply(this,arguments);return n.mode="show",this.effect.call(this,n)}}(e.fn.show),hide:function(e){return function(s){if(i(s))return e.apply(this,arguments);var n=t.apply(this,arguments);return n.mode="hide",this.effect.call(this,n)}}(e.fn.hide),toggle:function(e){return function(s){if(i(s)||"boolean"==typeof s)return e.apply(this,arguments);var n=t.apply(this,arguments);return n.mode="toggle",this.effect.call(this,n)}}(e.fn.toggle),cssUnit:function(t){var i=this.css(t),s=[];return e.each(["em","px","%","pt"],function(e,t){i.indexOf(t)>0&&(s=[parseFloat(i),t])}),s}})}(),function(){var t={};e.each(["Quad","Cubic","Quart","Quint","Expo"],function(e,i){t[i]=function(t){return Math.pow(t,e+2)}}),e.extend(t,{Sine:function(e){return 1-Math.cos(e*Math.PI/2)},Circ:function(e){return 1-Math.sqrt(1-e*e)},Elastic:function(e){return 0===e||1===e?e:-Math.pow(2,8*(e-1))*Math.sin((80*(e-1)-7.5)*Math.PI/15)},Back:function(e){return e*e*(3*e-2)},Bounce:function(e){for(var t,i=4;((t=Math.pow(2,--i))-1)/11>e;);return 1/Math.pow(4,3-i)-7.5625*Math.pow((3*t-2)/22-e,2)}}),e.each(t,function(t,i){e.easing["easeIn"+t]=i,e.easing["easeOut"+t]=function(e){return 1-i(1-e)},e.easing["easeInOut"+t]=function(e){return.5>e?i(2*e)/2:1-i(-2*e+2)/2}})}(),e.effects});

/*!
 * jQuery UI Touch Punch 0.2.3
 *
 * Copyright 2011–2014, Dave Furfero
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 * Depends:
 *  jquery.ui.widget.js
 *  jquery.ui.mouse.js
 */
!function(a){function f(a,b){if(!(a.originalEvent.touches.length>1)){a.preventDefault();var c=a.originalEvent.changedTouches[0],d=document.createEvent("MouseEvents");d.initMouseEvent(b,!0,!0,window,1,c.screenX,c.screenY,c.clientX,c.clientY,!1,!1,!1,!1,0,null),a.target.dispatchEvent(d)}}if(a.support.touch="ontouchend"in document,a.support.touch){var e,b=a.ui.mouse.prototype,c=b._mouseInit,d=b._mouseDestroy;b._touchStart=function(a){var b=this;!e&&b._mouseCapture(a.originalEvent.changedTouches[0])&&(e=!0,b._touchMoved=!1,f(a,"mouseover"),f(a,"mousemove"),f(a,"mousedown"))},b._touchMove=function(a){e&&(this._touchMoved=!0,f(a,"mousemove"))},b._touchEnd=function(a){e&&(f(a,"mouseup"),f(a,"mouseout"),this._touchMoved||f(a,"click"),e=!1)},b._mouseInit=function(){var b=this;b.element.bind({touchstart:a.proxy(b,"_touchStart"),touchmove:a.proxy(b,"_touchMove"),touchend:a.proxy(b,"_touchEnd")}),c.call(b)},b._mouseDestroy=function(){var b=this;b.element.unbind({touchstart:a.proxy(b,"_touchStart"),touchmove:a.proxy(b,"_touchMove"),touchend:a.proxy(b,"_touchEnd")}),d.call(b)}}}(jQuery);

/*
 * jQuery UI Nested Sortable
 * v 2.0 / 29 oct 2012
 * http://mjsarfatti.com/sandbox/nestedSortable
 *
 * Depends on:
 * jquery.ui.sortable.js 1.10+
 *
 * Copyright (c) 2010-2013 Manuele J Sarfatti
 * Licensed under the MIT License
 * http://www.opensource.org/licenses/mit-license.php
 */

(function($) {

    function isOverAxis( x, reference, size ) {
        return ( x > reference ) && ( x < ( reference + size ) );
    }

    $.widget("mjs.nestedSortable", $.extend({}, $.ui.sortable.prototype, {

        options: {
            doNotClear: false,
            expandOnHover: 700,
            isAllowed: function(placeholder, placeholderParent, originalItem) { return true; },
            isTree: false,
            listType: 'ol',
            maxLevels: 0,
            protectRoot: false,
            rootID: null,
            rtl: false,
            startCollapsed: false,
            tabSize: 20,

            branchClass: 'mjs-nestedSortable-branch',
            collapsedClass: 'mjs-nestedSortable-collapsed',
            disableNestingClass: 'mjs-nestedSortable-no-nesting',
            errorClass: 'mjs-nestedSortable-error',
            expandedClass: 'mjs-nestedSortable-expanded',
            hoveringClass: 'mjs-nestedSortable-hovering',
            leafClass: 'mjs-nestedSortable-leaf'
        },

        _create: function() {
            this.element.data('ui-sortable', this.element.data('mjs-nestedSortable'));

            // mjs - prevent browser from freezing if the HTML is not correct
            if (!this.element.is(this.options.listType))
                throw new Error('nestedSortable: Please check that the listType option is set to your actual list type');

            // mjs - force 'intersect' tolerance method if we have a tree with expanding/collapsing functionality
            if (this.options.isTree && this.options.expandOnHover) {
                this.options.tolerance = 'intersect';
            }

            $.ui.sortable.prototype._create.apply(this, arguments);

            // mjs - prepare the tree by applying the right classes (the CSS is responsible for actual hide/show functionality)
            if (this.options.isTree) {
                var self = this;
                $(this.items).each(function() {
                    var $li = this.item;
                    if ($li.children(self.options.listType).length) {
                        $li.addClass(self.options.branchClass);
                        // expand/collapse class only if they have children
                        if (self.options.startCollapsed) $li.addClass(self.options.collapsedClass);
                        else $li.addClass(self.options.expandedClass);
                    } else {
                        $li.addClass(self.options.leafClass);
                    }
                })
            }
        },

        _destroy: function() {
            this.element
                .removeData("mjs-nestedSortable")
                .removeData("ui-sortable");
            return $.ui.sortable.prototype._destroy.apply(this, arguments);
        },

        _mouseDrag: function(event) {
            var i, item, itemElement, intersection,
                o = this.options,
                scrolled = false;

            //Compute the helpers position
            this.position = this._generatePosition(event);
            this.positionAbs = this._convertPositionTo("absolute");

            if (!this.lastPositionAbs) {
                this.lastPositionAbs = this.positionAbs;
            }

            //Do scrolling
            if(this.options.scroll) {
                if(this.scrollParent[0] != document && this.scrollParent[0].tagName != 'HTML') {

                    if((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity) {
                        this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;
                    } else if(event.pageY - this.overflowOffset.top < o.scrollSensitivity) {
                        this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;
                    }

                    if((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity) {
                        this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;
                    } else if(event.pageX - this.overflowOffset.left < o.scrollSensitivity) {
                        this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;
                    }

                } else {

                    if(event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
                        scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
                    } else if($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
                        scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
                    }

                    if(event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
                        scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
                    } else if($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
                        scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
                    }

                }

                if(scrolled !== false && $.ui.ddmanager && !o.dropBehaviour)
                    $.ui.ddmanager.prepareOffsets(this, event);
            }

            //Regenerate the absolute position used for position checks
            this.positionAbs = this._convertPositionTo("absolute");

            // mjs - find the top offset before rearrangement,
            var previousTopOffset = this.placeholder.offset().top;

            //Set the helper position
            if(!this.options.axis || this.options.axis !== "y") {
                this.helper[0].style.left = this.position.left+"px";
            }
            if(!this.options.axis || this.options.axis !== "x") {
                this.helper[0].style.top = this.position.top+"px";
            }

            // mjs - check and reset hovering state at each cycle
            this.hovering = this.hovering ? this.hovering : null;
            this.mouseentered = this.mouseentered ? this.mouseentered : false;

            // mjs - let's start caching some variables
            var parentItem = (this.placeholder[0].parentNode.parentNode &&
                             $(this.placeholder[0].parentNode.parentNode).closest('.ui-sortable').length)
                                   ? $(this.placeholder[0].parentNode.parentNode)
                                   : null,
                level = this._getLevel(this.placeholder),
                childLevels = this._getChildLevels(this.helper);

            var newList = document.createElement(o.listType);

            //Rearrange
            for (i = this.items.length - 1; i >= 0; i--) {

                //Cache variables and intersection, continue if no intersection
                item = this.items[i];
                itemElement = item.item[0];
                intersection = this._intersectsWithPointer(item);
                if (!intersection) {
                    continue;
                }

                // Only put the placeholder inside the current Container, skip all
                // items form other containers. This works because when moving
                // an item from one container to another the
                // currentContainer is switched before the placeholder is moved.
                //
                // Without this moving items in "sub-sortables" can cause the placeholder to jitter
                // beetween the outer and inner container.
                if (item.instance !== this.currentContainer) {
                    continue;
                }

                // cannot intersect with itself
                // no useless actions that have been done before
                // no action if the item moved is the parent of the item checked
                if (itemElement !== this.currentItem[0] &&
                    this.placeholder[intersection === 1 ? "next" : "prev"]()[0] !== itemElement &&
                    !$.contains(this.placeholder[0], itemElement) &&
                    (this.options.type === "semi-dynamic" ? !$.contains(this.element[0], itemElement) : true)
                ) {

                    // mjs - we are intersecting an element: trigger the mouseenter event and store this state
                    if (!this.mouseentered) {
                        $(itemElement).mouseenter();
                        this.mouseentered = true;
                    }

                    // mjs - if the element has children and they are hidden, show them after a delay (CSS responsible)
                    if (o.isTree && $(itemElement).hasClass(o.collapsedClass) && o.expandOnHover) {
                        if (!this.hovering) {
                            $(itemElement).addClass(o.hoveringClass);
                            var self = this;
                            this.hovering = window.setTimeout(function() {
                                $(itemElement).removeClass(o.collapsedClass).addClass(o.expandedClass);
                                self.refreshPositions();
                                self._trigger("expand", event, self._uiHash());
                            }, o.expandOnHover);
                        }
                    }

                    this.direction = intersection == 1 ? "down" : "up";

                    // mjs - rearrange the elements and reset timeouts and hovering state
                    if (this.options.tolerance == "pointer" || this._intersectsWithSides(item)) {
                        $(itemElement).mouseleave();
                        this.mouseentered = false;
                        $(itemElement).removeClass(o.hoveringClass);
                        this.hovering && window.clearTimeout(this.hovering);
                        this.hovering = null;

                        // mjs - do not switch container if it's a root item and 'protectRoot' is true
                        // or if it's not a root item but we are trying to make it root
                        if (o.protectRoot
                            && ! (this.currentItem[0].parentNode == this.element[0] // it's a root item
                                  && itemElement.parentNode != this.element[0]) // it's intersecting a non-root item
                        ) {
                            if (this.currentItem[0].parentNode != this.element[0]
                                   && itemElement.parentNode == this.element[0]
                            ) {

                                if ( ! $(itemElement).children(o.listType).length) {
                                    itemElement.appendChild(newList);
                                    o.isTree && $(itemElement).removeClass(o.leafClass).addClass(o.branchClass + ' ' + o.expandedClass);
                                }

                                var a = this.direction === "down" ? $(itemElement).prev().children(o.listType) : $(itemElement).children(o.listType);
                                if (a[0] !== undefined) {
                                    this._rearrange(event, null, a);
                                }

                            } else {
                                this._rearrange(event, item);
                            }
                        } else if ( ! o.protectRoot) {
                            this._rearrange(event, item);
                        }
                    } else {
                        break;
                    }

                    // Clear emtpy ul's/ol's
                    this._clearEmpty(itemElement);

                    this._trigger("change", event, this._uiHash());
                    break;
                }
            }

            // mjs - to find the previous sibling in the list, keep backtracking until we hit a valid list item.
            var previousItem = this.placeholder[0].previousSibling ? $(this.placeholder[0].previousSibling) : null;
            if (previousItem != null) {
                while (previousItem[0].nodeName.toLowerCase() != $(o.listType)[0].nodeName.toLowerCase() || previousItem[0] == this.currentItem[0] || previousItem[0] == this.helper[0]) {
                    if (previousItem[0].previousSibling) {
                        previousItem = $(previousItem[0].previousSibling);
                    } else {
                        previousItem = null;
                        break;
                    }
                }
            }

            // mjs - to find the next sibling in the list, keep stepping forward until we hit a valid list item.
            var nextItem = this.placeholder[0].nextSibling ? $(this.placeholder[0].nextSibling) : null;
            if (nextItem != null) {
                while (nextItem[0].nodeName.toLowerCase() != $(o.listType)[0].nodeName.toLowerCase() || nextItem[0] == this.currentItem[0] || nextItem[0] == this.helper[0]) {
                    if (nextItem[0].nextSibling) {
                        nextItem = $(nextItem[0].nextSibling);
                    } else {
                        nextItem = null;
                        break;
                    }
                }
            }

            this.beyondMaxLevels = 0;

            // mjs - if the item is moved to the left, send it one level up but only if it's at the bottom of the list
            if (parentItem != null
                && nextItem == null
                && ! (o.protectRoot && parentItem[0].parentNode == this.element[0])
                &&
                    (o.rtl && (this.positionAbs.left + this.helper.outerWidth() > parentItem.offset().left + parentItem.outerWidth())
                     || ! o.rtl && (this.positionAbs.left < parentItem.offset().left))
            ) {

                parentItem.after(this.placeholder[0]);
                if (o.isTree && parentItem.children(o.listItem).children(o.listItem + ':visible:not(.ui-sortable-helper)').length < 1) {
                    parentItem.removeClass(this.options.branchClass + ' ' + this.options.expandedClass)
                              .addClass(this.options.leafClass);
                }
                this._clearEmpty(parentItem[0]);
                this._trigger("change", event, this._uiHash());
            }
            // mjs - if the item is below a sibling and is moved to the right, make it a child of that sibling
            else if (previousItem != null
                     && ! previousItem.hasClass(o.disableNestingClass)
                     &&
                        (previousItem.children(o.listType).length && previousItem.children(o.listType).is(':visible')
                         || ! previousItem.children(o.listType).length)
                     && ! (o.protectRoot && this.currentItem[0].parentNode == this.element[0])
                     &&
                        (o.rtl && (this.positionAbs.left + this.helper.outerWidth() < previousItem.offset().left + previousItem.outerWidth() - o.tabSize)
                         || ! o.rtl && (this.positionAbs.left > previousItem.offset().left + o.tabSize))
            ) {

                this._isAllowed(previousItem, level, level+childLevels+1);

                if (!previousItem.children(o.listType).length) {
                    previousItem[0].appendChild(newList);
                    o.isTree && previousItem.removeClass(o.leafClass).addClass(o.branchClass + ' ' + o.expandedClass);
                }

                // mjs - if this item is being moved from the top, add it to the top of the list.
                if (previousTopOffset && (previousTopOffset <= previousItem.offset().top)) {
                    previousItem.children(o.listType).prepend(this.placeholder);
                }
                // mjs - otherwise, add it to the bottom of the list.
                else if(previousItem.children(o.listType).length) {
                    previousItem.children(o.listType)[0].appendChild(this.placeholder[0]);
                }

                this._trigger("change", event, this._uiHash());
            }
            else {
                this._isAllowed(parentItem, level, level+childLevels);
            }

            //Post events to containers
            this._contactContainers(event);

            //Interconnect with droppables
            if($.ui.ddmanager) {
                $.ui.ddmanager.drag(this, event);
            }

            //Call callbacks
            this._trigger('sort', event, this._uiHash());

            this.lastPositionAbs = this.positionAbs;
            return false;

        },

        _mouseStop: function(event, noPropagation) {

            // mjs - if the item is in a position not allowed, send it back
            if (this.beyondMaxLevels) {

                this.placeholder.removeClass(this.options.errorClass);

                if (this.domPosition.prev) {
                    $(this.domPosition.prev).after(this.placeholder);
                } else {
                    $(this.domPosition.parent).prepend(this.placeholder);
                }

                this._trigger("revert", event, this._uiHash());

            }


            // mjs - clear the hovering timeout, just to be sure
            $('.'+this.options.hoveringClass).mouseleave().removeClass(this.options.hoveringClass);
            this.mouseentered = false;
            this.hovering && window.clearTimeout(this.hovering);
            this.hovering = null;

            $.ui.sortable.prototype._mouseStop.apply(this, arguments);

        },

        // mjs - this function is slightly modified to make it easier to hover over a collapsed element and have it expand
        _intersectsWithSides: function(item) {

            var half = this.options.isTree ? .8 : .5;

            var isOverBottomHalf = isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + (item.height*half), item.height),
                isOverTopHalf = isOverAxis(this.positionAbs.top + this.offset.click.top, item.top - (item.height*half), item.height),
                isOverRightHalf = isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + (item.width/2), item.width),
                verticalDirection = this._getDragVerticalDirection(),
                horizontalDirection = this._getDragHorizontalDirection();

            if (this.floating && horizontalDirection) {
                return ((horizontalDirection == "right" && isOverRightHalf) || (horizontalDirection == "left" && !isOverRightHalf));
            } else {
                return verticalDirection && ((verticalDirection == "down" && isOverBottomHalf) || (verticalDirection == "up" && isOverTopHalf));
            }

        },

        _contactContainers: function(event) {

            if (this.options.protectRoot && this.currentItem[0].parentNode == this.element[0] ) {
                return;
            }

            $.ui.sortable.prototype._contactContainers.apply(this, arguments);

        },

        _clear: function(event, noPropagation) {

            $.ui.sortable.prototype._clear.apply(this, arguments);

            // mjs - clean last empty ul/ol
            for (var i = this.items.length - 1; i >= 0; i--) {
                var item = this.items[i].item[0];
                this._clearEmpty(item);
            }

        },

        serialize: function(options) {

            var o = $.extend({}, this.options, options),
                items = this._getItemsAsjQuery(o && o.connected),
                str = [];

            $(items).each(function() {
                var res = ($(o.item || this).attr(o.attribute || 'id') || '')
                        .match(o.expression || (/(.+)[-=_](.+)/)),
                    pid = ($(o.item || this).parent(o.listType)
                        .parent(o.items)
                        .attr(o.attribute || 'id') || '')
                        .match(o.expression || (/(.+)[-=_](.+)/));

                if (res) {
                    str.push(((o.key || res[1]) + '[' + (o.key && o.expression ? res[1] : res[2]) + ']')
                        + '='
                        + (pid ? (o.key && o.expression ? pid[1] : pid[2]) : o.rootID));
                }
            });

            if(!str.length && o.key) {
                str.push(o.key + '=');
            }

            return str.join('&');

        },

        toHierarchy: function(options) {

            var o = $.extend({}, this.options, options),
                sDepth = o.startDepthCount || 0,
                ret = [];

            $(this.element).children(o.items).each(function () {
                var level = _recursiveItems(this);
                ret.push(level);
            });

            return ret;

            function _recursiveItems(item) {
                var id = ($(item).attr(o.attribute || 'id') || '').match(o.expression || (/(.+)[-=_](.+)/));
                if (id) {
                    var currentItem = {"id" : id[2]};
                    if ($(item).children(o.listType).children(o.items).length > 0) {
                        currentItem.children = [];
                        $(item).children(o.listType).children(o.items).each(function() {
                            var level = _recursiveItems(this);
                            currentItem.children.push(level);
                        });
                    }
                    return currentItem;
                }
            }
        },

        toArray: function(options) {

            var o = $.extend({}, this.options, options),
                sDepth = o.startDepthCount || 0,
                ret = [],
                left = 1;

            if (!o.excludeRoot) {
                ret.push({
                    "item_id": o.rootID,
                    "parent_id": null,
                    "depth": sDepth,
                    "left": left,
                    "right": ($(o.items, this.element).length + 1) * 2
                });
                left++
            }

            $(this.element).children(o.items).each(function () {
                left = _recursiveArray(this, sDepth + 1, left);
            });

            ret = ret.sort(function(a,b){ return (a.left - b.left); });

            return ret;

            function _recursiveArray(item, depth, left) {

                var right = left + 1,
                    id,
                    pid;

                if ($(item).children(o.listType).children(o.items).length > 0) {
                    depth ++;
                    $(item).children(o.listType).children(o.items).each(function () {
                        right = _recursiveArray($(this), depth, right);
                    });
                    depth --;
                }

                id = ($(item).attr(o.attribute || 'id')).match(o.expression || (/(.+)[-=_](.+)/));

                if (depth === sDepth + 1) {
                    pid = o.rootID;
                } else {
                    var parentItem = ($(item).parent(o.listType)
                                             .parent(o.items)
                                             .attr(o.attribute || 'id'))
                                             .match(o.expression || (/(.+)[-=_](.+)/));
                    pid = parentItem[2];
                }

                if (id) {
                        ret.push({"item_id": id[2], "parent_id": pid, "depth": depth, "left": left, "right": right});
                }

                left = right + 1;
                return left;
            }

        },

        _clearEmpty: function(item) {
            var o = this.options;

            var emptyList = $(item).children(o.listType);

            if (emptyList.length && !emptyList.children().length && !o.doNotClear) {
                o.isTree && $(item).removeClass(o.branchClass + ' ' + o.expandedClass).addClass(o.leafClass);
                emptyList.remove();
            } else if (o.isTree && emptyList.length && emptyList.children().length && emptyList.is(':visible')) {
                $(item).removeClass(o.leafClass).addClass(o.branchClass + ' ' + o.expandedClass);
            } else if (o.isTree && emptyList.length && emptyList.children().length && !emptyList.is(':visible')) {
                $(item).removeClass(o.leafClass).addClass(o.branchClass + ' ' + o.collapsedClass);
            }

        },

        _getLevel: function(item) {

            var level = 1;

            if (this.options.listType) {
                var list = item.closest(this.options.listType);
                while (list && list.length > 0 &&
                        !list.is('.ui-sortable')) {
                    level++;
                    list = list.parent().closest(this.options.listType);
                }
            }

            return level;
        },

        _getChildLevels: function(parent, depth) {
            var self = this,
                o = this.options,
                result = 0;
            depth = depth || 0;

            $(parent).children(o.listType).children(o.items).each(function (index, child) {
                    result = Math.max(self._getChildLevels(child, depth + 1), result);
            });

            return depth ? result + 1 : result;
        },

        _isAllowed: function(parentItem, level, levels) {
            var o = this.options,
                maxLevels = this.placeholder.closest('.ui-sortable').nestedSortable('option', 'maxLevels'); // this takes into account the maxLevels set to the recipient list

            // mjs - is the root protected?
            // mjs - are we nesting too deep?
            if ( ! o.isAllowed(this.placeholder, parentItem, this.currentItem)) {
                    this.placeholder.addClass(o.errorClass);
                    if (maxLevels < levels && maxLevels != 0) {
                        this.beyondMaxLevels = levels - maxLevels;
                    } else {
                        this.beyondMaxLevels = 1;
                    }
            } else {
                if (maxLevels < levels && maxLevels != 0) {
                    this.placeholder.addClass(o.errorClass);
                    this.beyondMaxLevels = levels - maxLevels;
                } else {
                    this.placeholder.removeClass(o.errorClass);
                    this.beyondMaxLevels = 0;
                }
            }
        }

    }));

    $.mjs.nestedSortable.prototype.options = $.extend({}, $.ui.sortable.prototype.options, $.mjs.nestedSortable.prototype.options);
})(jQuery);
/*!
 * CMS.API.Helpers
 * Multiple helpers used across all CMS features
 */

//##############################################################################
// COMPATIBILITY

// ensuring django namespace is set correctly
window.django = window.django || undefined;

// ensuring jQuery namespace is set correctly
// istanbul ignore next
window.jQuery = (window.django && window.django.jQuery) ? window.django.jQuery : window.jQuery || undefined;

// ensuring Class namespace is set correctly
// istanbul ignore next
window.Class = window.Class || undefined;

// ensuring CMS namespace is set correctly
/**
 * @module CMS
 */
var CMS = {
    $: (typeof window.jQuery === 'function') ? window.jQuery :/* istanbul ignore next */ undefined,
    Class: (typeof window.Class === 'function') ? window.Class :/* istanbul ignore next */ undefined,
    /**
     * @module CMS
     * @submodule CMS.API
     */
    API: {},
    /**
     * Provides key codes for common keys.
     *
     * @module CMS
     * @submodule CMS.KEYS
     * @example
     *     if (e.keyCode === CMS.KEYS.ENTER) { ... };
     */
    KEYS: {
        SHIFT: 16,
        TAB: 9,
        UP: 38,
        DOWN: 40,
        ENTER: 13,
        SPACE: 32,
        ESC: 27,
        CMD_LEFT: 91,
        CMD_RIGHT: 93,
        CMD_FIREFOX: 224,
        CTRL: 17
    },
    /**
     * Provides breakpoints for certain device widths
     *
     * @module CMS
     * @submodule CMS.BREAKPOINTS
     * @example
     *     if (window.width >= CMS.BREAKPOINTS.mobile) { ... };
     */
    BREAKPOINTS: {
        mobile: 420
    }
};

//##############################################################################
// CMS.API
(function ($) {
    'use strict';
    /**
     * @function _ns
     * @private
     * @param {String} events space separated event names to be namespaces
     * @return {String} string containing space separated namespaced event names
     */
    var _ns = function nameSpaceEvent(events) {
        return events.split(/\s+/g).map(function (eventName) {
            return 'cms-' + eventName;
        }).join(' ');
    };

    /**
     * Provides various helpers that are mixed in all CMS classes.
     *
     * @class Helpers
     * @static
     * @module CMS
     * @submodule CMS.API
     * @namespace CMS.API
     */
    CMS.API.Helpers = {

        /**
         * Redirects to a specific url or reloads browser.
         *
         * @method reloadBrowser
         * @param {String} url where to redirect. if equal to `REFRESH_PAGE` will reload page instead
         * @param {Number} timeout=0 timeout in ms
         * @param {Boolean} ajax if set to true first initiates **synchronous**
         *     ajax request to figure out if the browser should reload current page,
         *     move to another one, or do nothing.
         * @param {Object} [data] optional data to be passed instead of one provided by request config
         * @param {String} [data.model=CMS.config.request.model]
         * @param {String|Number} [data.pk=CMS.config.request.pk]
         */
        reloadBrowser: function (url, timeout, ajax, data) {
            var that = this;
            // is there a parent window?
            var win = this._getWindow();
            var parent = (win.parent) ? win.parent : win;

            // if there is an ajax reload, prioritize
            if (ajax) {
                parent.CMS.API.locked = true;
                // check if the url has changed, if true redirect to the new path
                // this requires an ajax request
                $.ajax({
                    async: false,
                    type: 'GET',
                    url: parent.CMS.config.request.url,
                    data: data || {
                        model: parent.CMS.config.request.model,
                        pk: parent.CMS.config.request.pk
                    },
                    success: function (response) {
                        parent.CMS.API.locked = false;

                        if (response === '' && !url) {
                            // cancel if response is empty
                            return false;
                        } else if (parent.location.pathname !== response && response !== '') {
                            // api call to the backend to check if the current path is still the same
                            that.reloadBrowser(response);
                        } else if (url === 'REFRESH_PAGE') {
                            // if on_close provides REFRESH_PAGE, only do a reload
                            that.reloadBrowser();
                        } else if (url) {
                            // on_close can also provide a url, reload to the new destination
                            that.reloadBrowser(url);
                        } else {
                            that.reloadBrowser();
                        }
                    }
                });

                // cancel further operations
                return false;
            }

            // add timeout if provided
            parent.setTimeout(function () {
                if (url && url !== parent.location.href) {
                    // location.reload() takes precedence over this, so we
                    // don't want to reload the page if we need a redirect
                    parent.location.href = url;
                } else {
                    // ensure page is always reloaded #3413
                    parent.location.reload();
                }
            }, timeout || 0);
        },

        /**
         * Assigns an event handler to forms located in the toolbar
         * to prevent multiple submissions.
         *
         * @method preventSubmit
         */
        preventSubmit: function () {
            var forms = $('.cms-toolbar').find('form');
            forms.submit(function () {
                // show loader
                CMS.API.Toolbar.showLoader();
                // we cannot use disabled as the name action will be ignored
                $('input[type="submit"]').on('click', function (e) {
                    e.preventDefault();
                }).css('opacity', 0.5);
            });
        },

        /**
         * Sets csrf token header on ajax requests.
         *
         * @method csrf
         * @param {String} csrf_token
         */
        csrf: function (csrf_token) {
            $.ajaxSetup({
                beforeSend: function (xhr) {
                    xhr.setRequestHeader('X-CSRFToken', csrf_token);
                }
            });
        },

        /**
         * Sends or retrieves a JSON from localStorage
         * or the session (through synchronous ajax request)
         * if localStorage is not available. Does not merge with
         * previous setSettings calls.
         *
         * @method setSettings
         * @param settings
         */
        setSettings: function (settings) {
            // merge settings
            settings = JSON.stringify($.extend({}, CMS.config.settings, settings));
            // set loader
            if (CMS.API.Toolbar) {
                CMS.API.Toolbar.showLoader();
            }

            // use local storage or session
            if (this._isStorageSupported) {
                // save within local storage
                localStorage.setItem('cms_cookie', settings);
                if (CMS.API.Toolbar) {
                    CMS.API.Toolbar.hideLoader();
                }
            } else {
                // save within session
                CMS.API.locked = true;

                $.ajax({
                    async: false,
                    type: 'POST',
                    url: CMS.config.urls.settings,
                    data: {
                        csrfmiddlewaretoken: CMS.config.csrf,
                        settings: settings
                    },
                    success: function (data) {
                        CMS.API.locked = false;
                        // determine if logged in or not
                        settings = (data) ? JSON.parse(data) : CMS.config.settings;
                        if (CMS.API.Toolbar) {
                            CMS.API.Toolbar.hideLoader();
                        }
                    },
                    error: function (jqXHR) {
                        CMS.API.Messages.open({
                            message: jqXHR.responseText + ' | ' + jqXHR.status + ' ' + jqXHR.statusText,
                            error: true
                        });
                    }
                });
            }

            // save settings
            CMS.settings = typeof settings === 'object' ? settings : JSON.parse(settings);

            // ensure new settings are returned
            return CMS.settings;
        },

        /**
         * Gets user settings (from JSON or the session)
         * in the same way as setSettings sets them.
         *
         * @method getSettings
         */
        getSettings: function () {
            var settings;
            // set loader
            if (CMS.API.Toolbar) {
                CMS.API.Toolbar.showLoader();
            }

            // use local storage or session
            if (this._isStorageSupported) {
                // get from local storage
                settings = JSON.parse(localStorage.getItem('cms_cookie'));
                if (CMS.API.Toolbar) {
                    CMS.API.Toolbar.hideLoader();
                }
            } else {
                CMS.API.locked = true;
                // get from session
                $.ajax({
                    async: false,
                    type: 'GET',
                    url: CMS.config.urls.settings,
                    success: function (data) {
                        CMS.API.locked = false;
                        // determine if logged in or not
                        settings = (data) ? JSON.parse(data) : CMS.config.settings;
                        if (CMS.API.Toolbar) {
                            CMS.API.Toolbar.hideLoader();
                        }
                    },
                    error: function (jqXHR) {
                        CMS.API.Messages.open({
                            message: jqXHR.responseText + ' | ' + jqXHR.status + ' ' + jqXHR.statusText,
                            error: true
                        });
                    }
                });
            }

            if (!settings) {
                settings = this.setSettings(CMS.config.settings);
            }

            // save settings
            CMS.settings = settings;

            // ensure new settings are returned
            return CMS.settings;
        },

        /**
         * Modifies the url with new params and sanitises
         * the ampersand within the url for #3404.
         *
         * @method makeURL
         * @param {String} url original url
         * @param {String[]} [params] array of `param=value` strings to update the url
         */
        makeURL: function makeURL(url, params) {
            var arr = [];
            var keys = [];
            var values = [];
            var tmp = '';
            var urlArray = [];
            var urlParams = [];
            var origin = url;

            // return url if there is no param
            if (url.split('?').length > 1) {
                // setup local vars
                urlArray = url.split('?');
                urlParams = urlArray[1].replace(/&(?:amp;)/g, '&').split('&');
                origin = urlArray[0];
            }

            // loop through the available params
            $.each(urlParams, function (index, param) {
                arr.push({
                    param: param.split('=')[0],
                    value: param.split('=')[1]
                });
            });
            // loop through the new params
            if (params && params.length) {
                $.each(params, function (index, param) {
                    arr.push({
                        param: param.split('=')[0],
                        value: param.split('=')[1]
                    });
                });
            }

            // merge manually because jquery...
            $.each(arr, function (index, item) {
                var i = $.inArray(item.param, keys);

                if (i === -1) {
                    keys.push(item.param);
                    values.push(item.value);
                } else {
                    values[i] = item.value;
                }
            });

            // merge new url
            $.each(keys, function (index, key) {
                tmp += '&' + key + '=' + values[index];
            });
            tmp = tmp.replace('&', '?');
            url = origin + tmp;
            url = url.replace(/&/g, '&amp;');

            return url;
        },

        /**
         * Creates a debounced function that delays invoking `func`
         * until after `wait` milliseconds have elapsed since
         * the last time the debounced function was invoked.
         * Optionally can be invoked first time immediately.
         *
         * @method debounce
         * @param {Function} func function to debounce
         * @param {Number} wait time in ms to wait
         * @param {Object} [opts]
         * @param {Boolean} [opts.immediate] trigger func immediately?
         * @return {Function}
         */
        debounce: function debounce(func, wait, opts) {
            var timeout;
            return function () {
                var context = this, args = arguments;
                var later = function () {
                    timeout = null;
                    if (!opts || !opts.immediate) {
                        func.apply(context, args);
                    }
                };
                var callNow = opts && opts.immediate && !timeout;
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
                if (callNow) {
                    func.apply(context, args);
                }
            };
        },

        /**
         * Returns a function that when invoked, will only be triggered
         * at most once during a given window of time. Normally, the
         * throttled function will run as much as it can, without ever
         * going more than once per `wait` duration, but if you’d like to
         * disable the execution on the leading edge, pass `{leading: false}`.
         * To disable execution on the trailing edge, ditto.
         *
         * @method throttle
         * @param {Function} func function to throttle
         * @param {Number} wait time window
         * @param {Object} [opts]
         * @param {Boolean} [opts.leading=true] execute on the leading edge
         * @param {Boolean} [opts.trailing=true] execute on the trailing edge
         * @return {Function}
         */
        throttle: function throttle(func, wait, opts) {
            var context, args, result;
            var timeout = null;
            var previous = 0;
            if (!opts) {
                opts = {};
            }
            var later = function () {
                previous = opts.leading === false ? 0 : $.now();
                timeout = null;
                result = func.apply(context, args);
                if (!timeout) {
                    context = args = null;
                }
            };
            return function () {
                var now = $.now();
                if (!previous && opts.leading === false) {
                    previous = now;
                }
                var remaining = wait - (now - previous);
                context = this;
                args = arguments;
                if (remaining <= 0 || remaining > wait) {
                    // istanbul ignore if
                    if (timeout) {
                        clearTimeout(timeout);
                        timeout = null;
                    }
                    previous = now;
                    result = func.apply(context, args);
                    if (!timeout) {
                        context = args = null;
                    }
                } else if (!timeout && opts.trailing !== false) {
                    timeout = setTimeout(later, remaining);
                }
                return result;
            };
        },

        /**
         * Browsers allow to "Prevent this page form creating additional
         * dialogs." checkbox which prevents further input from confirm messages.
         * This method falls back to "true" once the user chooses this option.
         *
         * @method secureConfirm
         * @param {String} message to be displayed
         * @return {Boolean}
         */
        secureConfirm: function secureConfirm(message) {
            var start = Number(new Date());
            var result = confirm(message);
            var end = Number(new Date());

            return (end < (start + 10) || result === true);
        },

        /**
         * Is localStorage truly supported?
         * Check is taken from modernizr.
         *
         * @property _isStorageSupported
         * @private
         * @type {Boolean}
         */
        _isStorageSupported: (function localStorageCheck() {
            var mod = 'modernizr';
            try {
                localStorage.setItem(mod, mod);
                localStorage.removeItem(mod);
                return true;
            } catch (e) {
                // istanbul ignore next
                return false;
            }
        }()),

        /**
         * Adds an event listener to the "CMS".
         *
         * @method addEventListener
         * @param {String} eventName string containing space separated event names
         * @param {Function} fn callback to run when the event happens
         */
        addEventListener: function addEventListener(eventName, fn) {
            return CMS._eventRoot.on(_ns(eventName), fn);
        },

        /**
         * Removes the event listener from the "CMS". If a callback is provided - removes only that callback.
         *
         * @method removeEventListener
         * @param {String} eventName string containing space separated event names
         * @param {Function} [fn] specific callback to be removed
         */
        removeEventListener: function removeEventListener(eventName, fn) {
            return CMS._eventRoot.off(_ns(eventName), fn);
        },

        /**
         * Dispatches an event
         * @method dispatchEvent
         * @param {String} eventName  string containing space separated event names
         * @param {Object} payload whatever payload required for the consumer
         */
        dispatchEvent: function dispatchEvent(eventName, payload) {
            return CMS._eventRoot.trigger(_ns(eventName), [payload]);
        },

        /**
         * Returns a function that wraps the passed function so the wrapped function
         * is executed only once, no matter how many times the wrapper function is executed.
         *
         * @method once
         * @param {Function} fn function to be executed only once
         * @return {Function}
         */
        once: function once(fn) {
            var result;
            var didRunOnce = false;

            return function () {
                if (didRunOnce) {
                    fn = undefined;
                } else {
                    didRunOnce = true;
                    result = fn.apply(this, arguments);
                }
                return result;
            };
        },

        /**
         * Prevents scrolling with touch in an element.
         *
         * @method preventTouchScrolling
         * @param {jQuery} element element where we are preventing the scroll
         * @param {String} namespace so we don't mix events from two different places on the same element
         */
        preventTouchScrolling: function preventTouchScrolling(element, namespace) {
            element.on('touchmove.cms.preventscroll.' + namespace, function (e) {
                e.preventDefault();
            });
        },

        /**
        * Allows scrolling with touch in an element.
        *
        * @method allowTouchScrolling
        * @param {jQuery} element element where we are allowing the scroll again
        * @param {String} namespace so we don't accidentally remove events from a different handler
        */
        allowTouchScrolling: function allowTouchScrolling(element, namespace) {
            element.off('touchmove.cms.preventscroll.' + namespace);
        },

        /**
         * Returns window object.
         *
         * @method _getWindow
         * @private
         * @returns {Window}
         */
        _getWindow: function () {
            return window;
        }

    };

    // shorthand for jQuery(document).ready();
    $(function () {
        CMS._eventRoot = $('#cms-top');
        // autoinits
        CMS.API.Helpers.preventSubmit();
    });
})(CMS.$);

/*!========================================================================
 * Originally taken from
 * Bootstrap: transition.js v3.3.5
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
<<<<<<< HEAD
/* global CMS */

(function ($) {
    'use strict';

    // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
    // ============================================================

    function transitionEnd() {
        var el = document.createElement('cms');

        var transEndEventNames = {
            WebkitTransition: 'webkitTransitionEnd',
            MozTransition: 'transitionend',
            OTransition: 'oTransitionEnd otransitionend',
            transition: 'transitionend'
        };

        for (var name in transEndEventNames) {
            if (el.style[name] !== undefined) {
                return { end: transEndEventNames[name] };
            }
        }

        return false; // explicit for ie8 (  ._.)
    }

    // http://blog.alexmaccaw.com/css-transitions
    $.fn.emulateTransitionEnd = function (duration) {
        var called = false;
        var $el = this;
        $(this).one('cmsTransitionEnd', function () {
            called = true;
        });
        var callback = function () {
            if (!called) {
                $($el).trigger($.support.transition.end) ;
            }
        };
        setTimeout(callback, duration + 10);
        return this;
    };

    $(function () {
        $.support.transition = transitionEnd();

        if (!$.support.transition) {
            return;
        }

        $.event.special.cmsTransitionEnd = {
            bindType: $.support.transition.end,
            delegateType: $.support.transition.end,
            handle: function (e) {
                if ($(e.target).is(this)) {
                    return e.handleObj.handler.apply(this, arguments);
                }
            }
        };
    });

    // has to be attached to CMS
}(CMS.$));

/*
 * Copyright https://github.com/divio/django-cms
 */

// #############################################################################
// NAMESPACES
/**
 * @module CMS
 */
/* istanbul ignore next */
var CMS = window.CMS || {};

// #############################################################################
// MODAL
(function ($) {
    'use strict';

    /**
     * Displays a message underneath the toolbar.
     *
     * @class Messages
     * @namespace CMS
     */
    CMS.Messages = new CMS.Class({

        options: {
            messageDuration: 300,
            messageDelay: 3000
        },

        initialize: function initialize(options) {
            this.options = $.extend(true, {}, this.options, options);

            // states and events
            this.click = 'click.cms.message';

            // elements
            this._setupUI();
        },

        /**
         * Stores all jQuery references within `this.ui`.
         *
         * @method _setupUI
         * @private
         */
        _setupUI: function _setupUI() {
            var container = $('.cms');
            this.ui = {
                container: container,
                body: $('html'),
                toolbar: container.find('.cms-toolbar'),
                messages: container.find('.cms-messages')
            };
        },

        /**
         * Opens a message window underneath the toolbar.
         *
         * @method open
         * @param opts
         * @param {String|HTMLNode} opts.message message to be displayed
         * @param {String} [opts.dir='center'] direction to be displayed `center` `left` or `right`
         * @param {Number} [opts.delay=this.options.messageDelay] delay until message is closed, 0 leaves it open
         * @param {Boolean} [opts.error] if true sets the style to `.cms-messages-error`
         */
        open: function open(opts) {
            if (!(opts && opts.message)) {
                throw new Error('The arguments passed to "open" were invalid.');
            }

            var that = this;

            var msg = opts.message;
            var dir = opts.dir === undefined ? 'center' : opts.dir;
            var delay = opts.delay === undefined ? this.options.messageDelay : opts.delay;
            var error = opts.error === undefined ? false : opts.error;

            var width = 320;
            var height = this.ui.messages.outerHeight(true);
            var top = this.ui.toolbar.outerHeight(true);
            var close = this.ui.messages.find('.cms-messages-close');

            // add content to element
            this.ui.messages.find('.cms-messages-inner').html(msg);

            // error handling
            this.ui.messages.removeClass('cms-messages-error');
            if (error) {
                this.ui.messages.addClass('cms-messages-error');
            }

            // clear timeout
            clearTimeout(this.timer);

            close.hide();
            close.off(this.click).on(this.click, function () {
                that.close();
            });

            // set top to 0 if toolbar is collapsed
            if (CMS.settings.toolbar === 'collapsed') {
                top = 0;
            }

            // set correct position and show
            this.ui.messages.css('top', -height).show();

            // set correct direction and animation
            switch (dir) {
                case 'left':
                    this.ui.messages.css({
                        'top': top,
                        'left': -width,
                        'right': 'auto',
                        'margin-left': 0
                    });
                    this.ui.messages.animate({ 'left': 0 });
                    break;
                case 'right':
                    this.ui.messages.css({
                        'top': top,
                        'right': -width,
                        'left': 'auto',
                        'margin-left': 0
                    });
                    this.ui.messages.animate({ 'right': 0 });
                    break;
                default:
                    this.ui.messages.css({
                        'left': '50%',
                        'right': 'auto',
                        'margin-left': -(width / 2)
                    });
                    this.ui.messages.animate({ 'top': top });
            }

            // cancel autohide if delay is <= 0
            if (delay <= 0) {
                close.show();
            } else {
                // add delay to hide if delay > 0
                this.timer = setTimeout(function () {
                    that.close();
                }, delay);
            }
        },

        /**
         * Closes the message window underneath the toolbar.
         *
         * @method close
         */
        close: function close() {
            this.ui.messages.fadeOut(this.options.messageDuration);
        }

    });
})(CMS.$);

/*
 * Copyright https://github.com/divio/django-cms
 */

// #############################################################################
// NAMESPACES
/**
 * @module CMS
 */
/* istanbul ignore next */
var CMS = window.CMS || {};

// #############################################################################
// MODAL
(function ($) {
    'use strict';

    /**
     * The modal is triggered via API calls from the backend either
     * through the toolbar navigation or from plugins. The APIs allow to
     * open content from a url (iframe) or inject html directly.
     *
     * @class Modal
     * @namespace CMS
     * @uses CMS.API.Helpers
     */
    CMS.Modal = new CMS.Class({

        implement: [CMS.API.Helpers],

        options: {
            onClose: false,
            minHeight: 400,
            minWidth: 800,
            modalDuration: 200,
            newPlugin: false,
            resizable: true,
            maximizable: true,
            minimizable: true
        },

        initialize: function initialize(options) {
            this.options = $.extend(true, {}, this.options, options);

            // elements
            this._setupUI();
            // event emitter
            this._setupEventEmitter();

            // states and events
            this.click = 'click.cms.modal';
            this.pointerDown = 'pointerdown.cms.modal contextmenu.cms.modal';
            this.pointerUp = 'pointerup.cms.modal pointercancel.cms.modal';
            this.pointerMove = 'pointermove.cms.modal';
            this.doubleClick = 'dblclick.cms.modal';
            this.touchEnd = 'touchend.cms.modal';
            this.maximized = false;
            this.minimized = false;
            this.triggerMaximized = false;
            this.saved = false;
        },

        /**
         * Setup event pubsub mechanism for the instance.
         *
         * @private
         * @method _setupEventEmitter
         */
        _setupEventEmitter: function _setupEventEmitter() {
            var that = this;
            var bus = $({});

            function proxy(name) {
                return function () {
                    bus[name].apply(bus, arguments);
                    return that;
                };
            }

            this.trigger = proxy('trigger');
            this.one = proxy('one');
            this.on = proxy('on');
            this.off = proxy('off');
        },

        /**
         * Stores all jQuery references within `this.ui`.
         *
         * @method _setupUI
         * @private
         */
        _setupUI: function _setupUI() {
            var modal = $('.cms-modal');
            this.ui = {
                modal: modal,
                body: $('html'),
                window: $(window),
                toolbarLeftPart: $('.cms-toolbar-left'),
                minimizeButton: modal.find('.cms-modal-minimize'),
                maximizeButton: modal.find('.cms-modal-maximize'),
                title: modal.find('.cms-modal-title'),
                titlePrefix: modal.find('.cms-modal-title-prefix'),
                titleSuffix: modal.find('.cms-modal-title-suffix'),
                resize: modal.find('.cms-modal-resize'),
                breadcrumb: modal.find('.cms-modal-breadcrumb'),
                closeAndCancel: modal.find('.cms-modal-close, .cms-modal-cancel'),
                modalButtons: modal.find('.cms-modal-buttons'),
                modalBody: modal.find('.cms-modal-body'),
                frame: modal.find('.cms-modal-frame'),
                shim: modal.find('.cms-modal-shim')
            };
        },

        /**
         * Sets up all the event handlers, such as maximize/minimize and resizing.
         *
         * @method _events
         * @private
         */
        _events: function _events() {
            var that = this;

            // modal behaviours
            this.ui.minimizeButton.
                off(this.click + ' ' + this.touchEnd)
                .on(this.click + ' ' + this.touchEnd, function (e) {
                e.preventDefault();
                that.minimize();
            });
            this.ui.maximizeButton
                .off(this.click + ' ' + this.touchEnd)
                .on(this.click + ' ' + this.touchEnd, function (e) {
                e.preventDefault();
                that.maximize();
            });

            this.ui.title.off(this.pointerDown).on(this.pointerDown, function (e) {
                e.preventDefault();
                that._startMove(e);
            });
            this.ui.title.off(this.doubleClick).on(this.doubleClick, function () {
                that.maximize();
            });

            this.ui.resize.off(this.pointerDown).on(this.pointerDown, function (e) {
                e.preventDefault();
                that._startResize(e);
            });

            this.ui.closeAndCancel
                .off(this.click + ' ' + this.touchEnd)
                .on(this.click + ' ' + this.touchEnd, function (e) {
                that.options.onClose = null;
                e.preventDefault();
                that.close();
            });

            // elements within the window
            this.ui.breadcrumb.off(this.click, 'a').on(this.click, 'a', function (e) {
                e.preventDefault();
                that._changeIframe($(this));
            });
        },

        /**
         * Opens the modal either in an iframe or renders markup.
         *
         * @method open
         * @chainable
         * @param {Object} opts either `opts.url` or `opts.html` are required
         * @param {Object[]} [opts.breadcrumbs] collection of breadcrumb items
         * @param {String|HTMLNode|jQuery} [opts.html] html markup to render
         * @param {String} [opts.title] modal window main title (bold)
         * @param {String} [opts.subtitle] modal window secondary title (normal)
         * @param {String} [opts.url] url to render iframe, takes precedence over `opts.html`
         * @param {Number} [opts.width] sets the width of the modal
         * @param {Number} [opts.height] sets the height of the modal
         */
        open: function open(opts) {
            // setup internals
            if (!(opts && opts.url || opts && opts.html)) {
                throw new Error('The arguments passed to "open" were invalid.');
            }

            // handle remove option when plugin is new
            // cancel open process when switching context
            if (CMS._newPlugin && !this._deletePlugin()) {
                return false;
            }

            // We have to rebind events every time we open a modal
            // because the event handlers contain references to the instance
            // and since we reuse the same markup we need to update
            // that instance reference every time.
            this._events();

            this.trigger('cms.modal.load');
            // trigger the event also on the dom element,
            // because if we load another modal while one is already open
            // the older instance won't receive any updates
            this.ui.modal.trigger('cms.modal.load');

            // common elements state
            this.ui.resize.toggle(this.options.resizable);
            this.ui.minimizeButton.toggle(this.options.minimizable);
            this.ui.maximizeButton.toggle(this.options.maximizable);

            var position = this._calculateNewPosition(opts);

            this.ui.maximizeButton.removeClass('cms-modal-maximize-active');
            this.maximized = false;

            // new plugin will freeze the creation process
            if (this.options.newPlugin) {
                CMS._newPlugin = this.options.newPlugin;
            }

            // because a new instance is called, we have to ensure minimized state is removed #3620
            if (this.ui.body.hasClass('cms-modal-minimized')) {
                this.minimized = true;
                this.minimize();
            }

            // clear elements
            this.ui.modalButtons.empty();
            this.ui.breadcrumb.empty();

            // remove class from modal when no breadcrumbs is rendered
            this.ui.modal.removeClass('cms-modal-has-breadcrumb');

            // hide tooltip
            CMS.API.Tooltip.hide();

            // redirect to iframe rendering if url is provided
            if (opts.url) {
                this._loadIframe({
                    url: opts.url,
                    title: opts.title,
                    breadcrumbs: opts.breadcrumbs
                });
            } else {
                // if url is not provided we go for html
                this._loadMarkup({
                    html: opts.html,
                    title: opts.title,
                    subtitle: opts.subtitle
                });
            }

            this.trigger('cms.modal.loaded');

            // display modal
            this._show($.extend({
                duration: this.options.modalDuration
            }, position));

            return this;
        },

        /**
         * Calculates coordinates and dimensions for modal placement
         *
         * @method _calculateNewPosition
         * @private
         * @param {Object} [opts]
         * @param {Number} [opts.width] desired width of the modal
         * @param {Number} [opts.height] desired height of the modal
         */
        _calculateNewPosition: function (opts) {
            // lets set the modal width and height to the size of the browser
            var widthOffset = 300; // adds margin left and right
            var heightOffset = 300; // adds margin top and bottom;
            var screenWidth = this.ui.window.width();
            var screenHeight = this.ui.window.height();
            var modalWidth = opts.width || this.options.minWidth;
            var modalHeight = opts.height || this.options.minHeight;
            // screen width and height calculation, WC = width
            var screenWidthCalc = screenWidth >= (modalWidth + widthOffset);
            var screenHeightCalc = screenHeight >= (modalHeight + heightOffset);

            var width = screenWidthCalc && !opts.width ? screenWidth - widthOffset : modalWidth;
            var height = screenHeightCalc && !opts.height ? screenHeight - heightOffset : modalHeight;

            var currentLeft = this.ui.modal.css('left');
            var currentTop = this.ui.modal.css('top');
            var newLeft;
            var newTop;

            // jquery made me do it
            if (currentLeft === '50%') {
                currentLeft = screenWidth / 2;
            }
            if (currentTop === '50%') {
                currentTop = screenHeight / 2;
            }

            currentTop = parseInt(currentTop);
            currentLeft = parseInt(currentLeft);

            // if new width/height go out of the screen - reset position to center of screen
            if ((width / 2 + currentLeft > screenWidth) || (height / 2 + currentTop > screenHeight) ||
                (currentLeft - width / 2 < 0) || (currentTop - height / 2 < 0)) {
                newLeft = screenWidth / 2;
                newTop = screenHeight / 2;
            }

            // in case, the modal is larger than the window, we trigger fullscreen mode
            if (width >= screenWidth || height >= screenHeight) {
                this.triggerMaximized = true;
            }

            return {
                width: width,
                height: height,
                top: newTop,
                left: newLeft
            };
        },

        /**
         * Animation helper for opening the sideframe.
         *
         * @method _show
         * @private
         * @param {Object} opts
         * @param {Number} opts.width width of the modal
         * @param {Number} opts.height height of the modal
         * @param {Number} opts.left left in px of the center of the modal
         * @param {Number} opts.top top in px of the center of the modal
         * @param {Number} opts.duration speed of opening, ms (not really used yet)
         */
        _show: function _show(opts) {
            // we need to position the modal in the center
            var that = this;
            var width = opts.width;
            var height = opts.height;
            // TODO make use of transitionDuration, currently capped at 0.2s
            var speed = opts.duration;
            var top = opts.top;
            var left = opts.left;


            if (this.ui.modal.hasClass('cms-modal-open')) {
                this.ui.modal.addClass('cms-modal-morphing');
            }

            this.ui.modal.css({
                'display': 'block',
                'width': width,
                'height': height,
                'top': top,
                'left': left,
                // TODO animate translateX if possible instead of margin
                'margin-left': -(width / 2),
                'margin-top': -(height / 2)
            });
            // setImmediate is required to go into the next frame
            setTimeout(function () {
                that.ui.modal.addClass('cms-modal-open');
            }, 0);

            this.ui.modal.one('cmsTransitionEnd', function () {
                that.ui.modal.removeClass('cms-modal-morphing');
                that.ui.modal.css({
                    'margin-left': -(width / 2),
                    'margin-top': -(height / 2)
                });

                // check if we should maximize
                if (that.triggerMaximized) {
                    that.maximize();
                }

                // changed locked status to allow other modals again
                CMS.API.locked = false;
                that.trigger('cms.modal.shown');
            }).emulateTransitionEnd(speed);

            // add esc close event
            this.ui.body.off('keydown.cms.close').on('keydown.cms.close', function (e) {
                if (e.keyCode === CMS.KEYS.ESC) {
                    that.options.onClose = null;
                    that.close();
                }
            });

            // set focus to modal
            this.ui.modal.focus();
        },

        /**
         * Closes the current instance.
         *
         * @method close
         */
        close: function close() {
            // handle refresh option
            if (this.options.onClose) {
                this.reloadBrowser(this.options.onClose, false, true);
            }

            // handle remove option when plugin is new
            if (CMS._newPlugin) {
                this._deletePlugin({
                    hideAfter: true
                });
            } else {
                this._hide({
                    duration: this.options.modalDuration / 2
                });
            }
        },

        /**
         * Animation helper for closing the iframe.
         *
         * @method _hide
         * @private
         * @param {Object} opts
         * @param {Number} [opts.duration=this.options.modalDuration] animation duration
         */
        _hide: function _hide(opts) {
            var that = this;
            var duration = this.options.modalDuration;

            if (opts && opts.duration) {
                duration = opts.duration;
            }

            this.ui.frame.empty();
            this.ui.modalBody.removeClass('cms-loader');
            this.ui.modal.removeClass('cms-modal-open');
            this.ui.modal.one('cmsTransitionEnd', function () {
                that.ui.modal.css('display', 'none');
            }).emulateTransitionEnd(duration);

            // reset maximize or minimize states for #3111
            setTimeout(function () {
                if (that.minimized) {
                    that.minimize();
                }
                if (that.maximized) {
                    that.maximize();
                }
                that.trigger('cms.modal.closed');
            }, this.options.duration);

            this.ui.body.off('keydown.cms.close');
        },

        /**
         * Minimizes the modal onto the toolbar.
         *
         * @method minimize
         */
        minimize: function minimize() {
            // cancel action if maximized
            if (this.maximized) {
                return false;
            }

            if (this.minimized === false) {
                // ensure toolbar is shown
                CMS.API.Toolbar.open();

                // save initial state
                this.ui.modal.data('css', this.ui.modal.css([
                    'left', 'top', 'margin-left', 'margin-top'
                ]));

                // minimize
                this.ui.body.addClass('cms-modal-minimized');
                this.ui.modal.css({
                    'left': this.ui.toolbarLeftPart.outerWidth(true) + 50
                });

                this.minimized = true;
            } else {
                // maximize
                this.ui.body.removeClass('cms-modal-minimized');
                this.ui.modal.css(this.ui.modal.data('css'));

                this.minimized = false;
            }
        },

        /**
         * Maximizes the window according to the browser size.
         *
         * @method maximize
         */
        maximize: function maximize() {
            // cancel action when minimized
            if (this.minimized) {
                return false;
            }

            if (this.maximized === false) {
                // save initial state
                this.ui.modal.data('css', this.ui.modal.css([
                    'left', 'top', 'margin-left', 'margin-top',
                    'width', 'height'
                ]));

                this.ui.body.addClass('cms-modal-maximized');

                this.maximized = true;
                this.dispatchEvent('modal-maximized', { instance: this });
            } else {
                // minimize
                this.ui.body.removeClass('cms-modal-maximized');
                this.ui.modal.css(this.ui.modal.data('css'));

                this.maximized = false;
                this.dispatchEvent('modal-restored', { instance: this });
            }
        },

        /**
         * Initiates the start move event from `_events`.
         *
         * @method _startMove
         * @private
         * @param {Object} pointerEvent passes starting event
         */
        _startMove: function _startMove(pointerEvent) {
            // cancel if maximized or minimized
            if (this.maximized || this.minimized) {
                return false;
            }

            var that = this;
            var position = this.ui.modal.position();
            var left;
            var top;

            this.ui.shim.show();

            // create event for stopping
            this.ui.body.on(this.pointerUp, function (e) {
                that._stopMove(e);
            });

            this.ui.body.on(this.pointerMove, function (e) {
                left = position.left - (pointerEvent.originalEvent.pageX - e.originalEvent.pageX);
                top = position.top - (pointerEvent.originalEvent.pageY - e.originalEvent.pageY);

                that.ui.modal.css({
                    'left': left,
                    'top': top
                });
            }).attr('data-touch-action', 'none');
        },

        /**
         * Initiates the stop move event from `_startMove`.
         *
         * @method _stopMove
         * @private
         */
        _stopMove: function _stopMove() {
            this.ui.shim.hide();
            this.ui.body
                .off(this.pointerMove + ' ' + this.pointerUp)
                .removeAttr('data-touch-action');
        },

        /**
         * Initiates the start resize event from `_events`.
         *
         * @method _startResize
         * @private
         * @param {Object} pointerEvent passes starting event
         */
        _startResize: function _startResize(pointerEvent) {
            // cancel if in fullscreen
            if (this.maximized) {
                return false;
            }
            // continue
            var that = this;
            var width = this.ui.modal.width();
            var height = this.ui.modal.height();
            var modalLeft = this.ui.modal.position().left;
            var modalTop = this.ui.modal.position().top;

            // create event for stopping
            this.ui.body.on(this.pointerUp, function (e) {
                that._stopResize(e);
            });

            this.ui.shim.show();

            this.ui.body.on(this.pointerMove, function (e) {
                var mvX = pointerEvent.originalEvent.pageX - e.originalEvent.pageX;
                var mvY = pointerEvent.originalEvent.pageY - e.originalEvent.pageY;
                var w = width - (mvX * 2);
                var h = height - (mvY * 2);
                var wMin = that.options.minWidth;
                var hMin = that.options.minHeight;
                var left = mvX + modalLeft;
                var top = mvY + modalTop;

                // add some limits
                if (w <= wMin) {
                    w = wMin;
                    left = modalLeft + width / 2 - w / 2;
                }
                if (h <= hMin) {
                    h = hMin;
                    top = modalTop + height / 2 - h / 2;
                }

                // set centered animation
                that.ui.modal.css({
                    width: w,
                    height: h,
                    left: left,
                    top: top
                });
            }).attr('data-touch-action', 'none');
        },

        /**
         * Initiates the stop resize event from `_startResize`.
         *
         * @method _stopResize
         * @private
         */
        _stopResize: function _stopResize() {
            this.ui.shim.hide();
            this.ui.body
                .off(this.pointerMove + ' ' + this.pointerUp)
                .removeAttr('data-touch-action');
        },

        /**
         * Sets the breadcrumb inside the modal.
         *
         * @method _setBreadcrumb
         * @private
         * @param {Object[]} breadcrumbs renderes breadcrumb on modal
         */
        _setBreadcrumb: function _setBreadcrumb(breadcrumbs) {
            var crumb = '';
            var template = '<a href="{1}" class="{2}"><span>{3}</span></a>';

            // cancel if there is no breadcrumbs)
            if (!breadcrumbs || breadcrumbs.length <= 1) {
                return false;
            }
            if (!breadcrumbs[0].title) {
                return false;
            }

            // add class to modal
            this.ui.modal.addClass('cms-modal-has-breadcrumb');

            // load breadcrumbs
            $.each(breadcrumbs, function (index, item) {
                // check if the item is the last one
                var last = (index >= breadcrumbs.length - 1) ? 'active' : '';
                // render breadcrumbs
                crumb += template
                    .replace('{1}', item.url)
                    .replace('{2}', last)
                    .replace('{3}', item.title);
            });

            // attach elements
            this.ui.breadcrumb.html(crumb);
        },

        /**
         * Sets the buttons inside the modal.
         *
         * @method _setButtons
         * @private
         * @param {jQuery} iframe loaded iframe element
         */
        _setButtons: function _setButtons(iframe) {
            var djangoSuit = iframe.contents().find('.suit-columns').length > 0;
            var that = this;
            var group = $('<div class="cms-modal-item-buttons"></div>');
            var render = $('<div class="cms-modal-buttons-inner"></div>');
            var cancel = $('<a href="#" class="cms-btn">' + CMS.config.lang.cancel + '</a>');
            var row;
            var tmp;

            // istanbul ignore else
            if (!djangoSuit) {
                row = iframe.contents().find('.submit-row:eq(0)');
            } else {
                row = iframe.contents().find('.save-box:eq(0)');
            }
            var form = iframe.contents().find('form');
            //avoids conflict between the browser's form validation and Django's validation
            form.on('submit', function () {
                // default submit button was clicked
                // meaning, if you have save - it should close the iframe,
                // if you hit save and continue editing it should be default form behaviour
                if (that.hideFrame) {
                    that.ui.modal.find('.cms-modal-frame iframe').hide();
                    // page has been saved, run checkup
                    that.saved = true;
                }
            });
            var buttons = row.find('input, a, button');
            // these are the buttons _inside_ the iframe
            // we need to listen to this click event to support submitting
            // a form by pressing enter inside of a field
            // click is actually triggered by submit
            buttons.on('click', function () {
                if ($(this).hasClass('default')) {
                    that.hideFrame = true;
                }
            });

            // hide all submit-rows
            iframe.contents().find('.submit-row').hide();

            // if there are no given buttons within the submit-row area
            // scan deeper within the form itself
            // istanbul ignore next
            if (!buttons.length) {
                row = iframe.contents().find('body:not(.change-list) #content form:eq(0)');
                buttons = row.find('input[type="submit"], button[type="submit"]');
                buttons.addClass('deletelink').hide();
            }

            // loop over input buttons
            buttons.each(function (index, item) {
                item = $(item);
                item.attr('data-rel', '_' + index);

                // cancel if item is a hidden input
                if (item.attr('type') === 'hidden') {
                    return false;
                }

                var title = item.attr('value') || item.text();
                var cls = 'cms-btn';

                if (item.is('button')) {
                    title = item.text();
                }

                // set additional special css classes
                if (item.hasClass('default')) {
                    cls = 'cms-btn cms-btn-action';
                }
                if (item.hasClass('deletelink')) {
                    cls = 'cms-btn cms-btn-caution';
                }

                var el = $('<a href="#" class="' + cls + ' ' + item.attr('class') + '">' + title + '</a>');

                el.on(that.click + ' ' + that.touchEnd, function (e) {
                    e.preventDefault();

                    if (item.is('a')) {
                        that._loadIframe({
                            url: item.prop('href'),
                            name: title
                        });
                    }

                    // trigger only when blue action buttons are triggered
                    if (item.hasClass('default') || item.hasClass('deletelink')) {
                        if (!item.hasClass('default')) { // hide iframe when using buttons other than submit
                            that.ui.modal.find('.cms-modal-frame iframe').hide();
                            // page has been saved or deleted, run checkup
                            that.saved = true;
                        } else { // submit button uses the form's submit event
                            that.hideFrame = true;
                        }
                    }

                    if (item.is('input') || item.is('button')) {
                        // we need to use native `.click()` event specifically
                        // as we are inside an iframe and magic is happening
                        item[0].click();
                    }

                });
                el.wrap(group);

                // append element
                render.append(el.parent());
            });

            // manually add cancel button at the end
            cancel.on(that.click, function (e) {
                e.preventDefault();
                that.options.onClose = false;
                that.close();
            });
            cancel.wrap(group);
            render.append(cancel.parent());

            // prepare groups
            render.find('.cms-btn-group').unwrap();
            tmp = render.find('.cms-btn-group').clone(true, true);
            render.find('.cms-btn-group').remove();
            render.append(tmp.wrapAll(group.clone().addClass('cms-modal-item-buttons-left')).parent());

            // render buttons
            this.ui.modalButtons.html(render);
        },

        /**
         * Version where the modal loads an iframe.
         *
         * @method _loadIframe
         * @private
         * @param {Object} opts
         * @param {String} opts.url url to render iframe, takes presedence over opts.html
         * @param {Object[]} [opts.breadcrumbs] collection of breadcrumb items
         * @param {String} [opts.title] modal window main title (bold)
         */
        _loadIframe: function _loadIframe(opts) {
            var that = this;

            opts.url = this.makeURL(opts.url);
            opts.title = opts.title || '';
            opts.breadcrumbs = opts.breadcrumbs || '';

            // show loader
            CMS.API.Toolbar.showLoader();

            // set classes
            this.ui.modal.removeClass('cms-modal-markup');
            this.ui.modal.addClass('cms-modal-iframe');

            // we need to render the breadcrumb
            this._setBreadcrumb(opts.breadcrumbs);

            // now refresh the content
            var holder = this.ui.frame;
            var iframe = $('<iframe src="' + opts.url + '" class="" frameborder="0" />');

            // set correct title
            var titlePrefix = this.ui.titlePrefix;
            var titleSuffix = this.ui.titleSuffix;

            iframe.css('visibility', 'hidden');
            titlePrefix.text(opts.title || '');
            titleSuffix.text('');

            // ensure previous iframe is hidden
            holder.find('iframe').css('visibility', 'hidden');
            that.ui.modalBody.addClass('cms-loader');

            // attach load event for iframe to prevent flicker effects
            iframe.on('load', function () {
                var messages;
                var messageList;
                var contents;
                var body;
                var innerTitle;
                var bc;

                // check if iframe can be accessed
                try {
                    iframe.contents();
                } catch (error) {
                    CMS.API.Messages.open({
                        message: '<strong>' + error + '</strong>',
                        error: true
                    });
                    that.close();
                    return;
                }

                CMS.Modal._setupCtrlEnterSave(document);
                // istanbul ignore else
                if (iframe[0].contentWindow && iframe[0].contentWindow.document) {
                    CMS.Modal._setupCtrlEnterSave(iframe[0].contentWindow.document);
                }
                // for ckeditor we need to go deeper
                // istanbul ignore next
                if (iframe[0].contentWindow && iframe[0].contentWindow.CMS && iframe[0].contentWindow.CMS.CKEditor) {
                    $(iframe[0].contentWindow.document).ready(function () {
                        // setTimeout is required to battle CKEditor initialisation
                        setTimeout(function () {
                            var editor = iframe[0].contentWindow.CMS.CKEditor.editor;
                            if (editor) {
                                editor.on('loaded', function (e) {
                                    CMS.Modal._setupCtrlEnterSave(
                                        $(e.editor.container.$).find('iframe')[0].contentWindow.document
                                    );
                                });
                            }
                        }, 100);
                    });
                }

                // hide loader
                CMS.API.Toolbar.hideLoader();

                // show messages in toolbar if provided
                messageList = iframe.contents().find('.messagelist');
                messages = messageList.find('li');
                if (messages.length) {
                    CMS.API.Messages.open({
                        message: messages.eq(0).text()
                    });
                }
                messageList.remove();
                contents = iframe.contents();
                body = contents.find('body');

                // inject css class
                body.addClass('cms-admin cms-admin-modal');

                // determine if we should close the modal or reload
                if (messages.length && that.enforceReload) {
                    that.reloadBrowser();
                }
                if (messages.length && that.enforceClose) {
                    that.close();
                    return false;
                }

                // adding django hacks
                contents.find('.viewsitelink').attr('target', '_top');

                // set modal buttons
                that._setButtons($(this));

                // when an error occurs, reset the saved status so the form can be checked and validated again
                if (iframe.contents().find('.errornote').length || iframe.contents().find('.errorlist').length) {
                    that.saved = false;
                }

                // when the window has been changed pressing the blue or red button, we need to run a reload check
                // also check that no delete-confirmation is required
                if (that.saved && !contents.find('.delete-confirmation').length) {
                    that.reloadBrowser(
                        that.options.onClose ? that.options.onClose : window.location.href,
                        false,
                        true
                    );
                } else {
                    iframe.show();
                    // set title of not provided
                    innerTitle = iframe.contents().find('#content h1:eq(0)');

                    // case when there is no prefix
                    // istanbul ignore next: never happens
                    if (opts.title === undefined && that.ui.titlePrefix.text() === '') {
                        bc = iframe.contents().find('.breadcrumbs').contents();
                        that.ui.titlePrefix.text(bc.eq(bc.length - 1).text().replace('›', '').trim());
                    }

                    if (titlePrefix.text().trim() === '') {
                        titlePrefix.text(innerTitle.text());
                    } else {
                        titleSuffix.text(innerTitle.text());
                    }
                    innerTitle.remove();

                    // than show
                    iframe.css('visibility', 'visible');

                    // append ready state
                    iframe.data('ready', true);

                    // attach close event
                    body.on('keydown.cms', function (e) {
                        if (e.keyCode === CMS.KEYS.ESC) {
                            that.close();
                        }
                    });

                    // figure out if .object-tools is available
                    if (contents.find('.object-tools').length) {
                        contents.find('#content').css('padding-top', 38);
                    }
                }
            });

            // inject
            holder.html(iframe);
        },

        /**
         * Version where the modal loads an url within an iframe.
         *
         * @method _changeIframe
         * @private
         * @param {jQuery} el originated element
         */
        _changeIframe: function _changeIframe(el) {
            if (el.hasClass('active')) {
                return false;
            }

            var parents = el.parent().find('a');
            parents.removeClass('active');

            el.addClass('active');

            this._loadIframe({
                url: el.attr('href')
            });

            this.ui.titlePrefix.text(el.text());
        },

        /**
         * Version where the modal loads html markup.
         *
         * @method _loadMarkup
         * @private
         * @param {Object} opts
         * @param {String|HTMLNode|jQuery} opts.html html markup to render
         * @param {String} opts.title modal window main title (bold)
         * @param {String} [opts.subtitle] modal window secondary title (normal)
         */
        _loadMarkup: function _loadMarkup(opts) {
            this.ui.modal.removeClass('cms-modal-iframe');
            this.ui.modal.addClass('cms-modal-markup');
            this.ui.modalBody.removeClass('cms-loader');

            // set content
            // empty to remove events, append to keep events
            this.ui.frame.empty().append(opts.html);
            this.ui.titlePrefix.text(opts.title || '');
            this.ui.titleSuffix.text(opts.subtitle || '');
        },

        /**
         * _deletePlugin removes a plugin once created when clicking
         * on delete or the close item. If we don't do this, an empty
         * plugin is generated
         * https://github.com/divio/django-cms/pull/4381 will eventually
         * provide a better solution
         *
         * @method _deletePlugin
         * @private
         * @param {Object} [opts] general objects element that holds settings
         * @param {Boolean} [opts.hideAfter] hides the modal after the ajax requests succeeds
         */
        _deletePlugin: function _deletePlugin(opts) {
            var that = this;
            var data = CMS._newPlugin;
            var post = '{ "csrfmiddlewaretoken": "' + CMS.config.csrf + '" }';
            var text = CMS.config.lang.confirmEmpty.replace(
                '{1}', CMS._newPlugin.breadcrumb[CMS._newPlugin.breadcrumb.length - 1].title
            );

            // trigger an ajax request
            return CMS.API.Toolbar.openAjax({
                url: data['delete'],
                post: post,
                text: text,
                callback: function () {
                    CMS._newPlugin = false;
                    if (opts && opts.hideAfter) {
                        that._hide({
                            duration: 100
                        });
                    }
                }
            });
        }
    });

    /**
     * Sets up keyup/keydown listeners so you're able to save whatever you're
     * editing inside of an iframe by pressing `ctrl + enter` on windows and `cmd + enter` on mac.
     *
     * It only works with default button (e.g. action), not the `delete` button,
     * even though sometimes it's the only actionable button in the modal.
     *
     * @method _setupCtrlEnterSave
     * @private
     * @static
     * @param {HTMLElement} document document element (iframe or parent window);
     */
    CMS.Modal._setupCtrlEnterSave = function _setupCtrlEnterSave(doc) {
        var cmdPressed = false;
        var mac = (navigator.platform.toLowerCase().indexOf('mac') + 1);

        $(doc).on('keydown.cms.submit', function (e) {
            if (e.ctrlKey && e.keyCode === CMS.KEYS.ENTER && !mac) {
                $('.cms-modal-buttons .cms-btn-action:first').trigger('click');
            }

            if (mac) {
                if (e.keyCode === CMS.KEYS.CMD_LEFT ||
                    e.keyCode === CMS.KEYS.CMD_RIGHT ||
                    e.keyCode === CMS.KEYS.CMD_FIREFOX) {
                    cmdPressed = true;
                }

                if (e.keyCode === CMS.KEYS.ENTER && cmdPressed) {
                    $('.cms-modal-buttons .cms-btn-action:first').trigger('click');
                }
            }
        }).on('keyup.cms.submit', function (e) {
            if (mac) {
                if (e.keyCode === CMS.KEYS.CMD_LEFT || e.keyCode === CMS.KEYS.CMD_RIGHT) {
                    cmdPressed = false;
                }
            }
        });

    };

})(CMS.$);

/*
 * Copyright https://github.com/divio/django-cms
 */

// #############################################################################
// NAMESPACES
/**
 * @module CMS
 */
/* istanbul ignore next */
var CMS = window.CMS || {};

// #############################################################################
// SIDEFRAME
(function ($) {
    'use strict';

    /**
     * The sideframe is triggered via API calls from the backend either
     * through the toolbar navigation or from plugins. The APIs only allow to
     * open a url within the sideframe.
     *
     * @class Sideframe
     * @namespace CMS
     * @uses CMS.API.Helpers
     */
    CMS.Sideframe = new CMS.Class({

        implement: [CMS.API.Helpers],

        options: {
            onClose: false,
            sideframeDuration: 300,
            sideframeWidth: 0.8 // matches 80% of window width
        },

        initialize: function initialize(options) {
            this.options = $.extend(true, {}, this.options, options);

            // elements
            this._setupUI();

            // states and events
            this.click = 'click.cms.sideframe';
            this.pointerDown = 'pointerdown.cms.sideframe contextmenu.cms.sideframe';
            this.pointerUp = 'pointerup.cms.sideframe pointercancel.cms.sideframe';
            this.pointerMove = 'pointermove.cms.sideframe';
            this.enforceReload = false;
            this.settingsRefreshTimer = 600;
        },

        /**
         * Stores all jQuery references within `this.ui`.
         *
         * @method _setupUI
         * @private
         */
        _setupUI: function _setupUI() {
            var sideframe = $('.cms-sideframe');
            this.ui = {
                sideframe: sideframe,
                body: $('html'),
                window: $(window),
                dimmer: sideframe.find('.cms-sideframe-dimmer'),
                close: sideframe.find('.cms-sideframe-close'),
                resize: sideframe.find('.cms-sideframe-resize'),
                frame: sideframe.find('.cms-sideframe-frame'),
                shim: sideframe.find('.cms-sideframe-shim'),
                historyBack: sideframe.find('.cms-sideframe-history .cms-icon-arrow-back'),
                historyForward: sideframe.find('.cms-sideframe-history .cms-icon-arrow-forward')
            };
        },

        /**
         * Sets up all the event handlers, such as closing and resizing.
         *
         * @method _events
         * @private
         */
        _events: function _events() {
            var that = this;

            // we need to set the history state on event creation
            // to ensure we start with clean states in new instances
            this.history = {
                back: [],
                forward: []
            };

            this.ui.close.off(this.click).on(this.click, function () {
                that.close();
            });

            // the resize event attaches an off event to the body
            // which is handled within _startResize()
            this.ui.resize.off(this.pointerDown).on(this.pointerDown, function (e) {
                e.preventDefault();
                that._startResize();
            });

            // close sideframe when clicking on the dimmer
            this.ui.dimmer.off(this.click).on(this.click, function () {
                that.close();
            });

            // attach events to the back button
            this.ui.historyBack.off(this.click).on(this.click, function () {
                if (that.ui.historyBack.hasClass('cms-icon-disabled')) {
                    return false;
                }
                that._goToHistory('back');
            });

            // attach events to the forward button
            this.ui.historyForward.off(this.click).on(this.click, function () {
                if (that.ui.historyForward.hasClass('cms-icon-disabled')) {
                    return false;
                }
                that._goToHistory('forward');
            });
        },

        /**
         * Opens a given url within a sideframe.
         *
         * @method open
         * @chainable
         * @param {Object} opts
         * @param {String} opts.url url to render iframe
         * @param {Boolean} [opts.animate] should sideframe be animated
         */
        open: function open(opts) {
            if (!(opts && opts.url)) {
                throw new Error('The arguments passed to "open" were invalid.');
            }

            var url = opts.url;
            var animate = opts.animate;

            // setup internals
            var language = 'language=' + CMS.config.request.language;
            var page_id = 'page_id=' + CMS.config.request.page_id;
            var params = [];
            var width = window.innerWidth;
            var currentWidth = this.ui.sideframe.outerWidth();
            var isFrameVisible = this.ui.sideframe.is(':visible');

            // set the ratio for bigger devices than mobile
            if (this.ui.body.width() >= CMS.BREAKPOINTS.mobile) {
                width = CMS.settings.sideframe.position ||
                    (this.options.sideframeWidth * 100 + '%');
            }

            // We have to rebind events every time we open a sideframe
            // because the event handlers contain references to the instance
            // and since we reuse the same markup we need to update
            // that instance reference every time.
            this._events();

            // show dimmer even before iframe is loaded
            this.ui.dimmer.show();
            this.ui.frame.addClass('cms-loader');

            // show loader
            if (CMS.API && CMS.API.Toolbar) {
                CMS.API.Toolbar.showLoader();
            }

            // we need to modify the url appropriately to pass
            // language and page to the params
            if (url.indexOf(CMS.config.request.tree) >= 0) {
                if (CMS.config.request.language) {
                    params.push(language);
                }
                if (CMS.config.request.page_id) {
                    params.push(page_id);
                }
            }

            url = this.makeURL(url, params);

            // load the iframe
            this._content(url);

            // cancel animation if sideframe is already shown
            if (isFrameVisible && currentWidth < width) {
                // The user has performed an action that requires the
                // sideframe to be shown, this intent outweighs any
                // previous intent to minimize the frame.
                CMS.settings.sideframe.hidden = false;
            }

            if (isFrameVisible && Math.round(currentWidth) === Math.round(width)) {
                // Math.round because subpixel values
                animate = false;
            }

            // show iframe
            this._show(width, animate);

            return this;
        },

        /**
         * Handles content replacement mechanisms.
         *
         * @method _content
         * @private
         * @param {String} url valid uri to pass on the iframe
         */
        _content: function _content(url) {
            var that = this;
            var iframe = $('<iframe src="' + url + '" class="" frameborder="0" />');
            var holder = this.ui.frame;
            var contents;
            var body;
            var iOS = /iPhone|iPod|iPad/.test(navigator.userAgent);

            /**
             * On iOS iframes do not respect the size set in css or attributes, and
             * is always matching the content. However, if you first load the page
             * with one amount of content (small) and then from there you'd go to a page
             * with lots of content (long, scroll requred) it won't be scrollable, because
             * iframe would retain the size of previous page. When this happens we
             * need to rerender the iframe (that's why we are animating the width here, so far
             * that was the only reliable way). But after that if you try to scroll the iframe
             * which height was just adjusted it will hide completely from the screen
             * (this is an iOS glitch, the content would still be there and in fact it would
             * be usable, but just not visible). To get rid of that we bring up the shim element
             * up and down again and this fixes the glitch. (same shim we use for resizing the sideframe)
             *
             * It is not recommended to expose it and use it on other devices rather than iOS ones.
             *
             * @function forceRerenderOnIOS
             * @private
             */
            function forceRerenderOnIOS() {
                var w = that.ui.sideframe.width();
                that.ui.sideframe.animate({ 'width': w + 1 }, 0);
                setTimeout(function () {
                    that.ui.sideframe.animate({ 'width': w }, 0);
                    that.ui.shim.css('z-index', 20);
                    setTimeout(function () {
                        that.ui.shim.css('z-index', 1);
                    }, 0);
                }, 0);
            }

            // attach load event to iframe
            iframe.hide().on('load', function () {
                // check if iframe can be accessed
                try {
                    iframe.contents();
                } catch (error) {
                    CMS.API.Messages.open({
                        message: '<strong>' + error + '</strong>',
                        error: true
                    });
                    that.close();
                    return;
                }

                contents = iframe.contents();
                body = contents.find('body');

                // inject css class
                body.addClass('cms-admin cms-admin-sideframe');

                // remove loader
                that.ui.frame.removeClass('cms-loader');
                // than show
                iframe.show();

                // force style recalculation on iOS
                if (iOS) {
                    forceRerenderOnIOS();
                }

                // add debug infos
                if (CMS.config.debug) {
                    body.addClass('cms-debug');
                }

                // save url in settings
                CMS.settings.sideframe.url = iframe[0].contentWindow.location.href;
                CMS.settings = that.setSettings(CMS.settings);

                // This essentially hides the toolbar dropdown when
                // click happens inside of a sideframe iframe
                body.on(that.click, function () {
                    $(document).trigger(that.click);
                });

                // attach close event
                body.on('keydown.cms', function (e) {
                    if (e.keyCode === CMS.KEYS.ESC) {
                        that.close();
                    }
                });

                // adding django hacks
                contents.find('.viewsitelink').attr('target', '_top');

                // update history
                that._addToHistory(this.contentWindow.location.href);
            });

            // clear the frame (removes all the handlers)
            holder.empty();
            // inject iframe
            holder.html(iframe);
        },

        /**
         * Animation helper for opening the sideframe.
         *
         * @method _show
         * @private
         * @param {Number} width width that the iframes opens to
         * @param {Number} [animate] Animation duration
         */
        _show: function _show(width, animate) {
            var that = this;

            this.ui.sideframe.show();

            // check if sideframe should be hidden
            if (CMS.settings.sideframe.hidden) {
                this._hide();
            }

            // otherwise do normal behaviour
            if (animate) {
                this.ui.sideframe.animate({
                    width: width,
                    overflow: 'visible'
                }, this.options.sideframeDuration);
            } else {
                this.ui.sideframe.css('width', width);
                // reset width if larger than available space
                if (width >= this.ui.window.width()) {
                    this.ui.sideframe.css({
                        width: this.ui.window.width() - 30,
                        overflow: 'visible'
                    });
                }
            }

            // trigger API handlers
            if (CMS.API && CMS.API.Toolbar) {
                // FIXME: initialization needs to be done after our libs are loaded
                CMS.API.Toolbar.open();
                CMS.API.Toolbar.hideLoader();
                CMS.API.Toolbar._lock(true);
            }

            // add esc close event
            this.ui.body.off('keydown.cms.close').on('keydown.cms.close', function (e) {
                if (e.keyCode === CMS.KEYS.ESC) {
                    that.options.onClose = null;
                    that.close();
                }
            });

            // disable scrolling for touch
            this.ui.body.addClass('cms-prevent-scrolling');
            this.preventTouchScrolling($(document), 'sideframe');
        },

        /**
         * Closes the current instance.
         *
         * @method close
         */
        close: function close() {
            // hide dimmer immediately
            this.ui.dimmer.hide();

            // update settings
            CMS.settings.sideframe = {
                url: null,
                hidden: false,
                width: this.options.sideframeWidth
            };
            CMS.settings = this.setSettings(CMS.settings);

            // check for reloading
            this.reloadBrowser(this.options.onClose, false, true);

            // trigger hide animation
            this._hide({
                duration: this.options.sideframeDuration / 2
            });
        },

        /**
         * Animation helper for closing the iframe.
         *
         * @method _hide
         * @private
         * @param {Object} [opts]
         * @param {Number} [opts.duration=this.options.sideframeDuration] animation duration
         */
        _hide: function _hide(opts) {
            var duration = this.options.sideframeDuration;
            if (opts && typeof opts.duration === 'number') {
                duration = opts.duration;
            }

            this.ui.sideframe.animate({ width: 0 }, duration, function () {
                $(this).hide();
            });
            this.ui.frame.removeClass('cms-loader');

            if (CMS.API && CMS.API.Toolbar) {
                CMS.API.Toolbar._lock(false);
            }

            this.ui.body.off('keydown.cms.close');

            // enable scrolling again
            this.ui.body.removeClass('cms-prevent-scrolling');
            this.allowTouchScrolling($(document), 'sideframe');
        },

        /**
         * Initiates the start resize event from `_events`.
         *
         * @method _startResize
         * @private
         */
        _startResize: function _startResize() {
            var that = this;
            var outerOffset = 30;
            var timer = function () {};

            // create event for stopping
            this.ui.body.on(this.pointerUp, function (e) {
                e.preventDefault();
                that._stopResize();
            });

            // this prevents the iframe from being focusable
            this.ui.shim.css('z-index', 20);

            this.ui.body.attr('data-touch-action', 'none').on(this.pointerMove, function (e) {
                if (e.originalEvent.clientX <= 320) {
                    e.originalEvent.clientX = 320;
                }
                if (e.originalEvent.clientX >= that.ui.window.width() - outerOffset) {
                    e.originalEvent.clientX = that.ui.window.width() - outerOffset;
                }

                that.ui.sideframe.css('width', e.originalEvent.clientX);

                // update settings
                CMS.settings.sideframe.position = e.originalEvent.clientX;

                // save position into our settings
                clearTimeout(timer);
                timer = setTimeout(function () {
                    CMS.settings = that.setSettings(CMS.settings);
                }, that.settingsRefreshTimer);
            });
        },

        /**
         * Initiates the stop resize event from `_startResize`.
         *
         * @method _stopResize
         * @private
         */
        _stopResize: function _stopResize() {
            this.ui.shim.css('z-index', 1);
            this.ui.body
                .off(this.pointerUp)
                .off(this.pointerMove)
                .removeAttr('data-touch-action');
        },

        /**
         * Retrieves the history states from `this.history`.
         *
         * @method _goToHistory
         * @private
         * @param {String} type can be either `back` or `forward`
         */
        _goToHistory: function _goToHistory(type) {
            var iframe = this.ui.frame.find('iframe');
            var tmp;

            if (type === 'back') {
                // remove latest entry (which is the current site)
                this.history.forward.push(this.history.back.pop());
                iframe.attr('src', this.history.back[this.history.back.length - 1]);
            }

            if (type === 'forward') {
                tmp = this.history.forward.pop();
                this.history.back.push(tmp);
                iframe.attr('src', tmp);
            }

            this._updateHistoryButtons();
        },

        /**
         * Stores the history states in `this.history`.
         *
         * @method _addToHistory
         * @private
         * @param {String} url url to be stored in `this.history.back`
         */
        _addToHistory: function _addToHistory(url) {
            var iframe = this.ui.frame.find('iframe');

            // we need to update history first
            this.history.back.push(url);
            // and than set local variables
            var length = this.history.back.length;

            // store current url if array is empty
            if (this.history.back.length <= 0) {
                this.history.back.push(iframe.attr('src'));
            }

            // check for duplicates
            if (this.history.back[length - 1] === this.history.back[length - 2]) {
                this.history.back.pop();
            }

            this._updateHistoryButtons();
        },

        /**
         * Sets the correct states for the history UI elements.
         *
         * @method _updateHistoryButtons
         * @private
         */
        _updateHistoryButtons: function _updateHistoryButtons() {
            if (this.history.back.length > 1) {
                this.ui.historyBack.removeClass('cms-icon-disabled');
            } else {
                this.ui.historyBack.addClass('cms-icon-disabled');
            }

            if (this.history.forward.length >= 1) {
                this.ui.historyForward.removeClass('cms-icon-disabled');
            } else {
                this.ui.historyForward.addClass('cms-icon-disabled');
            }
        }
    });
})(CMS.$);

/*
 * Copyright https://github.com/divio/django-cms
 */

// #############################################################################
// NAMESPACES
/**
 * @module CMS
 */
/* istanbul ignore next */
var CMS = window.CMS || {};

// #############################################################################
// Clipboard
(function ($) {
    'use strict';

    /**
     * Handles copy & paste in the structureboard.
     *
     * @class Clipboard
     * @namespace CMS
     * @uses CMS.API.Helpers
     */
    CMS.Clipboard = new CMS.Class({

        implement: [CMS.API.Helpers],

        initialize: function () {
            this._setupUI();

            // states
            this.click = 'click.cms.clipboard';

            // setup events
            this._events();
        },

        /**
         * Caches all the jQuery element queries.
         *
         * @method _setupUI
         * @private
         */
        _setupUI: function _setupUI() {
            var clipboard = $('.cms-clipboard');
            this.ui = {
                clipboard: clipboard,
                triggers: $('.cms-clipboard-trigger a'),
                triggerRemove: $('.cms-clipboard-empty a'),
                pluginsList: clipboard.find('.cms-clipboard-containers'),
                document: $(document)
            };
        },

        /**
         * Sets up event handlers for clipboard ui.
         *
         * @method _events
         * @private
         */
        _events: function () {
            var that = this;

            var MIN_WIDTH = 400;
            // FIXME kind of a magic number for 1 item in clipboard
            var MIN_HEIGHT = 117;

            that.modal = new CMS.Modal({
                minWidth: MIN_WIDTH,
                minHeight: MIN_HEIGHT,
                minimizable: false,
                maximizable: false,
                resizable: false
            });

            that.modal.on('cms.modal.loaded cms.modal.closed', function removePlaceholder() {
                // cannot be cached
                $('.cms-add-plugin-placeholder').remove();
            }).on('cms.modal.closed cms.modal.load', function () {
                that.ui.pluginsList.prependTo(that.ui.clipboard);
            }).ui.modal.on('cms.modal.load', function () {
                that.ui.pluginsList.prependTo(that.ui.clipboard);
            });

            that.ui.triggers.on(that.click, function (e) {
                e.preventDefault();
                e.stopPropagation();
                if ($(this).parent().hasClass('cms-toolbar-item-navigation-disabled')) {
                    return false;
                }

                that.modal.open({
                    html: that.ui.pluginsList,
                    title: that.ui.clipboard.data('title'),
                    width: MIN_WIDTH,
                    height: MIN_HEIGHT
                });
                that.ui.document.trigger('click.cms.toolbar');
            });

            // add remove event
            that.ui.triggerRemove.on(that.click, function (e) {
                e.preventDefault();
                e.stopPropagation();
                if ($(this).parent().hasClass('cms-toolbar-item-navigation-disabled')) {
                    return false;
                }
                that.clear(function () {
                    // remove element on success
                    that.modal.close();
                    that.ui.triggers.parent().addClass('cms-toolbar-item-navigation-disabled');
                    that.ui.triggerRemove.parent().addClass('cms-toolbar-item-navigation-disabled');
                    that.ui.document.trigger('click.cms.toolbar');
                });
            });
        },

        /**
         * Clears the clipboard by quering the server.
         * Callback is optional, but if provided - it's called
         * no matter what outcome was of the ajax call.
         *
         * @method clear
         * @param {Function} [callback]
         */
        clear: function (callback) {
            // post needs to be a string, it will be converted using JSON.parse
            var post = '{ "csrfmiddlewaretoken": "' + CMS.config.csrf + '" }';
            var pasteItems = $('.cms-submenu-item [data-rel=paste]').parent().
                addClass('cms-submenu-item-disabled');
            pasteItems.find('.cms-submenu-item-paste-tooltip').css('display', 'none');
            pasteItems.find('.cms-submenu-item-paste-tooltip-empty').css('display', 'block');

            // redirect to ajax
            CMS.API.Toolbar.openAjax({
                url: CMS.config.clipboard.url,
                post: post,
                callback: callback
            });
        }

    });
})(CMS.$);

/*
 * Copyright https://github.com/divio/django-cms
 */

// #############################################################################
// NAMESPACES
/**
 * @module CMS
 */
var CMS = window.CMS || {};

// #############################################################################
// Plugin
(function ($) {
    'use strict';

    var doc;
    var clipboard;
    var clipboardDraggable;
    var clipboardPlugin;

    /**
     * Class for handling Plugins / Placeholders or Generics.
     * Handles adding / moving / copying / pasting / menus etc
     * in structureboard.
     *
     * @class Plugin
     * @namespace CMS
     * @uses CMS.API.Helpers
     */
    CMS.Plugin = new CMS.Class({

        implement: [CMS.API.Helpers],

        options: {
            type: '', // bar, plugin or generic
            placeholder_id: null,
            plugin_type: '',
            plugin_id: null,
            plugin_language: '',
            plugin_parent: null,
            plugin_order: null,
            plugin_breadcrumb: [],
            plugin_restriction: [],
            plugin_parent_restriction: [],
            urls: {
                add_plugin: '',
                edit_plugin: '',
                move_plugin: '',
                copy_plugin: '',
                delete_plugin: ''
            }
        },

        initialize: function initialize(container, options) {
            this.options = $.extend(true, {}, this.options, options);

            this._setupUI(container);

            // states
            this.csrf = CMS.config.csrf;
            this.click = 'click.cms.plugin';
            this.pointerUp = 'pointerup.cms.plugin';
            this.pointerDown = 'pointerdown.cms.plugin';
            this.pointerOverAndOut = 'pointerover.cms.plugin pointerout.cms.plugin';
            this.doubleClick = 'dblclick.cms.plugin';
            this.keyUp = 'keyup.cms.plugin';
            this.keyDown = 'keydown.cms.plugin';
            this.mouseEvents = 'mousedown.cms.plugin mousemove.cms.plugin mouseup.cms.plugin';
            this.touchStart = 'touchstart.cms.plugin';
            this.touchEnd = 'touchend.cms.plugin';

            // bind data element to the container
            this.ui.container.data('settings', this.options);

            // determine type of plugin
            switch (this.options.type) {
                case 'placeholder': // handler for placeholder bars
                    this._setPlaceholder();
                    this._collapsables();
                    break;
                case 'plugin': // handler for all plugins
                    this._setPlugin();
                    this._collapsables();
                    break;
                default: // handler for static content
                    this._setGeneric();
            }
        },

        /**
         * Caches some jQuery references and sets up structure for
         * further initialisation.
         *
         * @method _setupUI
         * @private
         * @param {String} container `cms-plugin-${id}`
         */
        _setupUI: function setupUI(container) {
            container = $('.' + container);
            this.ui = {
                container: container,
                publish: $('.cms-btn-publish'),
                save: $('.cms-toolbar-item-switch-save-edit'),
                window: $(window),
                revert: $('.cms-toolbar-revert'),
                dragbar: null,
                draggable: null,
                draggables: null,
                submenu: null,
                dropdown: null
            };
        },

        /**
         * Sets up behaviours and ui for placeholder.
         *
         * @method _setPlaceholder
         * @private
         */
        _setPlaceholder: function () {
            var that = this;
            this.ui.dragbar = $('.cms-dragbar-' + this.options.placeholder_id);
            this.ui.draggables = this.ui.dragbar.closest('.cms-dragarea').find('> .cms-draggables');
            this.ui.submenu = this.ui.dragbar.find('.cms-submenu-settings');
            var title = this.ui.dragbar.find('.cms-dragbar-title');
            var togglerLinks = this.ui.dragbar.find('.cms-dragbar-toggler a');
            var expanded = 'cms-dragbar-title-expanded';

            // register the subnav on the placeholder
            this._setSettingsMenu(this.ui.submenu);
            this._setAddPluginModal(this.ui.dragbar.find('.cms-submenu-add'));

            CMS.settings.dragbars = CMS.settings.dragbars || []; // expanded dragbars array

            // enable expanding/collapsing globally within the placeholder
            togglerLinks.off(this.click).on(this.click, function (e) {
                e.preventDefault();
                if (title.hasClass(expanded)) {
                    that._collapseAll(title);
                } else {
                    that._expandAll(title);
                }
            });

            if ($.inArray(this.options.placeholder_id, CMS.settings.dragbars) !== -1) {
                title.addClass(expanded);
            }

            this._checkIfPasteAllowed();
        },

        /**
         * Sets up behaviours and ui for plugin.
         *
         * @method _setPlugin
         * @private
         */
        _setPlugin: function () {
            var that = this;

            // adds double click to edit
            this.ui.container.add(this.ui.dragitem).on(this.doubleClick, function (e) {
                e.preventDefault();
                e.stopPropagation();

                that.editPlugin(
                    that.options.urls.edit_plugin,
                    that.options.plugin_name,
                    that.options.plugin_breadcrumb
                );
            });

            // adds edit tooltip
            this.ui.container.on(this.pointerOverAndOut + ' ' + this.touchStart, function (e) {
                // required for both, click and touch
                // otherwise propagation won't work to the nested plugin
                e.stopPropagation();
                if (e.type === 'touchstart') {
                    CMS.API.Tooltip._forceTouchOnce();
                }
                var name = that.options.plugin_name;
                var id = that.options.plugin_id;

                var placeholderId = that._getId(that.ui.dragitem.closest('.cms-dragarea'));
                var placeholder = $('.cms-placeholder-' + placeholderId);

                if (placeholder.length && placeholder.data('settings')) {
                    name = placeholder.data('settings').name + ': ' + name;
                }

                CMS.API.Tooltip.displayToggle(e.type === 'pointerover' || e.type === 'touchstart', e, name, id);
            });

            // adds listener for all plugin updates
            this.ui.container.on('cms.plugins.update', function (e) {
                e.stopPropagation();
                that.movePlugin();
            });

            // adds listener for copy/paste updates
            this.ui.container.on('cms.plugin.update', function (e) {
                e.stopPropagation();

                var el = $(e.delegateTarget);
                var dragitem = $('.cms-draggable-' + el.data('settings').plugin_id);
                var placeholder_id = that._getId(
                    dragitem.parents('.cms-draggables').last().prevAll('.cms-dragbar').first()
                );

                // if placeholder_id is empty, cancel
                if (!placeholder_id) {
                    return false;
                }

                var data = el.data('settings');
                data.target = placeholder_id;
                data.parent = that._getId(dragitem.parent().closest('.cms-draggable'));
                data.move_a_copy = true;

                that.movePlugin(data);
            });

            // filling up ui object
            this.ui.draggable = $('.cms-draggable-' + this.options.plugin_id);
            this.ui.dragitem = this.ui.draggable.find('> .cms-dragitem');
            this.ui.draggables = this.ui.draggable.find('> .cms-draggables');
            this.ui.submenu = this.ui.dragitem.find('.cms-submenu');

            // attach event to the plugin menu
            this._setSettingsMenu(this.ui.submenu);

            // attach events for the "Add plugin" modal
            this._setAddPluginModal(this.ui.dragitem.find('.cms-submenu-add'));

            // clickability of "Paste" menu item
            this._checkIfPasteAllowed();
        },

        /**
         * Sets up behaviours and ui for generics.
         * Generics do not show up in structure board.
         *
         * @method _setGeneric
         * @private
         */
        _setGeneric: function () {
            var that = this;

            // adds double click to edit
            this.ui.container.on(this.doubleClick, function (e) {
                e.preventDefault();
                e.stopPropagation();
                that.editPlugin(that.options.urls.edit_plugin, that.options.plugin_name, []);
            });

            // adds edit tooltip
            this.ui.container.on(this.pointerOverAndOut + ' ' + this.touchStart, function (e) {
                if (e.type !== 'touchstart') {
                    e.stopPropagation();
                }
                var name = that.options.plugin_name;
                var id = that.options.plugin_id;
                CMS.API.Tooltip.displayToggle(e.type === 'pointerover' || e.type === 'touchstart', e, name, id);
            });
        },

        /**
         * Checks if paste is allowed into current plugin/placeholder based
         * on restrictions we have. Also determines which tooltip to show.
         *
         * WARNING: this relies on clipboard plugins always being instantiated
         * first, so they have data('settings') by the time this method is called.
         *
         * @method _checkIfPasteAllowed
         * @private
         * @return {Boolean}
         */
        _checkIfPasteAllowed: function _checkIfPasteAllowed() {
            var pasteButton = this.ui.dropdown.find('[data-rel=paste]');
            var pasteItem = pasteButton.parent();
            if (!clipboardPlugin.length) {
                pasteItem.addClass('cms-submenu-item-disabled');
                pasteItem.find('.cms-submenu-item-paste-tooltip-empty').css('display', 'block');
                return false;
            }

            if (this.ui.draggable && this.ui.draggable.hasClass('cms-draggable-disabled')) {
                pasteItem.addClass('cms-submenu-item-disabled');
                pasteItem.find('.cms-submenu-item-paste-tooltip-disabled').css('display', 'block');
                return false;
            }

            var bounds = this.options.plugin_restriction;
            var type = clipboardPlugin.data('settings').plugin_type;
            var parent_bounds = $.grep(clipboardPlugin.data('settings').plugin_parent_restriction, function (r) {
                // special case when PlaceholderPlugin has a parent restriction named "0"
                return r !== '0';
            });
            var currentPluginType = this.options.plugin_type;

            if ((bounds.length && $.inArray(type, bounds) === -1) ||
                (parent_bounds.length && $.inArray(currentPluginType, parent_bounds) === -1)) {
                pasteItem.addClass('cms-submenu-item-disabled');
                pasteItem.find('.cms-submenu-item-paste-tooltip-restricted').css('display', 'block');
                return false;
            }

            return true;
        },

        /**
         * Calls api to create a plugin and then proceeds to edit it.
         *
         * @method addPlugin
         * @param {String} type type of the plugin, e.g "Bootstrap3ColumnCMSPlugin"
         * @param {String} name name of the plugin, e.g. "Column"
         * @param {String} parent id of a parent plugin
         */
        addPlugin: function (type, name, parent) {
            // cancel request if already in progress
            if (CMS.API.locked) {
                return false;
            }
            CMS.API.locked = true;

            var that = this;
            var data = {
                placeholder_id: this.options.placeholder_id,
                plugin_type: type,
                plugin_parent: parent || '',
                plugin_language: this.options.plugin_language,
                csrfmiddlewaretoken: this.csrf
            };

            $.ajax({
                type: 'POST',
                url: this.options.urls.add_plugin,
                data: data,
                success: function (data) {
                    CMS.API.locked = false;
                    that.newPlugin = data;
                    that.editPlugin(data.url, name, data.breadcrumb);
                },
                error: function (jqXHR) {
                    CMS.API.locked = false;
                    var msg = CMS.config.lang.error;
                    // trigger error
                    CMS.API.Messages.open({
                        message: msg + jqXHR.responseText || jqXHR.status + ' ' + jqXHR.statusText,
                        error: true
                    });
                }
            });
        },

        /**
         * Opens the modal for editing a plugin.
         *
         * @method editPlugin
         * @param {String} url editing url
         * @param {String} name Name of the plugin, e.g. "Column"
         * @param {Object[]} breadcrumb array of objects representing a breadcrumb,
         *     each item is `{ title: 'string': url: 'string' }`
         */
        editPlugin: function (url, name, breadcrumb) {
            // trigger modal window
            var modal = new CMS.Modal({
                newPlugin: this.newPlugin || false,
                onClose: this.options.onClose || false,
                redirectOnClose: this.options.redirectOnClose || false
            });
            if (!this.newPlugin) {
                modal.on('cms.modal.loaded', function removePlaceholder() {
                    $('.cms-add-plugin-placeholder').remove();
                });
            }
            modal.on('cms.modal.closed', function removePlaceholder() {
                $('.cms-add-plugin-placeholder').remove();
            });
            modal.open({
                url: url,
                title: name,
                breadcrumbs: breadcrumb,
                width: 850
            });
        },

        /**
         * Used for copying _and_ pasting a plugin. If either of params
         * is present method assumes that it's "paste" and will make a call
         * to api to insert current plugin to specified `options.target_plugin_id`
         * or `options.target_placeholder_id`. Copying a plugin also first
         * clears the clipboard.
         *
         * @method copyPlugin
         * @param {Object} [options=this.options]
         * @param {String} source_language
         */
        copyPlugin: function (options, source_language) {
            // cancel request if already in progress
            if (CMS.API.locked) {
                return false;
            }
            CMS.API.locked = true;

            var move = (options || source_language) ? true : false;

            // set correct options
            options = options || this.options;
            if (source_language) {
                options.target = options.placeholder_id;
                options.plugin_id = '';
                options.parent = '';
            } else {
                source_language = options.plugin_language;
            }

            var data = {
                source_placeholder_id: options.placeholder_id,
                source_plugin_id: options.plugin_id || '',
                source_language: source_language,
                target_plugin_id: options.parent || '',
                target_placeholder_id: options.target || CMS.config.clipboard.id,
                target_language: options.page_language || source_language,
                csrfmiddlewaretoken: this.csrf
            };
            var request = {
                type: 'POST',
                url: options.urls.copy_plugin,
                data: data,
                success: function () {
                    CMS.API.Messages.open({
                        message: CMS.config.lang.success
                    });
                    // reload
                    CMS.API.Helpers.reloadBrowser();
                },
                error: function (jqXHR) {
                    CMS.API.locked = false;
                    var msg = CMS.config.lang.error;
                    // trigger error
                    CMS.API.Messages.open({
                        message: msg + jqXHR.responseText || jqXHR.status + ' ' + jqXHR.statusText,
                        error: true
                    });
                }
            };

            if (move) {
                $.ajax(request);
            } else {
                // ensure clipboard is cleaned
                CMS.API.Clipboard.clear(function () {
                    $.ajax(request);
                });
            }
        },

        /**
         * Essentially clears clipboard and moves plugin to a clipboard
         * placholder through `movePlugin`.
         *
         * @method cutPlugin
         */
        cutPlugin: function () {
            // if cut is once triggered, prevent additional actions
            if (CMS.API.locked) {
                return false;
            }
            CMS.API.locked = true;

            var that = this;
            var data = {
                placeholder_id: CMS.config.clipboard.id,
                plugin_id: this.options.plugin_id,
                plugin_parent: '',
                plugin_language: this.options.page_language,
                plugin_order: [this.options.plugin_id],
                csrfmiddlewaretoken: this.csrf
            };

            // ensure clipboard is cleaned
            CMS.API.Clipboard.clear(function () {
                // cancel request if already in progress
                if (CMS.API.locked) {
                    return false;
                }
                CMS.API.locked = true;

                // move plugin
                $.ajax({
                    type: 'POST',
                    url: that.options.urls.move_plugin,
                    data: data,
                    success: function () {
                        CMS.API.Messages.open({
                            message: CMS.config.lang.success
                        });
                        // if response is reload
                        CMS.API.Helpers.reloadBrowser();
                    },
                    error: function (jqXHR) {
                        CMS.API.locked = false;
                        var msg = CMS.config.lang.error;
                        // trigger error
                        CMS.API.Messages.open({
                            message: msg + jqXHR.responseText || jqXHR.status + ' ' + jqXHR.statusText,
                            error: true
                        });
                    }
                });
            });
        },

        /**
         * Method is called when you click on the paste button on the plugin.
         * Uses existing solution of `copyPlugin(options)`
         *
         * @method pastePlugin
         */
        pastePlugin: function () {
            clipboardDraggable.appendTo(this.ui.draggables);
            this.ui.draggables.trigger('cms.update');
            clipboardPlugin.trigger('cms.plugin.update');
        },

        /**
         * Moves plugin by querying the API and then updates some UI parts
         * to reflect that the page has changed.
         *
         * @method movePlugin
         * @param {Object} [options=this.options]
         * @param {String} [options.placeholder_id]
         * @param {String} [options.plugin_id]
         * @param {String} [options.plugin_parent]
         * @param {String} [options.plugin_language]
         * @param {Boolean} [options.move_a_copy]
         */
        movePlugin: function (options) {
            // cancel request if already in progress
            if (CMS.API.locked) {
                return false;
            }
            CMS.API.locked = true;

            var that = this;
            // set correct options
            options = options || this.options;

            var plugin = $('.cms-plugin-' + options.plugin_id);
            var dragitem = $('.cms-draggable-' + options.plugin_id);

            // SETTING POSITION
            this._setPosition(options.plugin_id, plugin, dragitem);

            // SAVING POSITION
            var placeholder_id = this._getId(
                dragitem.parents('.cms-draggables').last().prevAll('.cms-dragbar').first()
            );
            var plugin_parent = this._getId(dragitem.parent().closest('.cms-draggable'));
            var plugin_order = this._getIds(dragitem.siblings('.cms-draggable').andSelf());

            if (options.move_a_copy) {
                plugin_order = plugin_order.map(function (pluginId) {
                    // TODO correct way would be to check if it's actually a
                    // pasted plugin and only then replace the id with copy token
                    // otherwise if we would copy from the same placeholder we would get
                    // two copy tokens instead of original and a copy.
                    // it's ok so far, as long as we copy only from clipboard
                    if (pluginId === options.plugin_id) {
                        pluginId = '__COPY__';
                    }
                    return pluginId;
                });
            }

            // cancel here if we have no placeholder id
            if (placeholder_id === false) {
                return false;
            }

            // gather the data for ajax request
            var data = {
                placeholder_id: placeholder_id,
                plugin_id: options.plugin_id,
                plugin_parent: plugin_parent || '',
                // this is a hack: when moving to different languages use the global language
                plugin_language: options.page_language,
                plugin_order: plugin_order,
                csrfmiddlewaretoken: this.csrf,
                move_a_copy: options.move_a_copy
            };

            $.ajax({
                type: 'POST',
                url: options.urls.move_plugin,
                data: data,
                success: function (response) {
                    // if response is reload
                    if (response.reload) {
                        CMS.API.Helpers.reloadBrowser();
                    }

                    // set new url settings when moving #4803
                    if (response.urls) {
                        that._setSettings(options, {
                            urls: response.urls
                        });
                    }

                    // enable actions again
                    CMS.API.locked = false;

                    // TODO: show only if (response.status)
                    that._showSuccess(dragitem);
                },
                error: function (jqXHR) {
                    CMS.API.locked = false;
                    var msg = CMS.config.lang.error;
                    // trigger error
                    CMS.API.Messages.open({
                        message: msg + jqXHR.responseText || jqXHR.status + ' ' + jqXHR.statusText,
                        error: true
                    });
                }
            });

            // show publish / save buttons
            this.ui.publish
                .addClass('cms-btn-publish-active')
                .removeClass('cms-btn-disabled')
                .parent().show();
            this.ui.window.trigger('resize');

            // enable revert to live
            this.ui.revert.removeClass('cms-toolbar-item-navigation-disabled');
        },

        /**
         * Changes the settings attributes on an initialised plugin.
         *
         * @method _setSettings
         * @param {Object} oldSettings current settings
         * @param {Object} newSettings new settings to be applied
         * @private
         */
        _setSettings: function _setSettings(oldSettings, newSettings) {
            var settings = $.extend(true, {}, oldSettings, newSettings);
            var plugin = $('.cms-plugin-' + settings.plugin_id);

            // set new setting on instance and plugin data
            this.options = settings;
            plugin.data('settings', settings);
        },

        /**
         * Opens a modal to delete a plugin.
         *
         * @method deletePlugin
         * @param {String} url admin url for deleting a page
         * @param {String} name plugin name, e.g. "Column"
         * @param {Object[]} breadcrumb array of objects representing a breadcrumb,
         *     each item is `{ title: 'string': url: 'string' }`
         */
        deletePlugin: function (url, name, breadcrumb) {
            // trigger modal window
            var modal = new CMS.Modal({
                newPlugin: this.newPlugin || false,
                onClose: this.options.onClose || false,
                redirectOnClose: this.options.redirectOnClose || false
            });
            modal.on('cms.modal.loaded', function removePlaceholder() {
                $('.cms-add-plugin-placeholder').remove();
            });
            modal.open({
                url: url,
                title: name,
                breadcrumbs: breadcrumb
            });
        },

        /**
         * Moves the plugin according to the place it should have in content mode.
         *
         * @method _setPosition
         * @private
         * @param {String} id
         * @param {jQuery} plugin the `.cms-plugin` element
         * @param {jQuery} dragitem the `.cms-draggable` of the plugin
         */
        _setPosition: function (id, plugin, dragitem) {
            // after we insert the plugin onto its new place, we need to figure out where to position it
            var prevItem = dragitem.prev('.cms-draggable');
            var nextItem = dragitem.next('.cms-draggable');
            var parent = dragitem.parent().closest('.cms-draggable');
            var child = $('.cms-plugin-' + this._getId(parent));
            var placeholder = dragitem.closest('.cms-dragarea');

            // determine if there are other plugins within the same level, this makes the move easier
            if (prevItem.length) {
                plugin.insertAfter($('.cms-plugin-' + this._getId(prevItem)));
            } else if (nextItem.length) {
                plugin.insertBefore($('.cms-plugin-' + this._getId(nextItem)));
            } else if (parent.length) {
                // if we can't find a plugin on the same level, we need to travel higher
                // for this we need to find the deepest child
                while (child.children().length) {
                    child = child.children();
                }
                child.append(plugin);
            } else if (placeholder.length) {
                // we also need to cover the case if we move the plugin to an empty placeholder
                plugin.insertAfter($('.cms-placeholder-' + this._getId(placeholder)));
            } else {
                // if we did not found a match, reload
                CMS.API.Helpers.reloadBrowser();
            }
        },

        /**
         * Called after plugin is added through ajax.
         *
         * @method editPluginPostAjax
         * @param {Object} toolbar CMS.API.Toolbar instance (not used)
         * @param {Object} response response from server
         */
        editPluginPostAjax: function (toolbar, response) {
            this.editPlugin(response.url, this.options.plugin_name, response.breadcrumb);
        },

        /**
         * _setSettingsMenu sets up event handlers for settings menu.
         *
         * @method _setSettingsMenu
         * @private
         * @param {jQuery} nav
         */
        _setSettingsMenu: function _setSettingsMenu(nav) {
            var that = this;
            this.ui.dropdown = nav.siblings('.cms-submenu-dropdown-settings');
            var dropdown = this.ui.dropdown;

            nav.on(this.pointerUp, function (e) {
                e.preventDefault();
                e.stopPropagation();
                var trigger = $(this);
                if (trigger.hasClass('cms-btn-active')) {
                    CMS.Plugin._hideSettingsMenu(trigger);
                } else {
                    CMS.Plugin._hideSettingsMenu();
                    that._showSettingsMenu(trigger);
                }
            }).on(this.touchStart, function (e) {
                // required on some touch devices so
                // ui touch punch is not triggering mousemove
                // which in turn results in pep triggering pointercancel
                e.stopPropagation();
            });

            dropdown.on(this.mouseEvents, function (e) {
                e.stopPropagation();
            }).on(this.touchStart, function (e) {
                // required for scrolling on mobile
                e.stopPropagation();
            });

            that._setupActions(nav);
            // prevent propagation
            nav.on([this.pointerUp, this.pointerDown, this.click, this.doubleClick].join(' '), function (e) {
                e.stopPropagation();
            });

            nav.siblings('.cms-quicksearch, .cms-submenu-dropdown-settings')
                .on([this.pointerUp, this.click, this.doubleClick].join(' '), function (e) {
                e.stopPropagation();
            });
        },

        /**
         * Simplistic implementation, only scrolls down, only works in structuremode
         * and highly depends on the styles of the structureboard to work correctly
         *
         * @method _scrollToElement
         * @private
         * @param {jQuery} el element to scroll to
         * @param {Object} [opts]
         * @param {Number} [opts.duration=200] time to scroll
         * @param {Number} [opts.offset=50] distance in px to the bottom of the screen
         */
        _scrollToElement: function _scrollToElement(el, opts) {
            var duration = opts && opts.duration !== undefined ? opts.duration : 200;
            var offset = opts && opts.offset !== undefined ? opts.offset : 50;
            var scrollable = el.offsetParent();
            var win = $(window);
            var scrollHeight = win.height();
            var scrollTop = scrollable.scrollTop();
            var elPosition = el.position().top;
            var elHeight = el.height();
            var isInViewport = (elPosition + elHeight + offset <= scrollHeight);

            if (!isInViewport) {
                scrollable.animate({
                    scrollTop: elPosition + offset + elHeight + scrollTop - scrollHeight
                }, duration);
            }
        },

        /**
         * Opens a modal with traversable plugins list, adds a placeholder to where
         * the plugin will be added.
         *
         * @method _setAddPluginModal
         * @private
         * @param {jQuery} nav modal trigger element
         */
        _setAddPluginModal: function _setAddPluginModal(nav) {
            if (nav.hasClass('cms-btn-disabled')) {
                return false;
            }
            var that = this;
            var placeholder = $(
                '<div class="cms-add-plugin-placeholder">' +
                    CMS.config.lang.addPluginPlaceholder +
                '</div>'
            );
            var modal = new CMS.Modal({
                minWidth: 400,
                minHeight: 400
            });
            var dragItem = nav.closest('.cms-dragitem');
            var isPlaceholder = !Boolean(dragItem.length);
            var childrenList;
            var isTouching;

            if (isPlaceholder) {
                childrenList = nav.closest('.cms-dragarea').find('> .cms-draggables');
            } else {
                childrenList = nav.closest('.cms-draggable').find('> .cms-draggables');
            }

            modal.on('cms.modal.loaded', $.proxy(that._setupKeyboardTraversing, that));
            modal.on('cms.modal.loaded', function addPlaceholder() {
                if (childrenList.hasClass('cms-hidden') && !isPlaceholder) {
                    that._toggleCollapsable(dragItem);
                }
                $('.cms-add-plugin-placeholder').remove();
                placeholder.appendTo(childrenList);
                that._scrollToElement(placeholder);
            });
            modal.on('cms.modal.closed', function removePlaceholder() {
                $('.cms-add-plugin-placeholder').remove();
            });
            modal.on('cms.modal.shown', function () {
                var dropdown = $('.cms-modal-markup .cms-plugin-picker');
                if (!isTouching) {
                    // only focus the field if using mouse
                    // otherwise keyboard pops up
                    dropdown.find('input').trigger('focus');
                }
                isTouching = false;
            });
            var plugins = nav.siblings('.cms-plugin-picker');

            that._setupQuickSearch(plugins);

            nav.on(this.touchStart, function (e) {
                isTouching = true;
                // required on some touch devices so
                // ui touch punch is not triggering mousemove
                // which in turn results in pep triggering pointercancel
                e.stopPropagation();
            }).on(this.pointerUp, function (e) {
                e.preventDefault();
                e.stopPropagation();

                CMS.Plugin._hideSettingsMenu();

                // since we don't know exact plugin parent (because dragndrop)
                // we need to know the parent id by the time we open "add plugin" dialog
                var pluginsCopy = plugins.clone(true, true).data(
                    'parentId', that._getId(nav.closest('.cms-draggable'))
                );

                modal.open({
                    title: that.options.addPluginHelpTitle,
                    html: pluginsCopy,
                    width: 530,
                    height: 400
                });
            });

            // prevent propagation
            nav.on([this.pointerUp, this.pointerDown, this.click, this.doubleClick].join(' '), function (e) {
                e.stopPropagation();
            });

            nav.siblings('.cms-quicksearch, .cms-submenu-dropdown')
                .on([this.pointerUp, this.click, this.doubleClick].join(' '), function (e) {
                e.stopPropagation();
            });
        },

        /**
         * Sets up event handlers for quicksearching in the plugin picker.
         *
         * @method _setupQuickSearch
         * @private
         * @param {jQuery} plugins plugins picker element
         */
        _setupQuickSearch: function _setupQuickSearch(plugins) {
            var that = this;
            var input = plugins.find('> .cms-quicksearch').find('input');

            var handler = CMS.API.Helpers.debounce(function () {
                var input = $(this);
                // have to always find the pluginsPicker in the handler
                // because of how we move things into/out of the modal
                var pluginsPicker = input.closest('.cms-plugin-picker');
                that._filterPluginsList(pluginsPicker, input);
            }, 100);

            input.on(this.keyUp, handler).on(this.keyUp, CMS.API.Helpers.debounce(function (e) {
                var input;
                var pluginsPicker;
                if (e.keyCode === CMS.KEYS.ENTER) {
                    input = $(this);
                    pluginsPicker = input.closest('.cms-plugin-picker');
                    pluginsPicker.find('.cms-submenu-item')
                        .not('.cms-submenu-item-title').filter(':visible').first().find('> a').focus()
                        .trigger('click');
                }
            }, 110));
        },

        /**
         * Sets up click handlers for various plugin/placeholder items.
         * Items can be anywhere in the plugin dragitem, not only in dropdown.
         *
         * @method _setupActions
         * @private
         * @param {jQuery} nav dropdown trigger with the items
         */
        _setupActions: function _setupActions(nav) {
            var that = this;
            var items = '.cms-submenu-edit, .cms-submenu-item a';
            nav.parent().find('.cms-submenu-edit').on(this.touchStart, function (e) {
                // required on some touch devices so
                // ui touch punch is not triggering mousemove
                // which in turn results in pep triggering pointercancel
                e.stopPropagation();
            });
            nav.parent().find(items).on(that.click, function (e) {
                e.preventDefault();
                e.stopPropagation();

                // show loader and make sure scroll doesn't jump
                CMS.API.Toolbar.showLoader();

                var el = $(this);
                CMS.Plugin._hideSettingsMenu(nav);

                // set switch for subnav entries
                switch (el.attr('data-rel')) {
                    case 'add':
                        that.addPlugin(
                            el.attr('href').replace('#', ''),
                            el.text(),
                            el.closest('.cms-plugin-picker').data('parentId')
                        );
                        break;
                    case 'ajax_add':
                        CMS.API.Toolbar.openAjax({
                            url: el.attr('href'),
                            post: JSON.stringify(el.data('post')),
                            text: el.data('text'),
                            callback: $.proxy(that.editPluginPostAjax, that),
                            onSuccess: el.data('on-success')
                        });
                        break;
                    case 'edit':
                        that.editPlugin(
                            that.options.urls.edit_plugin,
                            that.options.plugin_name,
                            that.options.plugin_breadcrumb
                        );
                        break;
                    case 'copy-lang':
                        that.copyPlugin(this.options, el.attr('data-language'));
                        break;
                    case 'copy':
                        if (!el.parent().hasClass('cms-submenu-item-disabled')) {
                            that.copyPlugin();
                        } else {
                            CMS.API.Toolbar.hideLoader();
                        }
                        break;
                    case 'cut':
                        that.cutPlugin();
                        break;
                    case 'paste':
                        if (!el.parent().hasClass('cms-submenu-item-disabled')) {
                            that.pastePlugin();
                        } else {
                            CMS.API.Toolbar.hideLoader();
                        }
                        break;
                    case 'delete':
                        that.deletePlugin(
                            that.options.urls.delete_plugin,
                            that.options.plugin_name,
                            that.options.plugin_breadcrumb
                        );
                        break;
                    default:
                        CMS.API.Toolbar.hideLoader();
                        CMS.API.Toolbar._delegate(el);
                }
            });
        },

        /**
         * Sets up keyboard traversing of plugin picker.
         *
         * @method _setupKeyboardTraversing
         * @private
         */
        _setupKeyboardTraversing: function _setupKeyboardTraversing() {
            var dropdown = $('.cms-modal-markup .cms-plugin-picker');
            if (!dropdown.length) {
                return;
            }
            // add key events
            doc.off(this.keyDown + '.traverse');
            doc.on(this.keyDown + '.traverse', function (e) {
                var anchors = dropdown.find('.cms-submenu-item:visible a');
                var index = anchors.index(anchors.filter(':focus'));

                // bind arrow down and tab keys
                if (e.keyCode === CMS.KEYS.DOWN || e.keyCode === CMS.KEYS.TAB) {
                    e.preventDefault();
                    if (index >= 0 && index < anchors.length - 1) {
                        anchors.eq(index + 1).focus();
                    } else {
                        anchors.eq(0).focus();
                    }
                }

                // bind arrow up and shift+tab keys
                if (e.keyCode === CMS.KEYS.UP || (e.keyCode === CMS.KEYS.TAB && e.shiftKey)) {
                    e.preventDefault();
                    if (anchors.is(':focus')) {
                        anchors.eq(index - 1).focus();
                    } else {
                        anchors.eq(anchors.length).focus();
                    }
                }
            });
        },

        /**
         * Opens the settings menu for a plugin.
         *
         * @method _showSettingsMenu
         * @private
         * @param {jQuery} nav trigger element
         */
        _showSettingsMenu: function (nav) {
            var dropdown = this.ui.dropdown;
            var parents = nav.parentsUntil('.cms-dragarea').last();

            nav.addClass('cms-btn-active');
            parents.addClass('cms-z-index-9999');

            // set visible states
            dropdown.show();

            // calculate dropdown positioning
            if (this.ui.window.height() + this.ui.window.scrollTop() -
                nav.offset().top - dropdown.height() <= 10 && nav.offset().top - dropdown.height() >= 0) {
                dropdown.removeClass('cms-submenu-dropdown-top').addClass('cms-submenu-dropdown-bottom');
            } else {
                dropdown.removeClass('cms-submenu-dropdown-bottom').addClass('cms-submenu-dropdown-top');
            }
        },

        /**
         * Filters given plugins list by a query.
         *
         * @method _filterPluginsList
         * @private
         * @param {jQuery} list plugins picker element
         * @param {jQuery} input input, which value to filter plugins with
         */
        _filterPluginsList: function _filterPluginsList(list, input) {
            var items = list.find('.cms-submenu-item');
            var titles = list.find('.cms-submenu-item-title');
            var query = input.val();

            // cancel if query is zero
            if (query === '') {
                items.add(titles).show();
                return false;
            }

            // loop through items and figure out if we need to hide items
            items.find('a, span').each(function (index, item) {
                item = $(item);
                var text = item.text().toLowerCase();
                var search = query.toLowerCase();

                (text.indexOf(search) >= 0) ? item.parent().show() : item.parent().hide();
            });

            // check if a title is matching
            titles.filter(':visible').each(function (index, item) {
                titles.hide();
                $(item).nextUntil('.cms-submenu-item-title').show();
            });

            // always display title of a category
            items.filter(':visible').each(function (index, item) {
                item = $(item);
                if (item.prev().hasClass('cms-submenu-item-title')) {
                    item.prev().show();
                } else {
                    item.prevUntil('.cms-submenu-item-title').last().prev().show();
                }
            });

            // if there is no element visible, show only first categoriy
            list.siblings('.cms-submenu-dropdown-children').show();
            if (items.add(titles).filter(':visible').length <= 0) {
                list.siblings('.cms-submenu-dropdown-children').hide();
            }
        },

        /**
         * Toggles collapsable item.
         *
         * @method _toggleCollapsable
         * @private
         * @param {jQuery} el element to toggle
         */
        _toggleCollapsable: function toggleCollapsable(el) {
            var that = this;
            var id = that._getId(el.parent());
            var draggable = this.ui.draggable;
            var items;

            var settings = CMS.settings;
            settings.states = settings.states || [];

            // collapsable function and save states
            if (el.hasClass('cms-dragitem-expanded')) {
                settings.states.splice($.inArray(id, settings.states), 1);
                el.removeClass('cms-dragitem-expanded').parent()
                    .find('> .cms-collapsable-container').addClass('cms-hidden');

                if (doc.data('expandmode')) {
                    items = draggable.find('.cms-draggable').find('.cms-dragitem-collapsable');
                    if (!items.length) {
                        return false;
                    }
                    items.each(function () {
                        var item = $(this);
                        if (item.hasClass('cms-dragitem-expanded')) {
                            that._toggleCollapsable(item);
                        }
                    });
                }

            } else {
                settings.states.push(id);
                el.addClass('cms-dragitem-expanded').parent()
                    .find('> .cms-collapsable-container').removeClass('cms-hidden');

                if (doc.data('expandmode')) {
                    items = draggable.find('.cms-draggable').find('.cms-dragitem-collapsable');
                    if (!items.length) {
                        return false;
                    }
                    items.each(function () {
                        var item = $(this);
                        if (!item.hasClass('cms-dragitem-expanded')) {
                            that._toggleCollapsable(item);
                        }
                    });
                }
            }

            // make sure structurboard gets updated after expanding
            this.ui.window.trigger('resize.sideframe');

            // save settings
            CMS.API.Toolbar.setSettings(settings);
        },

        /**
         * Sets up collabspable event handlers.
         *
         * @method _collapsables
         * @private
         */
        _collapsables: function () {
            // one time setup
            var that = this;
            this.ui.draggable = $('.cms-draggable-' + this.options.plugin_id);
            var dragitem = this.ui.draggable.find('> .cms-dragitem');

            // check which button should be shown for collapsemenu
            this.ui.container.each(function (index, item) {
                var els = $(item).find('.cms-dragitem-collapsable');
                var open = els.filter('.cms-dragitem-expanded');
                if (els.length === open.length && (els.length + open.length !== 0)) {
                    $(item).find('.cms-dragbar-title').addClass('cms-dragbar-title-expanded');
                }
            });
            // cancel here if its not a draggable
            if (!this.ui.draggable.length) {
                return false;
            }

            // attach events to draggable
            // debounce here required because on some devices click is not triggered,
            // so we consolidate latest click and touch event to run the collapse only once
            dragitem.find('> .cms-dragitem-text').on(
                this.touchEnd + ' ' + this.click,
                CMS.API.Helpers.debounce(function () {
                    if (!dragitem.hasClass('cms-dragitem-collapsable')) {
                        return;
                    }
                    that._toggleCollapsable(dragitem);
                }, 0)
            );

            // adds double click event
            this.ui.draggable.on(this.doubleClick, function (e) {
                e.stopPropagation();
                $('.cms-plugin-' + that._getId($(this))).trigger('dblclick.cms');
            });

            // only needs to be excecuted once
            if (CMS.Toolbar.ready) {
                return false;
            }

            // removing duplicate entries
            var sortedArr = CMS.settings.states.sort();
            var filteredArray = [];
            for (var i = 0; i < sortedArr.length; i++) {
                if (sortedArr[i] !== sortedArr[i + 1]) {
                    filteredArray.push(sortedArr[i]);
                }
            }
            CMS.settings.states = filteredArray;

            // loop through the items
            $.each(CMS.settings.states, function (index, id) {
                var el = $('.cms-draggable-' + id);
                // only add this class to elements which have a draggable area
                if (el.find('.cms-draggables').length) {
                    el.find('> .cms-collapsable-container').removeClass('cms-hidden');
                    el.find('> .cms-dragitem').addClass('cms-dragitem-expanded');
                }
            });

            // set global setup
            CMS.Toolbar.ready = true;
        },

        /**
         * Expands all the collapsables in the given placeholder.
         *
         * @method _expandAll
         * @private
         * @param {jQuery} el trigger element that is a child of a placeholder
         */
        _expandAll: function (el) {
            var that = this;
            var items = el.closest('.cms-dragarea').find('.cms-dragitem-collapsable');
            // cancel if there are no items
            if (!items.length) {
                return false;
            }
            items.each(function () {
                var item = $(this);
                if (!item.hasClass('cms-dragitem-expanded')) {
                    that._toggleCollapsable(item);
                }
            });

            el.addClass('cms-dragbar-title-expanded');

            var settings = CMS.settings;
            settings.dragbars = settings.dragbars || [];
            settings.dragbars.push(this.options.placeholder_id);
            CMS.API.Toolbar.setSettings(settings);
        },

        /**
         * Collapses all the collapsables in the given placeholder.
         *
         * @method _collapseAll
         * @private
         * @param {jQuery} el trigger element that is a child of a placeholder
         */
        _collapseAll: function (el) {
            var that = this;
            var items = el.closest('.cms-dragarea').find('.cms-dragitem-collapsable');
            items.each(function () {
                var item = $(this);
                if (item.hasClass('cms-dragitem-expanded')) {
                    that._toggleCollapsable(item);
                }
            });

            el.removeClass('cms-dragbar-title-expanded');

            var settings = CMS.settings;
            settings.dragbars = settings.dragbars || [];
            settings.dragbars.splice($.inArray(this.options.placeholder_id, settings.states), 1);
            CMS.API.Toolbar.setSettings(settings);
        },

        /**
         * Gets the id of the element, uses CMS.StructureBoard instance.
         *
         * @method _getId
         * @private
         * @param {jQuery} el element to get id from
         * @return {String}
         */
        _getId: function (el) {
            return CMS.API.StructureBoard.getId(el);
        },

        /**
         * Gets the ids of the list of elements, uses CMS.StructureBoard instance.
         *
         * @method _getIds
         * @private
         * @param {jQuery} els elements to get id from
         * @return {String[]}
         */
        _getIds: function (els) {
            return CMS.API.StructureBoard.getIds(els);
        },

        /**
         * Shows and immediately fades out a success notification (when
         * plugin was successfully moved.
         *
         * @method _showSuccess
         * @private
         * @param {jQuery} el draggable element
         */
        _showSuccess: function (el) {
            var tpl = $('<div class="cms-dragitem-success"></div>');
            el.addClass('cms-draggable-success').append(tpl);
            // start animation
            tpl.fadeOut(1000, function () {
                $(this).remove();
                el.removeClass('cms-draggable-success');
            });
            // make sure structurboard gets updated after success
            this.ui.window.trigger('resize.sideframe');
        }
    });

    /**
     * Hides the opened settings menu. By default looks for any open ones.
     *
     * @method _hideSettingsMenu
     * @static
     * @private
     * @param {jQuery} [nav] element representing the subnav trigger
     */
    CMS.Plugin._hideSettingsMenu = function (nav) {
        nav = nav || $('.cms-submenu-btn.cms-btn-active');
        if (!nav.length) {
            return;
        }
        nav.removeClass('cms-btn-active');

        // set correct active state
        nav.closest('.cms-draggable').data('active', false);
        $('.cms-z-index-9999').removeClass('cms-z-index-9999');

        nav.siblings('.cms-submenu-dropdown').hide();
        nav.siblings('.cms-quicksearch').hide();
        // reset search
        nav.siblings('.cms-quicksearch')
            .find('input')
            .val('')
            .trigger(this.keyUp).blur();

        // reset relativity
        $('.cms-dragbar').css('position', '');
    };

    /**
     * Initialises handlers that affect all plugins and don't make sense
     * in context of each own plugin instance, e.g. listening for a click on a document
     * to hide plugin settings menu should only be applied once, and not every time
     * CMS.Plugin is instantiated.
     *
     * @method _initializeGlobalHandlers
     * @static
     * @private
     */
    CMS.Plugin._initializeGlobalHandlers = function _initializeGlobalHandlers() {
        var timer;
        var clickCounter = 0;

        doc = $(document);
        clipboard = $('.cms-clipboard');
        clipboardDraggable = clipboard.find('.cms-draggable:first');
        clipboardPlugin = clipboard.find('.cms-plugin:first');

        doc.on('pointerup.cms.plugin', function () {
            // call it as a static method, because otherwise we trigger it the
            // amount of times CMS.Plugin is instantiated,
            // which does not make much sense.
            CMS.Plugin._hideSettingsMenu();
        }).on('keydown.cms.plugin', function (e) {
            if (e.keyCode === CMS.KEYS.SHIFT) {
                doc.data('expandmode', true);
            }
        }).on('keyup.cms.plugin', function (e) {
            if (e.keyCode === CMS.KEYS.SHIFT) {
                doc.data('expandmode', false);
            }
        }).on('click.cms.plugin', '.cms-plugin a, a:has(.cms-plugin)', function (e) {
            // prevents single click from messing up the edit call
            // don't go to the link if there is custom js attached to it
            // or if it's clicked along with shift, ctrl, cmd
            if (e.shiftKey || e.ctrlKey || e.metaKey || e.isDefaultPrevented()) {
                return;
            }
            e.preventDefault();
            if (++clickCounter === 1) {
                timer = setTimeout(function () {
                    var anchor = $(e.currentTarget);
                    clickCounter = 0;
                    // make sure that the target attribute is honoured on links
                    window.open(anchor.attr('href'), anchor.attr('target') || '_self');
                }, 300);
            } else {
                clearTimeout(timer);
                clickCounter = 0;
            }
        });
    };

    // shorthand for jQuery(document).ready();
    $(CMS.Plugin._initializeGlobalHandlers);

})(CMS.$);

//##############################################################################
// STRUCTUREBOARD
/**
 * @module CMS
 */
/* istanbul ignore next */
var CMS = window.CMS || {};

(function ($) {
    'use strict';

    var placeholders;

    // TODO make these static methods on CMS.StructureBoard
    function actualizeEmptyPlaceholders() {
        placeholders.each(function () {
            var placeholder = $(this);
            var copyAll = placeholder.find('.cms-dragbar .cms-submenu-item:has(a[data-rel="copy"]):first');
            if (placeholder
                .find('> .cms-draggables')
                .children('.cms-draggable:not(.cms-draggable-is-dragging)').length) {
                placeholder.removeClass('cms-dragarea-empty');
                copyAll.removeClass('cms-submenu-item-disabled');
            } else {
                placeholder.addClass('cms-dragarea-empty');
                copyAll.addClass('cms-submenu-item-disabled');

            }
        });
    }

    function actualizePluginsCollapsibleStatus(els) {
        els.each(function () {
            var childList = $(this);
            var pluginDragItem = childList.closest('.cms-draggable').find('> .cms-dragitem');

            if (childList.children().length) {
                pluginDragItem.addClass('cms-dragitem-collapsable cms-dragitem-expanded');
            } else {
                pluginDragItem.removeClass('cms-dragitem-collapsable');
            }
        });
    }

    /**
     * Handles drag & drop, mode switching and collapsables.
     *
     * @class StructureBoard
     * @namespace CMS
     * @uses CMS.API.Helpers
     */
    CMS.StructureBoard = new CMS.Class({

        implement: [CMS.API.Helpers],

        initialize: function () {
            // elements
            this._setupUI();

            // states
            this.click = 'click.cms';
            this.pointerUp = 'pointerup.cms';
            this.state = false;
            this.dragging = false;

            // setup initial stuff
            this._setup();

            this._setupModeSwitcher();
            actualizeEmptyPlaceholders();
        },

        /**
         * Stores all jQuery references within `this.ui`.
         *
         * @method _setupUI
         * @private
         */
        _setupUI: function setupUI() {
            var container = $('.cms-structure');
            var toolbar = $('.cms-toolbar');
            this.ui = {
                container: container,
                content: $('.cms-structure-content'),
                doc: $(document),
                window: $(window),
                html: $('html'),
                toolbar: toolbar,
                sortables: $('.cms-draggables'), // global scope to include clipboard
                plugins: $('.cms-plugin'),
                render_model: $('.cms-render-model'),
                placeholders: $('.cms-placeholder'),
                dragitems: $('.cms-draggable'),
                dragareas: $('.cms-dragarea'),
                toolbarModeSwitcher: toolbar.find('.cms-toolbar-item-cms-mode-switcher'),
                toolbarModeLinks: toolbar.find('.cms-toolbar-item-cms-mode-switcher a'),
                toolbarTrigger: $('.cms-toolbar-trigger')
            };
        },

        /**
         * Initial setup (and early bail if specific
         * elements do not exist).
         *
         * @method _setup
         * @private
         */
        _setup: function () {
            var that = this;
            // cancel if there are no dragareas
            if (!this.ui.dragareas.length) {
                return false;
            }

            // cancel if there is no structure / content switcher
            if (!this.ui.toolbarModeSwitcher.length) {
                return false;
            }

            // setup toolbar mode
            // FIXME this setTimeout is needed because
            // plugins are initialized after all the scripts are processed
            // which should be fixed btw. _resizeBoard wants plugins to be initialized,
            // otherwise throws errors
            setTimeout(function () {
                if (CMS.settings.mode === 'structure') {
                    that.show(true);
                } else {
                    // triggering hide here to switch proper classnames on switcher
                    that.hide(true);
                }
            }, 0);

            // check if modes should be visible
            if (this.ui.placeholders.length) {
                this.ui.toolbarModeSwitcher.show();
            }

            // add drag & drop functionality
            this._drag();
        },

        /**
         * Sets up events handlers for switching
         * structureboard modes.
         *
         * @method _setupModeSwitcher
         * @private
         */
        _setupModeSwitcher: function () {
            var that = this;
            var modes = that.ui.toolbarModeLinks;

            // show edit mode
            modes.eq(1).on(that.click + ' ' + that.pointerUp, function (e) {
                e.preventDefault();
                // cancel if already active
                if (CMS.settings.mode === 'edit') {
                    return false;
                }
                // otherwise hide
                that.hide();
            });
            // show structure mode
            modes.eq(0).on(that.click + ' ' + that.pointerUp, function (e) {
                e.preventDefault();
                // cancel if already active
                if (CMS.settings.mode === 'structure') {
                    return false;
                }
                // otherwise show
                that.show();
            });

            // keyboard handling
            // only if there is a structure / content switcher
            if (that.ui.toolbarModeSwitcher.length) {
                that.ui.doc.on('keydown', function (e) {
                    // check if we have an important focus
                    var haveFocusedField = document.activeElement !== document.body;
                    if (e.keyCode === CMS.KEYS.SPACE && !haveFocusedField) {
                        e.preventDefault();
                        if (CMS.settings.mode === 'structure') {
                            that.hide();
                        } else if (CMS.settings.mode === 'edit') {
                            that.show();
                        }
                    }
                });
            }
        },

        /**
         * Shows the structureboard. (Structure mode)
         *
         * @method show
         * @public
         * @param {Boolean} init true if this is first initialization
         */
        show: function (init) {
            // cancel show if live modus is active
            if (CMS.config.mode === 'live') {
                return false;
            }

            // in order to get consistent positioning
            // of the toolbar we have to know if the page
            // had the scrollbar nad if it had - we adjust
            // the toolbar positioning
            var width = this.ui.toolbar.width();
            var scrollBarWidth = this.ui.window[0].innerWidth - width;
            if (scrollBarWidth) {
                this.ui.toolbar.css('right', scrollBarWidth);
                this.ui.toolbarTrigger.css('right', scrollBarWidth);
            }

            // set active item
            var modes = this.ui.toolbarModeLinks;
            modes.removeClass('cms-btn-active').eq(0).addClass('cms-btn-active');
            this.ui.html.removeClass('cms-structure-mode-content')
                .addClass('cms-structure-mode-structure');

            // apply new settings
            CMS.settings.mode = 'structure';
            if (!init) {
                CMS.settings = this.setSettings(CMS.settings);
            }

            // ensure all elements are visible
            this.ui.dragareas.show();

            // show canvas
            this._showBoard();
        },

        /**
         * Hides the structureboard. (Content mode)
         *
         * @method hide
         * @param {Boolean} init true if this is first initialization
         */
        hide: function (init) {
            // cancel show if live modus is active
            if (CMS.config.mode === 'live') {
                return false;
            }

            // reset toolbar positioning
            this.ui.toolbar.css('right', '');
            this.ui.toolbarTrigger.css('right', '');

            // set active item
            var modes = this.ui.toolbarModeLinks;
            modes.removeClass('cms-btn-active').eq(1).addClass('cms-btn-active');
            this.ui.html.removeClass('cms-structure-mode-structure')
                .addClass('cms-structure-mode-content');

            // hide clipboard if in edit mode
            this.ui.container.find('.cms-clipboard').hide();

            CMS.settings.mode = 'edit';
            if (!init) {
                CMS.settings = this.setSettings(CMS.settings);
            }

            // hide canvas
            this._hideBoard();
        },

        /**
         * Gets the id of the element.
         * TODO: relies on cms-{item}-{id} to always be second in a string of classes
         *
         * @method getId
         * @param {jQuery} el element to get id from
         * @return {String}
         */
        getId: function (el) {
            // cancel if no element is defined
            if (el === undefined || el === null || el.length <= 0) {
                return false;
            }

            var id = null;
            var cls = el.attr('class').split(' ')[1];

            if (el.hasClass('cms-plugin')) {
                id = cls.replace('cms-plugin-', '');
            } else if (el.hasClass('cms-draggable')) {
                id = cls.replace('cms-draggable-', '');
            } else if (el.hasClass('cms-placeholder')) {
                id = cls.replace('cms-placeholder-', '');
            } else if (el.hasClass('cms-dragbar')) {
                id = cls.replace('cms-dragbar-', '');
            } else if (el.hasClass('cms-dragarea')) {
                id = cls.replace('cms-dragarea-', '');
            }

            return id;
        },

        /**
         * Gets the ids of the list of  elements.
         *
         * @method getIds
         * @param {jQuery} el elements to get id from
         * @return {String[]}
         */
        getIds: function (els) {
            var that = this;
            var array = [];
            els.each(function () {
                array.push(that.getId($(this)));
            });
            return array;
        },

        /**
         * Actually shows the board canvas.
         *
         * @method _showBoard
         * @private
         */
        _showBoard: function () {
            var that = this;

            // show container
            this.ui.container.show();
            this.ui.dragareas.css('opacity', 1);

            this.ui.plugins.not(this.ui.render_model).hide();
            this.ui.placeholders.show();

            // attach event
            if (CMS.config.simpleStructureBoard) {
                var content = this.ui.content;
                var areas = content.find('.cms-dragarea');
                // set correct css attributes for the new mode
                content.addClass('cms-structure-content-simple');
                areas.addClass('cms-dragarea-simple');
                // lets reorder placeholders
                areas.each(function (index, item) {
                    if ($(item).hasClass('cms-dragarea-static')) {
                        content.append(item);
                    }
                });
                // now lets get the first instance and add some padding
                areas.filter('.cms-dragarea-static').eq(0).css('margin-top', '50px');
            } else {
                this.ui.container.addClass('cms-structure-dynamic');
                this.ui.window.on('resize.sideframe', function () {
                    that._resizeBoard();
                }).trigger('resize.sideframe');
            }
        },

        /**
         * Hides the board canvas.
         *
         * @method _hideBoard
         * @private
         */
        _hideBoard: function () {
            // hide elements
            this.ui.container.hide();
            this.ui.plugins.show();
            this.ui.placeholders.hide();

            // detach event
            this.ui.window.off('resize.sideframe');

            this.ui.window.trigger('structureboard_hidden.sideframe');

            // this is sometimes required for user-side scripts to
            // render dynamic elements on the page correctly.
            // e.g. you have a parallax script that calculates position
            // of elements based on document height. but if the page is
            // loaded with structureboard active - the document height
            // would be same as screen height, which is likely incorrect,
            // so triggering resize on window would force user scripts
            // to recalculate whatever is required there
            this.ui.window.trigger('resize');

            if (!CMS.config.simpleStructureBoard) {
                this.ui.container.height(this.ui.doc.outerHeight());
            }
        },

        /**
         * Resizes the placeholder to fit their placement
         * and the structure board.
         *
         * @method _resizeBoard
         * @private
         * @deprecated as of CMS 3.2
         */
        _resizeBoard: function () {
            // calculate placeholder position
            var id = null;
            var area = null;
            var min = null;
            var areaParentOffset = null;
            var that = this;

            // have to delay since height changes when toggling modes
            setTimeout(function () {
                that.ui.container.height(that.ui.doc.outerHeight());
            }, 0);

            // start calculating
            this.ui.placeholders.each(function (index, item) {
                item = $(item);
                id = item.data('settings').placeholder_id;
                area = $('.cms-dragarea-' + id);
                // to calculate the correct offset, we need to set the
                // placeholders correct heights and than set the according position
                item.height(area.outerHeight(true));
                // set min width
                min = (item.width()) ? 0 : 150;
                // as area is "css positioned" and jquery offset function is relative to the
                // document (not the first relative/absolute parent) we need to substract
                // first relative/absolute parent offset.
                areaParentOffset = $(area).offsetParent().offset();
                area.css({
                    top: item.offset().top - areaParentOffset.top - 5,
                    left: item.offset().left - areaParentOffset.left - min,
                    width: item.width() + min
                });
            });
        },

        /**
         * Sets up all the sortables.
         *
         * @method _drag
         * @private
         */
        _drag: function () {
            var that = this;
            var originalPluginContainer;

            this.ui.sortables.nestedSortable({
                items: '> .cms-draggable:not(.cms-draggable-disabled .cms-draggable)',
                placeholder: 'cms-droppable',
                connectWith: '.cms-draggables:not(.cms-hidden)',
                tolerance: 'intersect',
                toleranceElement: '> div',
                dropOnEmpty: true,
                // cloning huge structure is a performance loss compared to cloning just a dragitem
                helper: function createHelper(e, item) {
                    var clone = item.find('> .cms-dragitem').clone();
                    clone.wrap('<div class="' + item[0].className + '"></div>');
                    return clone.parent();
                },
                appendTo: '.cms-structure-content',
                // appendTo: '.cms',
                cursor: 'move',
                cursorAt: { left: -15, top: -15 },
                opacity: 1,
                zIndex: 9999999,
                delay: 100,
                tabSize: 15,
                // nestedSortable
                listType: 'div.cms-draggables',
                doNotClear: true,
                disableNestingClass: 'cms-draggable-disabled',
                errorClass: 'cms-draggable-disallowed',
                scrollSpeed: 15,
                scrollSensitivity: that.ui.window.height() * 0.2,
                start: function (e, ui) {
                    that.ui.content.attr('data-touch-action', 'none');

                    originalPluginContainer = ui.item.closest('.cms-draggables');
                    that.dragging = true;
                    // show empty
                    actualizeEmptyPlaceholders();
                    // ensure all menus are closed
                    CMS.Plugin._hideSettingsMenu();
                    // keep in mind that caching cms-draggables query only works
                    // as long as we don't create them on the fly
                    that.ui.sortables.each(function () {
                        var element = $(this);
                        if (element.children().length === 0) {
                            element.removeClass('cms-hidden');
                        }
                    });

                    // fixes placeholder height
                    ui.item.addClass('cms-is-dragging');
                    ui.helper.addClass('cms-draggable-is-dragging');
                    if (ui.item.find('> .cms-draggables').children().length) {
                        ui.helper.addClass('cms-draggable-stack');
                    }

                    // attach escape event to cancel dragging
                    that.ui.doc.on('keyup.cms.interrupt', function (e, cancel) {
                        if (e.keyCode === CMS.KEYS.ESC && that.dragging || cancel) {
                            that.state = false;
                            $.ui.sortable.prototype._mouseStop();
                            that.ui.sortables.trigger('mouseup');
                        }
                    });
                },

                beforeStop: function (event, ui) {
                    that.dragging = false;
                    ui.item.removeClass('cms-is-dragging cms-draggable-stack');
                    that.ui.doc.off('keyup.cms.interrupt');
                    that.ui.content.attr('data-touch-action', 'pan-y');
                },

                update: function (event, ui) {
                    // cancel if isAllowed returns false
                    if (!that.state) {
                        return false;
                    }

                    var newPluginContainer = ui.item.closest('.cms-draggables');
                    if (!originalPluginContainer.is(newPluginContainer)) {
                        actualizePluginsCollapsibleStatus(newPluginContainer.add(originalPluginContainer));
                    } else {
                        // if we moved inside same container,
                        // but event is fired on a parent, discard update
                        if (!newPluginContainer.is(this)) {
                            return false;
                        }
                    }

                    // we pass the id to the updater which checks within the backend the correct place
                    var id = that.getId(ui.item);
                    var plugin = $('.cms-plugin-' + id);

                    // check if we copy/paste a plugin or not
                    if (plugin.closest('.cms-clipboard').length) {
                        plugin.trigger('cms.plugin.update');
                    } else {
                        plugin.trigger('cms.plugins.update');
                    }

                    // reset placeholder without entries
                    that.ui.sortables.each(function () {
                        var element = $(this);
                        if (element.children().length === 0) {
                            element.addClass('cms-hidden');
                        }
                    });

                    actualizeEmptyPlaceholders();
                },
                isAllowed: function (placeholder, placeholderParent, originalItem) {
                    // cancel if action is executed
                    if (CMS.API.locked) {
                        return false;
                    }
                    // getting restriction array
                    var bounds = [];
                    var immediateParentType;
                    // save original state events
                    var original = $('.cms-plugin-' + that.getId(originalItem));
                    // cancel if item has no settings
                    if (original.length === 0 || original.data('settings') === null) {
                        return false;
                    }
                    var parent_bounds = $.grep(original.data('settings').plugin_parent_restriction, function (r) {
                        // special case when PlaceholderPlugin has a parent restriction named "0"
                        return r !== '0';
                    });
                    var type = original.data('settings').plugin_type;
                    // prepare variables for bound
                    var holderId = that.getId(placeholder.closest('.cms-dragarea'));
                    var holder = $('.cms-placeholder-' + holderId);
                    var plugin;
                    if (placeholderParent && placeholderParent.length) {
                        // placeholderParent is always latest, it maybe that
                        // isAllowed is called _before_ placeholder is moved to a child plugin
                        plugin = $('.cms-plugin-' + that.getId(placeholderParent.closest('.cms-draggable')));
                    } else {
                        plugin = $('.cms-plugin-' + that.getId(placeholder.closest('.cms-draggable')));
                    }

                    // now set the correct bounds
                    if (holder.length) {
                        bounds = holder.data('settings').plugin_restriction;
                        immediateParentType = holder.data('settings').plugin_type;
                    }
                    if (plugin.length) {
                        bounds = plugin.data('settings').plugin_restriction;
                        immediateParentType = plugin.data('settings').plugin_type;
                    }

                    // if parent has class disabled, dissalow drop
                    if (placeholder.parent().hasClass('cms-draggable-disabled')) {
                        return false;
                    }

                    // if restrictions is still empty, proceed
                    that.state = (!bounds.length || $.inArray(type, bounds) !== -1) ? true : false;

                    // check if we have a parent restriction
                    if (parent_bounds.length) {
                        that.state = ($.inArray(immediateParentType, parent_bounds) !== -1) ? true : false;
                    }

                    return that.state;
                }
            }).on('cms.update', actualizeEmptyPlaceholders);
        }

    });

    /**
     * Similar to CMS.Plugin populates globally required
     * variables, that only need querying once, e.g. placeholders.
     *
     * @method _initializeGlobalHandlers
     * @static
     * @private
     */
    CMS.StructureBoard._initializeGlobalHandlers = function _initializeGlobalHandlers() {
        placeholders = $('.cms-dragarea:not(.cms-clipboard-containers)');
    };

    // shorthand for jQuery(document).ready();
    $(CMS.StructureBoard._initializeGlobalHandlers);

})(CMS.$);

/*
 * Copyright https://github.com/divio/django-cms
 */

// #############################################################################
// NAMESPACES
/**
 * @module CMS
 */
/* istanbul ignore next */
var CMS = window.CMS || {};

// #############################################################################
// Toolbar
(function ($) {
    'use strict';

    /**
     * Responsible for creating usable navigation for narrow screens.
     *
     * @class Navigation
     * @namespace CMS
     * @uses CMS.API.Helpers
     */
    CMS.Navigation = new CMS.Class({

        implement: [CMS.API.Helpers],

        initialize: function initialize() {
            this._setupUI();
            this._getWidths();

            /**
             * The zero based index of the right-most visible menu item of the left toolbar part.
             *
             * @property rightMostItemIndex {Number}
             */
            this.rightMostItemIndex = this.items.left.length - 1;

            /**
             * The zero based index of the left-most visible item of the right toolbar part.
             *
             * @property leftMostItemIndex {Number}
             */
            this.leftMostItemIndex = 0;

            this.resize = 'resize.cms.navigation';
            this.load = 'load.cms.navigation';
            this.orientationChange = 'orientationchange.cms.navigation';

            this._events();
        },

        /**
         * Cache UI jquery objects.
         *
         * @method _setupUI
         * @private
         */
        _setupUI: function _setupUI() {
            var container = $('.cms');
            var trigger = container.find('.cms-toolbar-more');
            this.ui = {
                window: $(window),
                toolbarLeftPart: container.find('.cms-toolbar-left'),
                toolbarRightPart: container.find('.cms-toolbar-right'),
                trigger: trigger,
                dropdown: trigger.find('> ul'),
                toolbarTrigger: container.find('.cms-toolbar-trigger'),
                logo: container.find('.cms-toolbar-item-logo')
            };
        },

        /**
         * Setup resize handler to construct the dropdown.
         *
         * @method _events
         * @private
         */
        _events: function _events() {
            this.ui.window.on(
                [this.resize, this.load, this.orientationChange].join(' '),
                CMS.API.Helpers.throttle(
                    this._handleResize.bind(this), 50
                )
            );
        },

        /**
         * Calculates all the movable menu items widths.
         *
         * @method _getWidths
         * @private
         */
        _getWidths: function _getWidths() {
            var that = this;
            that.items = {
                left: [],
                leftTotalWidth: 0,
                right: [],
                rightTotalWidth: 0,
                moreButtonWidth: 0
            };
            var leftItems = that.ui.toolbarLeftPart
                .find('.cms-toolbar-item-navigation > li:not(.cms-toolbar-more)');
            var rightItems = that.ui.toolbarRightPart.find('> .cms-toolbar-item');

            var getSize = function getSize(el, store) {
                var element = $(el);
                var width = $(el).outerWidth(true);

                store.push({
                    element: element,
                    width: width
                });
            };
            var sumWidths = function sumWidths(sum, item) {
                return sum + item.width;
            };

            leftItems.each(function () {
                getSize(this, that.items.left);
            });

            rightItems.each(function () {
                getSize(this, that.items.right);
            });

            that.items.leftTotalWidth = that.items.left.reduce(sumWidths, 0);
            that.items.rightTotalWidth = that.items.right.reduce(sumWidths, 0);
            that.items.moreButtonWidth = that.ui.trigger.outerWidth();
        },

        /**
         * Calculates available width based on the state of the page.
         *
         * @method _calculateAvailableWidth
         * @private
         * @return {Number} available width in px
         */
        _calculateAvailableWidth: function _calculateAvailableWidth() {
            var fullWidth = this.ui.window.width();
            var reduce = parseInt(this.ui.toolbarRightPart.css('padding-right'), 10) + this.ui.logo.offset().left +
                this.ui.logo.outerWidth(true) + 15;

            return fullWidth - reduce;
        },

        /**
         * Shows the dropdown.
         *
         * @method _showDropdown
         * @private
         */
        _showDropdown: function _showDropdown() {
            this.ui.trigger.css('display', 'list-item');
        },

        /**
         * Hides the dropdown.
         *
         * @method _hideDropdown
         * @private
         */
        _hideDropdown: function _hideDropdown() {
            this.ui.trigger.css('display', 'none');
        },

        /**
         * Figures out if we need to show/hide/modify the dropdown.
         *
         * @method _handleResize
         * @private
         */
        _handleResize: function _handleResize() {
            var remainingWidth;
            var availableWidth = this._calculateAvailableWidth();

            if (availableWidth > this.items.leftTotalWidth + this.items.rightTotalWidth) {
                this._showAll();
            } else {
                // first handle the left part
                remainingWidth = availableWidth - this.items.moreButtonWidth - this.items.rightTotalWidth;

                // Figure out how many nav menu items fit into the available space.
                var newRightMostItemIndex = -1;
                while (remainingWidth - this.items.left[newRightMostItemIndex + 1].width >= 0) {
                    remainingWidth -= this.items.left[newRightMostItemIndex + 1].width;
                    newRightMostItemIndex++;
                }

                if (newRightMostItemIndex < this.rightMostItemIndex) {
                    this._moveToDropdown(this.rightMostItemIndex - newRightMostItemIndex);
                } else if (this.rightMostItemIndex < newRightMostItemIndex) {
                    this._moveOutOfDropdown(newRightMostItemIndex - this.rightMostItemIndex);
                }

                this._showDropdown();

                // if we do not have any width left and all the items from the left part
                // are already in the dropdown - start with the right part
                if (remainingWidth < 0 && this.rightMostItemIndex === -1) {
                    remainingWidth += this.items.rightTotalWidth;

                    var newLeftMostItemIndex = this.items.right.length;
                    // istanbul ignore if: this moves items to the right one by one
                    if (false) {
                        // if you want to move items from the right one by one
                        while (remainingWidth - this.items.right[newLeftMostItemIndex - 1].width > 0) {
                            remainingWidth -= this.items.right[newLeftMostItemIndex - 1].width;
                            newLeftMostItemIndex--;
                        }

                        if (newLeftMostItemIndex > this.leftMostItemIndex) {
                            this._moveToDropdown(newLeftMostItemIndex - this.leftMostItemIndex, 'right');
                        } else if (newLeftMostItemIndex < this.leftMostItemIndex) {
                            this._moveOutOfDropdown(this.leftMostItemIndex - newLeftMostItemIndex, 'right');
                        }
                    } else {
                        // but for now we want to move all of them immediately
                        this._moveToDropdown(newLeftMostItemIndex - this.leftMostItemIndex, 'right');
                        this.ui.dropdown.addClass('cms-more-dropdown-full');
                    }
                } else {
                    this._showAllRight();
                    this.ui.dropdown.removeClass('cms-more-dropdown-full');
                }
            }
        },

        /**
         * Hides and empties dropdown.
         *
         * @method _showAll
         * @private
         */
        _showAll: function _showAll() {
            this._showAllLeft();
            this._showAllRight();
            this._hideDropdown();
        },

        /**
         * Show all items in the left part of the toolbar.
         *
         * @method _showAllLeft
         * @private
         */
        _showAllLeft: function _showAllLeft() {
            this._moveOutOfDropdown((this.items.left.length - 1) - this.rightMostItemIndex);
        },

        /**
         * Show all items in the right part of the toolbar.
         *
         * @method _showAllRight
         * @private
         */
        _showAllRight: function _showAllRight() {
            this._moveOutOfDropdown(this.leftMostItemIndex, 'right');
        },

        /**
         * Moves items into the dropdown, reducing menu right-to-left in case it's a left part of toolbar
         * and left-to-right if it's right one.
         *
         * @method _moveToDropdown
         * @private
         * @param {Number} numberOfItems how many items to move to dropdown
         * @param {String} part from which part to move to dropdown (defaults to left)
         */
        _moveToDropdown: function _moveToDropdown(numberOfItems, part) {
            if (numberOfItems <= 0) {
                return;
            }

            var item;
            var leftMostIndexToMove;
            var rightMostIndexToMove;
            var i;

            if (part === 'right') {
                // Move items (working left-to-right) from the toolbar left part to the more menu.
                leftMostIndexToMove = this.leftMostItemIndex;
                rightMostIndexToMove = this.leftMostItemIndex + numberOfItems - 1;
                for (i = leftMostIndexToMove; i <= rightMostIndexToMove; i++) {
                    item = this.items.right[i].element;

                    this.ui.dropdown.prepend(item.wrap('<li class="cms-more-buttons"></li>').parent());
                }

                this.leftMostItemIndex += numberOfItems;
            } else {
                // Move items (working right-to-left) from the toolbar left part to the more menu.
                rightMostIndexToMove = this.rightMostItemIndex;
                leftMostIndexToMove = this.rightMostItemIndex - numberOfItems + 1;
                for (i = rightMostIndexToMove; i >= leftMostIndexToMove; i--) {
                    item = this.items.left[i].element;

                    this.ui.dropdown.prepend(item);
                    if (item.find('> ul').children().length) {
                        item.addClass('cms-toolbar-item-navigation-children');
                    }
                }

                this.rightMostItemIndex -= numberOfItems;
            }
        },

        /**
         * Moves items out of the dropdown.
         *
         * @method _moveOutOfDropdown
         * @private
         * @param {Number} numberOfItems how many items to move out of the dropdown
         * @param {String} part to which part to move out of dropdown (defaults to left)
         */
        _moveOutOfDropdown: function _moveOutOfDropdown(numberOfItems, part) {
            if (numberOfItems <= 0) {
                return;
            }

            var i;
            var item;
            var leftMostIndexToMove;
            var rightMostIndexToMove;

            if (part === 'right') {
                // Move items (working bottom-to-top) from the more menu into the toolbar right part.
                rightMostIndexToMove = this.leftMostItemIndex - 1;
                leftMostIndexToMove = this.leftMostItemIndex - numberOfItems;

                for (i = rightMostIndexToMove; i >= leftMostIndexToMove; i--) {
                    item = this.items.right[i].element;
                    item.unwrap('<li></li>');

                    item.prependTo(this.ui.toolbarRightPart);
                }

                this.leftMostItemIndex -= numberOfItems;
            } else {
                // Move items (working top-to-bottom) from the more menu into the toolbar left part.
                leftMostIndexToMove = this.rightMostItemIndex + 1;
                rightMostIndexToMove = this.rightMostItemIndex + numberOfItems;

                for (i = leftMostIndexToMove; i <= rightMostIndexToMove; i++) {
                    item = this.items.left[i].element;

                    item.insertBefore(this.ui.trigger);
                    item.removeClass('cms-toolbar-item-navigation-children');
                    item.find('> ul').removeAttr('style');
                }

                this.rightMostItemIndex += numberOfItems;
            }
        }

    });
})(CMS.$);

/*
 * Copyright https://github.com/divio/django-cms
 */

// #############################################################################
// NAMESPACES
/**
 * @module CMS
 */
/* istanbul ignore next */
var CMS = window.CMS || {};

// #############################################################################
// Toolbar
(function ($) {
    'use strict';

    /**
     * The toolbar is the generic element which holds various components
     * together and provides several commonly used API methods such as
     * show/hide, message display or loader indication.
     *
     * @class Toolbar
     * @namespace CMS
     * @uses CMS.API.Helpers
     */
    CMS.Toolbar = new CMS.Class({

        implement: [CMS.API.Helpers],

        options: {
            toolbarDuration: 200
        },

        initialize: function initialize(options) {
            this.options = $.extend(true, {}, this.options, options);

            // elements
            this._setupUI();

            /**
             * @property {CMS.Navigation} navigation
             */
            this.navigation = new CMS.Navigation();

            /**
             * @property {Object} _position
             * @property {Number} _position.top current position of the toolbar
             * @property {Number} _position.top position when toolbar became non-sticky
             * @property {Boolean} _position.isSticky is toolbar sticky?
             * @see _handleLongMenus
             * @private
             */
            this._position = {
                top: 0,
                stickyTop: 0,
                isSticky: true
            };

            // states
            this.click = 'click.cms.toolbar';
            this.touchStart = 'touchstart.cms.toolbar';
            this.pointerUp = 'pointerup.cms.toolbar';
            this.pointerOverOut = 'pointerover.cms.toolbar pointerout.cms.toolbar';
            this.pointerLeave = 'pointerleave.csm.toolbar';
            this.mouseEnter = 'mouseenter.cms.toolbar';
            this.mouseLeave = 'mouseleave.cms.toolbar';
            this.resize = 'resize.cms.toolbar';
            this.scroll = 'scroll.cms.toolbar';
            this.key = 'keydown.cms.toolbar keyup.cms.toolbar';

            // istanbul ignore next: function is always reassigned
            this.timer = function () {};
            this.lockToolbar = false;

            // setup initial stuff
            if (!this.ui.toolbar.data('ready')) {
                this._events();
            }

            // FIXME the general initialization is handled within the toolbar
            // rather than a separate cms.setup or similar. Yet other components
            // are loaded after the toolbar so it can create a clash where
            // CMS.API is not ready. This is a workaround until a proper fix
            // will be released in 3.x
            var that = this;
            setTimeout(function () {
                that._initialStates();
            }, 200);

            // set a state to determine if we need to reinitialize this._events();
            this.ui.toolbar.data('ready', true);
        },

        /**
         * Stores all jQuery references within `this.ui`.
         *
         * @method _setupUI
         * @private
         */
        _setupUI: function _setupUI() {
            var container = $('.cms');
            this.ui = {
                container: container,
                body: $('html'),
                document: $(document),
                window: $(window),
                toolbar: container.find('.cms-toolbar'),
                toolbarTrigger: container.find('.cms-toolbar-trigger'),
                navigations: container.find('.cms-toolbar-item-navigation'),
                buttons: container.find('.cms-toolbar-item-buttons'),
                messages: container.find('.cms-messages'),
                screenBlock: container.find('.cms-screenblock'),
                structureBoard: container.find('.cms-structure')
            };
        },

        /**
         * Sets up all the event handlers, such as closing and resizing.
         *
         * @method _events
         * @private
         */
        _events: function _events() {
            var that = this;

            // attach event to the trigger handler
            this.ui.toolbarTrigger.on(this.pointerUp, function (e) {
                e.preventDefault();
                that.toggle();
                that.ui.document.trigger(that.click);
            }).on(this.click, function (e) {
                e.preventDefault();
            });

            // attach event to the navigation elements
            this.ui.navigations.each(function () {
                var navigation = $(this);
                var lists = navigation.find('li');
                var root = 'cms-toolbar-item-navigation';
                var hover = 'cms-toolbar-item-navigation-hover';
                var disabled = 'cms-toolbar-item-navigation-disabled';
                var children = 'cms-toolbar-item-navigation-children';
                var isTouchingTopLevelMenu = false;
                var open = false;
                var cmdPressed = false;

                // removes classes and events
                function reset() {
                    open = false;
                    cmdPressed = false;
                    lists.removeClass(hover);
                    lists.find('ul ul').hide();
                    navigation.find('> li').off(that.mouseEnter);
                    that.ui.document.off(that.click);
                    that.ui.toolbar.off(that.click, reset);
                    that.ui.structureBoard.off(that.click);
                    that.ui.window.off(that.resize + '.menu.reset');
                    that._handleLongMenus();
                }

                // remove events from first level
                navigation.find('a').on(that.click + ' ' + that.key, function (e) {
                    var el = $(this);
                    // we need to restore the default behaviour once a user
                    // presses ctrl/cmd and clicks on the entry. In this
                    // case a new tab should open. First we determine if
                    // ctrl/cmd is pressed:
                    if (
                        e.keyCode === CMS.KEYS.CMD_LEFT ||
                        e.keyCode === CMS.KEYS.CMD_RIGHT ||
                        e.keyCode === CMS.KEYS.CMD_FIREFOX ||
                        e.keyCode === CMS.KEYS.SHIFT ||
                        e.keyCode === CMS.KEYS.CTRL
                    ) {
                        cmdPressed = true;
                    }
                    if (e.type === 'keyup') {
                        cmdPressed = false;
                    }

                    if (el.attr('href') !== '' &&
                        el.attr('href') !== '#' &&
                        !el.parent().hasClass(disabled)) {

                        if (cmdPressed) {
                            // control the behaviour when ctrl/cmd is pressed
                            CMS.API.Helpers._getWindow().open(el.attr('href'), '_blank');
                        } else {
                            // otherwise delegate as usual
                            that._delegate($(this));
                        }

                        reset();
                        return false;
                    }

                }).on(that.touchStart, function () {
                    isTouchingTopLevelMenu = true;
                });

                // handle click states
                lists.on(that.click, function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    var el = $(this);

                    // close navigation once it's pressed again
                    if (el.parent().hasClass(root) && open) {
                        that.ui.body.trigger(that.click);
                        return false;
                    }

                    // close if el does not have children
                    if (!el.hasClass(children)) {
                        reset();
                    }

                    if (el.parent().hasClass(root) && el.hasClass(hover) || el.hasClass(disabled)) {
                        return false;
                    } else {
                        el.addClass(hover);
                        that._handleLongMenus();
                    }

                    // activate hover selection
                    if (!isTouchingTopLevelMenu) {
                        // we only set the handler for mouseover when not touching because
                        // the mouseover actually is triggered on touch devices :/
                        navigation.find('> li').on(that.mouseEnter, function () {
                            // cancel if item is already active
                            if ($(this).hasClass(hover)) {
                                return false;
                            }
                            open = false;
                            $(this).trigger(that.click);
                        });
                    }

                    isTouchingTopLevelMenu = false;
                    // create the document event
                    that.ui.document.on(that.click, reset);
                    that.ui.structureBoard.on(that.click, reset);
                    that.ui.toolbar.on(that.click, reset);
                    that.ui.window.on(that.resize + '.menu.reset', CMS.API.Helpers.throttle(reset, 1000));
                    // update states
                    open = true;
                });

                // attach hover
                lists.on(that.pointerOverOut, 'li', function () {
                    var el = $(this);
                    var parent = el.closest('.cms-toolbar-item-navigation-children')
                        .add(el.parents('.cms-toolbar-item-navigation-children'));
                    var hasChildren = el.hasClass(children) || parent.length;

                    // do not attach hover effect if disabled
                    // cancel event if element has already hover class
                    if (el.hasClass(disabled)) {
                        return false;
                    }
                    if (el.hasClass(hover)) {
                        return true;
                    }

                    // reset
                    lists.find('li').removeClass(hover);

                    // add hover effect
                    el.addClass(hover);

                    // handle children elements
                    if (hasChildren) {
                        el.find('> ul').show();
                        // add parent class
                        parent.addClass(hover);
                        that._handleLongMenus();
                    } else {
                        lists.find('ul ul').hide();
                        that._handleLongMenus();
                    }

                    // Remove stale submenus
                    el.siblings().find('> ul').hide();
                }).on(that.click, function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                });

                // fix leave event
                lists.on(that.pointerLeave, '> ul', function () {
                    lists.find('li').removeClass(hover);
                });
            });

            // attach event for first page publish
            this.ui.buttons.each(function () {
                var btn = $(this);

                // in case the button has a data-rel attribute
                if (btn.find('a').attr('data-rel')) {
                    btn.on(that.click, function (e) {
                        e.preventDefault();
                        that._delegate($(this).find('a'));
                    });
                } else {
                    btn.find('a').on(that.click, function (e) {
                        e.stopPropagation();
                    });
                }

                // in case of the publish button
                btn.find('.cms-publish-page').on(that.click, function (e) {
                    if (!CMS.API.Helpers.secureConfirm(CMS.config.lang.publish)) {
                        e.preventDefault();
                    }
                });

                btn.find('.cms-btn-publish').on(that.click, function (e) {
                    e.preventDefault();
                    // send post request to prevent xss attacks
                    $.ajax({
                        'type': 'post',
                        'url': $(this).prop('href'),
                        'data': {
                            'csrfmiddlewaretoken': CMS.config.csrf
                        },
                        'success': function () {
                            var url = CMS.API.Helpers.makeURL(
                                CMS.API.Helpers._getWindow().location.href.split('?')[0],
                                [CMS.settings.edit_off + '=true']
                            );
                            CMS.API.Helpers.reloadBrowser(url);
                        },
                        'error': function (request) {
                            throw new Error(request);
                        }
                    });
                });

            });
            this.ui.window.on(
                [this.resize, this.scroll].join(' '),
                CMS.API.Helpers.throttle($.proxy(this._handleLongMenus, this), 10)
            );
        },

        /**
         * We check for various states on load if elements in the toolbar
         * should appear or trigger other components. This precedes a timeout
         * which is not optimal and should be addressed separately.
         *
         * @method _initialStates
         * @private
         * @deprecated this method is deprecated now, it will be removed in > 3.2
         */
        _initialStates: function _initialStates() {
            var publishBtn = $('.cms-btn-publish').parent();

            // setup toolbar visibility, we need to reverse the options to set the correct state
            if (CMS.settings.toolbar === 'expanded') {
                this.open({ duration: 0 });
            } else {
                this.close();
            }

            // hide publish button
            publishBtn.hide();

            if ($('.cms-btn-publish-active').length) {
                publishBtn.show();
                this.ui.window.trigger('resize');
            }

            // check if debug is true
            if (CMS.config.debug) {
                this._debug();
            }

            // check if there are messages and display them
            if (CMS.config.messages) {
                CMS.API.Messages.open({
                    message: CMS.config.messages
                });
            }

            // check if there are error messages and display them
            if (CMS.config.error) {
                CMS.API.Messages.open({
                    message: CMS.config.error,
                    error: true
                });
            }

            // enforce open state if user is not logged in but requests the toolbar
            if (!CMS.config.auth || CMS.config.settings.version !== CMS.settings.version) {
                this.open({ duration: 0 });
                CMS.settings = this.setSettings(CMS.config.settings);
            }

            // should switcher indicate that there is an unpublished page?
            if (CMS.config.publisher) {
                CMS.API.Messages.open({
                    message: CMS.config.publisher,
                    dir: 'right'
                });
            }

            // open sideframe if it was previously opened
            if (CMS.settings.sideframe && CMS.settings.sideframe.url) {
                var sideframe = new CMS.Sideframe();
                sideframe.open({
                    url: CMS.settings.sideframe.url,
                    animate: false
                });
            }

            // if there is a screenblock, do some resize magic
            if (this.ui.screenBlock.length) {
                this._screenBlock();
            }

            // add toolbar ready class to body and fire event
            this.ui.body.addClass('cms-ready');
            this.ui.document.trigger('cms-ready');
        },

        /**
         * Toggles the toolbar state: open > closes / closed > opens.
         *
         * @method toggle
         */
        toggle: function toggle() {
            // toggle bar
            if (CMS.settings.toolbar === 'collapsed') {
                this.open();
            } else {
                this.close();
            }
        },

        /**
         * Opens the toolbar (slide down).
         *
         * @method open
         * @param {Object} [opts]
         * @param {Number} [opts.duration] time in milliseconds for toolbar to animate
         */
        open: function open(opts) {
            this._show(opts);

            // set new settings
            CMS.settings.toolbar = 'expanded';
            CMS.settings = this.setSettings(CMS.settings);
        },

        /**
         * Animation helper for opening the toolbar.
         *
         * @method _show
         * @private
         * @param {Object} [opts]
         * @param {Number} [opts.duration] time in milliseconds for toolbar to animate
         */
        _show: function _show(opts) {
            var that = this;
            var speed = opts && opts.duration !== undefined ? opts.duration : this.options.toolbarDuration;
            var debugHeight = $('.cms-debug-bar').height() || 0;
            var toolbarHeight = $('.cms-toolbar').height() + 10;

            this.ui.toolbar.css({
                'transition': 'margin-top ' + speed + 'ms',
                'margin-top': 0
            });
            this.ui.toolbarTrigger.addClass('cms-toolbar-trigger-expanded');
            this.ui.body.addClass('cms-toolbar-expanding');
            // animate html
            this.ui.body.animate({ 'margin-top': toolbarHeight - 10 + debugHeight }, speed, 'linear', function () {
                that.ui.body.removeClass('cms-toolbar-expanding');
                that.ui.body.addClass('cms-toolbar-expanded');
            });
            // set messages top to toolbar height
            this.ui.messages.css('top', toolbarHeight - 10);
        },

        /**
         * Closes the toolbar (slide up).
         *
         * @method close
         */
        close: function close() {
            this._hide();

            // set new settings
            CMS.settings.toolbar = 'collapsed';
            CMS.settings = this.setSettings(CMS.settings);
        },

        /**
         * Animation helper for closing the toolbar.
         *
         * @method _hide
         * @private
         */
        _hide: function _hide() {
            var speed = this.options.toolbarDuration;
            var toolbarHeight = $('.cms-toolbar').height() + 10;
            var that = this;

            this.ui.toolbar.css('transition', 'margin-top ' + speed + 'ms');
            // cancel if sideframe is active
            if (this.lockToolbar) {
                return false;
            }

            this.ui.toolbar.css('margin-top', -toolbarHeight);
            this.ui.toolbarTrigger.removeClass('cms-toolbar-trigger-expanded');
            this.ui.body.addClass('cms-toolbar-collapsing');
            // animate html
            this.ui.body.animate({ 'margin-top': (CMS.config.debug) ? 5 : 0 }, speed, 'linear', function () {
                that.ui.body.removeClass('cms-toolbar-expanded cms-toolbar-collapsing');
            });
            // set messages top to 0
            this.ui.messages.css('top', 0);
        },

        /**
         * Makes a request to the given url, runs optional callbacks.
         *
         * @method openAjax
         * @param {Object} opts
         * @param {String} opts.url url where the ajax points to
         * @param {String} [opts.post] post data to be passed (must be stringified JSON)
         * @param {String} [opts.text] message to be displayed
         * @param {Function} [opts.callback] custom callback instead of reload
         * @param {String} [opts.onSuccess] reload and display custom message
         * @return {Boolean|jQuery.Deferred} either false or a promise
         */
        openAjax: function (opts) {
            var that = this;
            // url, post, text, callback, onSuccess
            var url = opts.url;
            var post = opts.post || '{}';
            var text = opts.text || '';
            var callback = opts.callback;
            var onSuccess = opts.onSuccess;
            var question = (text) ? CMS.API.Helpers.secureConfirm(text) : true;

            // cancel if question has been denied
            if (!question) {
                return false;
            }

            // set loader
            this.showLoader();

            return $.ajax({
                type: 'POST',
                url: url,
                data: JSON.parse(post)
            }).done(function (response) {
                CMS.API.locked = false;

                if (callback) {
                    callback(that, response);
                    that.hideLoader();
                } else if (onSuccess) {
                    CMS.API.Helpers.reloadBrowser(onSuccess, false, true);
                } else {
                    // reload
                    CMS.API.Helpers.reloadBrowser(false, false, true);
                }
            }).fail(function (jqXHR) {
                CMS.API.locked = false;

                CMS.API.Messages.open({
                    message: jqXHR.responseText + ' | ' + jqXHR.status + ' ' + jqXHR.statusText,
                    error: true
                });
            });
        },

        /**
         * Shows the loader spinner on the trigger knob for the toolbar.
         *
         * @method showLoader
         */
        showLoader: function showLoader() {
            this.ui.toolbarTrigger.addClass('cms-toolbar-loader');
        },

        /**
         * Hides the loader spinner on the trigger knob for the toolbar.
         *
         * @method hideLoader
         */
        hideLoader: function hideLoader() {
            this.ui.toolbarTrigger.removeClass('cms-toolbar-loader');
        },

        /**
         * Delegates event from element to appropriate functionalities.
         *
         * @method _delegate
         * @param {jQuery} el trigger element
         * @private
         */
        _delegate: function _delegate(el) {
            // save local vars
            var target = el.data('rel');
            if (el.hasClass('cms-btn-disabled')) {
                return false;
            }

            switch (target) {
                case 'modal':
                    var modal = new CMS.Modal({
                        onClose: el.data('on-close')
                    });
                    modal.open({
                        url: el.attr('href'),
                        title: el.data('name')
                    });
                    break;
                case 'message':
                    CMS.API.Messages.open({
                        message: el.data('text')
                    });
                    break;
                case 'sideframe':
                    var sideframe = new CMS.Sideframe({
                        onClose: el.data('on-close')
                    });
                    sideframe.open({
                        url: el.attr('href'),
                        animate: true
                    });
                    break;
                case 'ajax':
                    this.openAjax({
                        url: el.attr('href'),
                        post: JSON.stringify(el.data('post')),
                        text: el.data('text'),
                        onSuccess: el.data('on-success')
                    });
                    break;
                default:
                    CMS.API.Helpers._getWindow().location.href = el.attr('href');
            }
        },

        /**
         * Locks the toolbar so it cannot be closed.
         *
         * @method _lock
         * @param {Boolean} lock true if the toolbar should be locked
         * @private
         */
        _lock: function _lock(lock) {
            if (lock) {
                this.lockToolbar = true;
                // make button look disabled
                this.ui.toolbarTrigger.css('opacity', 0.2);
            } else {
                this.lockToolbar = false;
                // make button look disabled
                this.ui.toolbarTrigger.css('opacity', 1);
            }
        },

        /**
         * Handles the debug bar when `DEBUG=true` on top of the toolbar.
         *
         * @method _debug
         * @private
         */
        _debug: function _debug() {
            var timeout = 1000;
            // istanbul ignore next: function always reassigned
            var timer = function () {};

            // bind message event
            var debug = this.ui.container.find('.cms-debug-bar');
            debug.on(this.mouseEnter + ' ' + this.mouseLeave, function (e) {
                clearTimeout(timer);

                if (e.type === 'mouseenter') {
                    timer = setTimeout(function () {
                        CMS.API.Messages.open({
                            message: CMS.config.lang.debug
                        });
                    }, timeout);
                }
            });
        },

        /**
         * This shows a dark screen with a note "This page is a redirect"
         * on a page where the settings have been modified to redirect to
         * another page.
         *
         * @method _screenBlock
         * @private
         */
        _screenBlock: function _screenBlock() {
            var that = this;
            var interval = 20;
            var blocker = this.ui.screenBlock;
            var sideframe = $('.cms-sideframe');

            // automatically resize screenblock window according to given attributes
            that.ui.window.on(that.resize + '.screenblock', function () {
                blocker.css({
                    'width': that.ui.window.width() - sideframe.width(),
                    'height': that.ui.window.height()
                });
            }).trigger(that.resize + '.screenblock');

            // set update interval
            setInterval(function () {
                that.ui.window.trigger(that.resize + '.screenblock');
            }, interval);
        },

        /**
         * Handles the case when opened menu doesn't fit the screen.
         *
         * @method _handleLongMenus
         * @private
         */
        _handleLongMenus: function _handleLongMenus() {
            var openMenus = $('.cms-toolbar-item-navigation-hover > ul');
            if (!openMenus.length) {
                this._stickToolbar();
                return;
            }

            var positions = openMenus.toArray().map(function (item) {
                var el = $(item);

                return $.extend({}, el.position(), { height: el.height() });
            });
            var windowHeight = this.ui.window.height();

            this._position.top = this.ui.window.scrollTop();

            var shouldUnstickToolbar = positions.some(function (item) {
                return item.top + item.height > windowHeight;
            });

            if (shouldUnstickToolbar && this._position.top >= this._position.stickyTop) {
                if (this._position.isSticky) {
                    this._unstickToolbar();
                }
            } else {
                this._stickToolbar();
            }
        },

        /**
         * Resets toolbar to the normal position.
         *
         * @method _stickToolbar
         * @private
         */
        _stickToolbar: function _stickToolbar() {
            this._position.stickyTop = 0;
            this._position.isSticky = true;
            this.ui.toolbar.removeClass('cms-toolbar-non-sticky');
            this.ui.toolbar.css({
                'top': 0,
                'margin-top': ''
            });
        },

        /**
         * Positions toolbar absolutely so the long menus can be scrolled
         * (toolbar goes away from the screen if required)
         *
         * @method _unstickToolbar
         * @private
         */
        _unstickToolbar: function _unstickToolbar() {
            var htmlMargin = parseInt($('html').css('margin-top'), 10);

            this._position.stickyTop = this._position.top;
            this.ui.toolbar.addClass('cms-toolbar-non-sticky');
            // have to do the !important because of "debug" toolbar
            this.ui.toolbar[0].style.setProperty(
                'top',
                (this._position.stickyTop + (CMS.config.debug ? 5 : -5)) + 'px',
                'important'
            );
            this.ui.toolbar.css({
                'margin-top': -(htmlMargin + ((CMS.config.debug ? 5 : 0)))
            });
            this._position.isSticky = false;
        }
    });
})(CMS.$);

/*
 * Copyright https://github.com/divio/django-cms
 */

// #############################################################################
// NAMESPACES
/**
 * @module CMS
 */
var CMS = window.CMS || {};

// #############################################################################
// Tooltip
(function ($) {
    'use strict';

    /**
     * The tooltip is the element which shows over plugins
     * and suggests clicking/tapping them to edit.
     *
     * @class Tooltip
     * @namespace CMS
     */
    CMS.Tooltip = new CMS.Class({

        initialize: function initialize() {
            this.body = $('body');
            /**
             * Are we on touch device?
             *
             * @property {Boolean} isTouch
             */
            this.isTouch = false;
            /**
             * Tooltip DOM element
             *
             * @property {jQuery} domElem
             */
            this.domElem = this._pick();

            this._forceTouchOnce = CMS.API.Helpers.once(this._forceTouch);
            this._checkTouch();
        },

        /**
         * Checks for touch event and switches to touch tooltip if detected.
         *
         * @method _checkTouch
         * @private
         */
        _checkTouch: function _checkTouch() {
            this.body.one('touchstart.cms', $.proxy(this._forceTouchOnce, this));
        },

        /**
         * Force tooltip to be "touch".
         *
         * @method _forceTouch
         * @private
         */
        _forceTouch: function _forceTouch() {
            this.isTouch = true;
            this.domElem = this._pick();

            // attach tooltip event for touch devices
            this.domElem.on('touchstart.cms', function () {
                var id = $(this).data('plugin_id');
                var plugin = $('.cms-plugin-' + id);
                // check if it is a normal plugin or a generic
                if (plugin.length) {
                    plugin.trigger('dblclick.cms');
                } else {
                    // generics are added through the content mode via special
                    // template tags some generic element might be
                    // cms-plugin-cms-page-changelist-x
                    var generic = $('.cms-plugin[class*="cms-plugin-cms-"][class*="-' + id + '"]');
                    generic.eq(0).trigger('dblclick.cms');
                }
            });
        },

        /**
         * Manages show/hide calls.
         *
         * @method displayToggle
         * @param {Boolean} isShown
         * @param {Object} e event object
         * @param {String} name current plugin name
         * @param {String} id current plugin id
         */
        displayToggle: function displayToggle(isShown, e, name, id) {
            isShown ? this.show(e, name, id) : this.hide();
        },

        /**
         * Shows tooltip with specific plugin-related parameters.
         *
         * @method show
         * @param {Object} e
         * @param {String} name current plugin name
         * @param {String} id current plugin id
         */
        show: function show(e, name, id) {
            var tooltip = this.domElem;
            var that = this;

            // change css and attributes
            tooltip.css('visibility', 'visible')
                .data('plugin_id', id || null)
                .show()
                .find('span').html(name);

            if (this.isTouch) {
                this.position(e.originalEvent, tooltip);
            } else {
                // attaches move event
                // this sets the correct position for the edit tooltip
                that.position(e.originalEvent, tooltip);
                this.body.on('mousemove.cms.tooltip', function (e) {
                    that.position(e, tooltip);
                });
            }
        },

        /**
         * Hides tooltip.
         *
         * @method hide
         */
        hide: function hide() {
            // change css
            this.domElem.css('visibility', 'hidden').hide();

            // unbind events
            if (!this.isTouch) {
                this.body.off('mousemove.cms.tooltip');
            }
        },

        /**
         * Picks tooltip to show (touch or desktop).
         *
         * @method _pick
         * @private
         */
        _pick: function _pick() {
            $('.cms-tooltip-touch, .cms-tooltip').css('visibility', 'hidden').hide();
            return this.isTouch ? $('.cms-tooltip-touch') : $('.cms-tooltip');
        },

        /**
         * Positions tooltip next to the pointer event coordinates.
         *
         * @method position
         * @param {Object} e event object
         * @param {jQuery} tooltip element
         */
        position: function position(e, tooltip) {
            // so lets figure out where we are
            var offset = 20;
            var relX = e.pageX - $(tooltip).offsetParent().offset().left;
            var relY = e.pageY - $(tooltip).offsetParent().offset().top;
            var bound = $(tooltip).offsetParent().width();
            var pos = relX + tooltip.outerWidth(true) + offset;

            tooltip.css({
                left: (pos >= bound) ? relX - tooltip.outerWidth(true) - offset : relX + offset,
                top: relY - 12
            });
        }
    });
})(CMS.$);

//# sourceMappingURL=data:application/json;base64,
=======
!function(n){"use strict";function t(){var n=document.createElement("cms"),t={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var i in t)if(void 0!==n.style[i])return{end:t[i]};return!1}n.fn.emulateTransitionEnd=function(t){var i=!1,r=this;n(this).one("cmsTransitionEnd",function(){i=!0});var e=function(){i||n(r).trigger(n.support.transition.end)};return setTimeout(e,t+10),this},n(function(){n.support.transition=t(),n.support.transition&&(n.event.special.cmsTransitionEnd={bindType:n.support.transition.end,delegateType:n.support.transition.end,handle:function(t){return n(t.target).is(this)?t.handleObj.handler.apply(this,arguments):void 0}})})}(CMS.$);
var CMS=window.CMS||{};!function(s){"use strict";CMS.Messages=new CMS.Class({options:{messageDuration:300,messageDelay:3e3},initialize:function(e){this.options=s.extend(!0,{},this.options,e),this.click="click.cms.message",this._setupUI()},_setupUI:function(){var e=s(".cms");this.ui={container:e,body:s("html"),toolbar:e.find(".cms-toolbar"),messages:e.find(".cms-messages")}},open:function(s){if(!s||!s.message)throw new Error('The arguments passed to "open" were invalid.');var e=this,i=s.message,t=void 0===s.dir?"center":s.dir,a=void 0===s.delay?this.options.messageDelay:s.delay,o=void 0===s.error?!1:s.error,r=320,m=this.ui.messages.outerHeight(!0),n=this.ui.toolbar.outerHeight(!0),h=this.ui.messages.find(".cms-messages-close");switch(this.ui.messages.find(".cms-messages-inner").html(i),this.ui.messages.removeClass("cms-messages-error"),o&&this.ui.messages.addClass("cms-messages-error"),clearTimeout(this.timer),h.hide(),h.off(this.click).on(this.click,function(){e.close()}),"collapsed"===CMS.settings.toolbar&&(n=0),this.ui.messages.css("top",-m).show(),t){case"left":this.ui.messages.css({top:n,left:-r,right:"auto","margin-left":0}),this.ui.messages.animate({left:0});break;case"right":this.ui.messages.css({top:n,right:-r,left:"auto","margin-left":0}),this.ui.messages.animate({right:0});break;default:this.ui.messages.css({left:"50%",right:"auto","margin-left":-(r/2)}),this.ui.messages.animate({top:n})}0>=a?h.show():this.timer=setTimeout(function(){e.close()},a)},close:function(){this.ui.messages.fadeOut(this.options.messageDuration)}})}(CMS.$);
var CMS=window.CMS||{};!function(i){"use strict";CMS.Modal=new CMS.Class({implement:[CMS.API.Helpers],options:{onClose:!1,minHeight:400,minWidth:800,modalDuration:200,newPlugin:!1,resizable:!0,maximizable:!0,minimizable:!0},initialize:function(t){this.options=i.extend(!0,{},this.options,t),this._setupUI(),this._setupEventEmitter(),this.click="click.cms.modal",this.pointerDown="pointerdown.cms.modal contextmenu.cms.modal",this.pointerUp="pointerup.cms.modal pointercancel.cms.modal",this.pointerMove="pointermove.cms.modal",this.doubleClick="dblclick.cms.modal",this.touchEnd="touchend.cms.modal",this.maximized=!1,this.minimized=!1,this.triggerMaximized=!1,this.saved=!1},_setupEventEmitter:function(){function t(i){return function(){return o[i].apply(o,arguments),e}}var e=this,o=i({});this.trigger=t("trigger"),this.one=t("one"),this.on=t("on"),this.off=t("off")},_setupUI:function(){var t=i(".cms-modal");this.ui={modal:t,body:i("html"),window:i(window),toolbarLeftPart:i(".cms-toolbar-left"),minimizeButton:t.find(".cms-modal-minimize"),maximizeButton:t.find(".cms-modal-maximize"),title:t.find(".cms-modal-title"),titlePrefix:t.find(".cms-modal-title-prefix"),titleSuffix:t.find(".cms-modal-title-suffix"),resize:t.find(".cms-modal-resize"),breadcrumb:t.find(".cms-modal-breadcrumb"),closeAndCancel:t.find(".cms-modal-close, .cms-modal-cancel"),modalButtons:t.find(".cms-modal-buttons"),modalBody:t.find(".cms-modal-body"),frame:t.find(".cms-modal-frame"),shim:t.find(".cms-modal-shim")}},_events:function(){var t=this;this.ui.minimizeButton.off(this.click+" "+this.touchEnd).on(this.click+" "+this.touchEnd,function(i){i.preventDefault(),t.minimize()}),this.ui.maximizeButton.off(this.click+" "+this.touchEnd).on(this.click+" "+this.touchEnd,function(i){i.preventDefault(),t.maximize()}),this.ui.title.off(this.pointerDown).on(this.pointerDown,function(i){i.preventDefault(),t._startMove(i)}),this.ui.title.off(this.doubleClick).on(this.doubleClick,function(){t.maximize()}),this.ui.resize.off(this.pointerDown).on(this.pointerDown,function(i){i.preventDefault(),t._startResize(i)}),this.ui.closeAndCancel.off(this.click+" "+this.touchEnd).on(this.click+" "+this.touchEnd,function(i){t.options.onClose=null,i.preventDefault(),t.close()}),this.ui.breadcrumb.off(this.click,"a").on(this.click,"a",function(e){e.preventDefault(),t._changeIframe(i(this))})},open:function(t){if(!(t&&t.url||t&&t.html))throw new Error('The arguments passed to "open" were invalid.');if(CMS._newPlugin&&!this._deletePlugin())return!1;this._events(),this.trigger("cms.modal.load"),this.ui.modal.trigger("cms.modal.load"),this.ui.resize.toggle(this.options.resizable),this.ui.minimizeButton.toggle(this.options.minimizable),this.ui.maximizeButton.toggle(this.options.maximizable);var e=this._calculateNewPosition(t);return this.ui.maximizeButton.removeClass("cms-modal-maximize-active"),this.maximized=!1,this.options.newPlugin&&(CMS._newPlugin=this.options.newPlugin),this.ui.body.hasClass("cms-modal-minimized")&&(this.minimized=!0,this.minimize()),this.ui.modalButtons.empty(),this.ui.breadcrumb.empty(),this.ui.modal.removeClass("cms-modal-has-breadcrumb"),CMS.API.Tooltip.hide(),t.url?this._loadIframe({url:t.url,title:t.title,breadcrumbs:t.breadcrumbs}):this._loadMarkup({html:t.html,title:t.title,subtitle:t.subtitle}),this.trigger("cms.modal.loaded"),this._show(i.extend({duration:this.options.modalDuration},e)),this},_calculateNewPosition:function(i){var t,e,o=300,n=300,s=this.ui.window.width(),a=this.ui.window.height(),d=i.width||this.options.minWidth,l=i.height||this.options.minHeight,m=s>=d+o,r=a>=l+n,c=m&&!i.width?s-o:d,u=r&&!i.height?a-n:l,h=this.ui.modal.css("left"),f=this.ui.modal.css("top");return"50%"===h&&(h=s/2),"50%"===f&&(f=a/2),f=parseInt(f),h=parseInt(h),(c/2+h>s||u/2+f>a||0>h-c/2||0>f-u/2)&&(t=s/2,e=a/2),(c>=s||u>=a)&&(this.triggerMaximized=!0),{width:c,height:u,top:e,left:t}},_show:function(i){var t=this,e=i.width,o=i.height,n=i.duration,s=i.top,a=i.left;this.ui.modal.hasClass("cms-modal-open")&&this.ui.modal.addClass("cms-modal-morphing"),this.ui.modal.css({display:"block",width:e,height:o,top:s,left:a,"margin-left":-(e/2),"margin-top":-(o/2)}),setTimeout(function(){t.ui.modal.addClass("cms-modal-open")},0),this.ui.modal.one("cmsTransitionEnd",function(){t.ui.modal.removeClass("cms-modal-morphing"),t.ui.modal.css({"margin-left":-(e/2),"margin-top":-(o/2)}),t.triggerMaximized&&t.maximize(),CMS.API.locked=!1,t.trigger("cms.modal.shown")}).emulateTransitionEnd(n),this.ui.body.off("keydown.cms.close").on("keydown.cms.close",function(i){i.keyCode===CMS.KEYS.ESC&&(t.options.onClose=null,t.close())}),this.ui.modal.focus()},close:function(){this.options.onClose&&this.reloadBrowser(this.options.onClose,!1,!0),CMS._newPlugin?this._deletePlugin({hideAfter:!0}):this._hide({duration:this.options.modalDuration/2})},_hide:function(i){var t=this,e=this.options.modalDuration;i&&i.duration&&(e=i.duration),this.ui.frame.empty(),this.ui.modalBody.removeClass("cms-loader"),this.ui.modal.removeClass("cms-modal-open"),this.ui.modal.one("cmsTransitionEnd",function(){t.ui.modal.css("display","none")}).emulateTransitionEnd(e),setTimeout(function(){t.minimized&&t.minimize(),t.maximized&&t.maximize(),t.trigger("cms.modal.closed")},this.options.duration),this.ui.body.off("keydown.cms.close")},minimize:function(){return this.maximized?!1:void(this.minimized===!1?(CMS.API.Toolbar.open(),this.ui.modal.data("css",this.ui.modal.css(["left","top","margin-left","margin-top"])),this.ui.body.addClass("cms-modal-minimized"),this.ui.modal.css({left:this.ui.toolbarLeftPart.outerWidth(!0)+50}),this.minimized=!0):(this.ui.body.removeClass("cms-modal-minimized"),this.ui.modal.css(this.ui.modal.data("css")),this.minimized=!1))},maximize:function(){return this.minimized?!1:void(this.maximized===!1?(this.ui.modal.data("css",this.ui.modal.css(["left","top","margin-left","margin-top","width","height"])),this.ui.body.addClass("cms-modal-maximized"),this.maximized=!0,this.dispatchEvent("modal-maximized",{instance:this})):(this.ui.body.removeClass("cms-modal-maximized"),this.ui.modal.css(this.ui.modal.data("css")),this.maximized=!1,this.dispatchEvent("modal-restored",{instance:this})))},_startMove:function(i){if(this.maximized||this.minimized)return!1;var t,e,o=this,n=this.ui.modal.position();this.ui.shim.show(),this.ui.body.on(this.pointerUp,function(i){o._stopMove(i)}),this.ui.body.on(this.pointerMove,function(s){t=n.left-(i.originalEvent.pageX-s.originalEvent.pageX),e=n.top-(i.originalEvent.pageY-s.originalEvent.pageY),o.ui.modal.css({left:t,top:e})}).attr("data-touch-action","none")},_stopMove:function(){this.ui.shim.hide(),this.ui.body.off(this.pointerMove+" "+this.pointerUp).removeAttr("data-touch-action")},_startResize:function(i){if(this.maximized)return!1;var t=this,e=this.ui.modal.width(),o=this.ui.modal.height(),n=this.ui.modal.position().left,s=this.ui.modal.position().top;this.ui.body.on(this.pointerUp,function(i){t._stopResize(i)}),this.ui.shim.show(),this.ui.body.on(this.pointerMove,function(a){var d=i.originalEvent.pageX-a.originalEvent.pageX,l=i.originalEvent.pageY-a.originalEvent.pageY,m=e-2*d,r=o-2*l,c=t.options.minWidth,u=t.options.minHeight,h=d+n,f=l+s;c>=m&&(m=c,h=n+e/2-m/2),u>=r&&(r=u,f=s+o/2-r/2),t.ui.modal.css({width:m,height:r,left:h,top:f})}).attr("data-touch-action","none")},_stopResize:function(){this.ui.shim.hide(),this.ui.body.off(this.pointerMove+" "+this.pointerUp).removeAttr("data-touch-action")},_setBreadcrumb:function(t){var e="",o='<a href="{1}" class="{2}"><span>{3}</span></a>';return!t||t.length<=1?!1:t[0].title?(this.ui.modal.addClass("cms-modal-has-breadcrumb"),i.each(t,function(i,n){var s=i>=t.length-1?"active":"";e+=o.replace("{1}",n.url).replace("{2}",s).replace("{3}",n.title)}),void this.ui.breadcrumb.html(e)):!1},_setButtons:function(t){var e,o,n=t.contents().find(".suit-columns").length>0,s=this,a=i('<div class="cms-modal-item-buttons"></div>'),d=i('<div class="cms-modal-buttons-inner"></div>'),l=i('<a href="#" class="cms-btn">'+CMS.config.lang.cancel+"</a>");e=n?t.contents().find(".save-box:eq(0)"):t.contents().find(".submit-row:eq(0)");var m=t.contents().find("form");m.on("submit",function(){s.hideFrame&&(s.ui.modal.find(".cms-modal-frame iframe").hide(),s.saved=!0)});var r=e.find("input, a, button");r.on("click",function(){i(this).hasClass("default")&&(s.hideFrame=!0)}),t.contents().find(".submit-row").hide(),r.length||(e=t.contents().find("body:not(.change-list) #content form:eq(0)"),r=e.find('input[type="submit"], button[type="submit"]'),r.addClass("deletelink").hide()),r.each(function(t,e){if(e=i(e),e.attr("data-rel","_"+t),"hidden"===e.attr("type"))return!1;var o=e.attr("value")||e.text(),n="cms-btn";e.is("button")&&(o=e.text()),e.hasClass("default")&&(n="cms-btn cms-btn-action"),e.hasClass("deletelink")&&(n="cms-btn cms-btn-caution");var l=i('<a href="#" class="'+n+" "+e.attr("class")+'">'+o+"</a>");l.on(s.click+" "+s.touchEnd,function(i){i.preventDefault(),e.is("a")&&s._loadIframe({url:e.prop("href"),name:o}),(e.hasClass("default")||e.hasClass("deletelink"))&&(e.hasClass("default")?s.hideFrame=!0:(s.ui.modal.find(".cms-modal-frame iframe").hide(),s.saved=!0)),(e.is("input")||e.is("button"))&&e[0].click()}),l.wrap(a),d.append(l.parent())}),l.on(s.click,function(i){i.preventDefault(),s.options.onClose=!1,s.close()}),l.wrap(a),d.append(l.parent()),d.find(".cms-btn-group").unwrap(),o=d.find(".cms-btn-group").clone(!0,!0),d.find(".cms-btn-group").remove(),d.append(o.wrapAll(a.clone().addClass("cms-modal-item-buttons-left")).parent()),this.ui.modalButtons.html(d)},_loadIframe:function(t){var e=this;t.url=this.makeURL(t.url),t.title=t.title||"",t.breadcrumbs=t.breadcrumbs||"",CMS.API.Toolbar.showLoader(),this.ui.modal.removeClass("cms-modal-markup"),this.ui.modal.addClass("cms-modal-iframe"),this._setBreadcrumb(t.breadcrumbs);var o=this.ui.frame,n=i('<iframe src="'+t.url+'" class="" frameborder="0" />'),s=this.ui.titlePrefix,a=this.ui.titleSuffix;n.css("visibility","hidden"),s.text(t.title||""),a.text(""),o.find("iframe").css("visibility","hidden"),e.ui.modalBody.addClass("cms-loader"),n.on("load",function(){var o,d,l,m,r,c;try{n.contents()}catch(u){return CMS.API.Messages.open({message:"<strong>"+u+"</strong>",error:!0}),void e.close()}return CMS.Modal._setupCtrlEnterSave(document),n[0].contentWindow&&n[0].contentWindow.document&&CMS.Modal._setupCtrlEnterSave(n[0].contentWindow.document),n[0].contentWindow&&n[0].contentWindow.CMS&&n[0].contentWindow.CMS.CKEditor&&i(n[0].contentWindow.document).ready(function(){setTimeout(function(){var t=n[0].contentWindow.CMS.CKEditor.editor;t&&t.on("loaded",function(t){CMS.Modal._setupCtrlEnterSave(i(t.editor.container.$).find("iframe")[0].contentWindow.document)})},100)}),CMS.API.Toolbar.hideLoader(),d=n.contents().find(".messagelist"),o=d.find("li"),o.length&&CMS.API.Messages.open({message:o.eq(0).text()}),d.remove(),l=n.contents(),m=l.find("body"),m.addClass("cms-admin cms-admin-modal"),o.length&&e.enforceReload&&e.reloadBrowser(),o.length&&e.enforceClose?(e.close(),!1):(l.find(".viewsitelink").attr("target","_top"),e._setButtons(i(this)),(n.contents().find(".errornote").length||n.contents().find(".errorlist").length)&&(e.saved=!1),void(e.saved&&!l.find(".delete-confirmation").length?e.reloadBrowser(e.options.onClose?e.options.onClose:window.location.href,!1,!0):(n.show(),r=n.contents().find("#content h1:eq(0)"),void 0===t.title&&""===e.ui.titlePrefix.text()&&(c=n.contents().find(".breadcrumbs").contents(),e.ui.titlePrefix.text(c.eq(c.length-1).text().replace("›","").trim())),""===s.text().trim()?s.text(r.text()):a.text(r.text()),r.remove(),n.css("visibility","visible"),n.data("ready",!0),m.on("keydown.cms",function(i){i.keyCode===CMS.KEYS.ESC&&e.close()}),l.find(".object-tools").length&&l.find("#content").css("padding-top",38))))}),o.html(n)},_changeIframe:function(i){if(i.hasClass("active"))return!1;var t=i.parent().find("a");t.removeClass("active"),i.addClass("active"),this._loadIframe({url:i.attr("href")}),this.ui.titlePrefix.text(i.text())},_loadMarkup:function(i){this.ui.modal.removeClass("cms-modal-iframe"),this.ui.modal.addClass("cms-modal-markup"),this.ui.modalBody.removeClass("cms-loader"),this.ui.frame.empty().append(i.html),this.ui.titlePrefix.text(i.title||""),this.ui.titleSuffix.text(i.subtitle||"")},_deletePlugin:function(i){var t=this,e=CMS._newPlugin,o='{ "csrfmiddlewaretoken": "'+CMS.config.csrf+'" }',n=CMS.config.lang.confirmEmpty.replace("{1}",CMS._newPlugin.breadcrumb[CMS._newPlugin.breadcrumb.length-1].title);return CMS.API.Toolbar.openAjax({url:e["delete"],post:o,text:n,callback:function(){CMS._newPlugin=!1,i&&i.hideAfter&&t._hide({duration:100})}})}}),CMS.Modal._setupCtrlEnterSave=function(t){var e=!1,o=navigator.platform.toLowerCase().indexOf("mac")+1;i(t).on("keydown.cms.submit",function(t){t.ctrlKey&&t.keyCode===CMS.KEYS.ENTER&&!o&&i(".cms-modal-buttons .cms-btn-action:first").trigger("click"),o&&(t.keyCode!==CMS.KEYS.CMD_LEFT&&t.keyCode!==CMS.KEYS.CMD_RIGHT&&t.keyCode!==CMS.KEYS.CMD_FIREFOX||(e=!0),t.keyCode===CMS.KEYS.ENTER&&e&&i(".cms-modal-buttons .cms-btn-action:first").trigger("click"))}).on("keyup.cms.submit",function(i){o&&(i.keyCode!==CMS.KEYS.CMD_LEFT&&i.keyCode!==CMS.KEYS.CMD_RIGHT||(e=!1))})}}(CMS.$);
var CMS=window.CMS||{};!function(i){"use strict";CMS.Sideframe=new CMS.Class({implement:[CMS.API.Helpers],options:{onClose:!1,sideframeDuration:300,sideframeWidth:.8},initialize:function(s){this.options=i.extend(!0,{},this.options,s),this._setupUI(),this.click="click.cms.sideframe",this.pointerDown="pointerdown.cms.sideframe contextmenu.cms.sideframe",this.pointerUp="pointerup.cms.sideframe pointercancel.cms.sideframe",this.pointerMove="pointermove.cms.sideframe",this.enforceReload=!1,this.settingsRefreshTimer=600},_setupUI:function(){var s=i(".cms-sideframe");this.ui={sideframe:s,body:i("html"),window:i(window),dimmer:s.find(".cms-sideframe-dimmer"),close:s.find(".cms-sideframe-close"),resize:s.find(".cms-sideframe-resize"),frame:s.find(".cms-sideframe-frame"),shim:s.find(".cms-sideframe-shim"),historyBack:s.find(".cms-sideframe-history .cms-icon-arrow-back"),historyForward:s.find(".cms-sideframe-history .cms-icon-arrow-forward")}},_events:function(){var i=this;this.history={back:[],forward:[]},this.ui.close.off(this.click).on(this.click,function(){i.close()}),this.ui.resize.off(this.pointerDown).on(this.pointerDown,function(s){s.preventDefault(),i._startResize()}),this.ui.dimmer.off(this.click).on(this.click,function(){i.close()}),this.ui.historyBack.off(this.click).on(this.click,function(){return i.ui.historyBack.hasClass("cms-icon-disabled")?!1:void i._goToHistory("back")}),this.ui.historyForward.off(this.click).on(this.click,function(){return i.ui.historyForward.hasClass("cms-icon-disabled")?!1:void i._goToHistory("forward")})},open:function(i){if(!i||!i.url)throw new Error('The arguments passed to "open" were invalid.');var s=i.url,t=i.animate,e="language="+CMS.config.request.language,o="page_id="+CMS.config.request.page_id,n=[],r=window.innerWidth,a=this.ui.sideframe.outerWidth(),d=this.ui.sideframe.is(":visible");return this.ui.body.width()>=CMS.BREAKPOINTS.mobile&&(r=CMS.settings.sideframe.position||100*this.options.sideframeWidth+"%"),this._events(),this.ui.dimmer.show(),this.ui.frame.addClass("cms-loader"),CMS.API&&CMS.API.Toolbar&&CMS.API.Toolbar.showLoader(),s.indexOf(CMS.config.request.tree)>=0&&(CMS.config.request.language&&n.push(e),CMS.config.request.page_id&&n.push(o)),s=this.makeURL(s,n),this._content(s),d&&r>a&&(CMS.settings.sideframe.hidden=!1),d&&Math.round(a)===Math.round(r)&&(t=!1),this._show(r,t),this},_content:function(s){function t(){var i=n.ui.sideframe.width();n.ui.sideframe.animate({width:i+1},0),setTimeout(function(){n.ui.sideframe.animate({width:i},0),n.ui.shim.css("z-index",20),setTimeout(function(){n.ui.shim.css("z-index",1)},0)},0)}var e,o,n=this,r=i('<iframe src="'+s+'" class="" frameborder="0" />'),a=this.ui.frame,d=/iPhone|iPod|iPad/.test(navigator.userAgent);r.hide().on("load",function(){try{r.contents()}catch(s){return CMS.API.Messages.open({message:"<strong>"+s+"</strong>",error:!0}),void n.close()}e=r.contents(),o=e.find("body"),o.addClass("cms-admin cms-admin-sideframe"),n.ui.frame.removeClass("cms-loader"),r.show(),d&&t(),CMS.config.debug&&o.addClass("cms-debug"),CMS.settings.sideframe.url=r[0].contentWindow.location.href,CMS.settings=n.setSettings(CMS.settings),o.on(n.click,function(){i(document).trigger(n.click)}),o.on("keydown.cms",function(i){i.keyCode===CMS.KEYS.ESC&&n.close()}),e.find(".viewsitelink").attr("target","_top"),n._addToHistory(this.contentWindow.location.href)}),a.empty(),a.html(r)},_show:function(s,t){var e=this;this.ui.sideframe.show(),CMS.settings.sideframe.hidden&&this._hide(),t?this.ui.sideframe.animate({width:s,overflow:"visible"},this.options.sideframeDuration):(this.ui.sideframe.css("width",s),s>=this.ui.window.width()&&this.ui.sideframe.css({width:this.ui.window.width()-30,overflow:"visible"})),CMS.API&&CMS.API.Toolbar&&(CMS.API.Toolbar.open(),CMS.API.Toolbar.hideLoader(),CMS.API.Toolbar._lock(!0)),this.ui.body.off("keydown.cms.close").on("keydown.cms.close",function(i){i.keyCode===CMS.KEYS.ESC&&(e.options.onClose=null,e.close())}),this.ui.body.addClass("cms-prevent-scrolling"),this.preventTouchScrolling(i(document),"sideframe")},close:function(){this.ui.dimmer.hide(),CMS.settings.sideframe={url:null,hidden:!1,width:this.options.sideframeWidth},CMS.settings=this.setSettings(CMS.settings),this.reloadBrowser(this.options.onClose,!1,!0),this._hide({duration:this.options.sideframeDuration/2})},_hide:function(s){var t=this.options.sideframeDuration;s&&"number"==typeof s.duration&&(t=s.duration),this.ui.sideframe.animate({width:0},t,function(){i(this).hide()}),this.ui.frame.removeClass("cms-loader"),CMS.API&&CMS.API.Toolbar&&CMS.API.Toolbar._lock(!1),this.ui.body.off("keydown.cms.close"),this.ui.body.removeClass("cms-prevent-scrolling"),this.allowTouchScrolling(i(document),"sideframe")},_startResize:function(){var i,s=this,t=30;this.ui.body.on(this.pointerUp,function(i){i.preventDefault(),s._stopResize()}),this.ui.shim.css("z-index",20),this.ui.body.attr("data-touch-action","none").on(this.pointerMove,function(e){e.originalEvent.clientX<=320&&(e.originalEvent.clientX=320),e.originalEvent.clientX>=s.ui.window.width()-t&&(e.originalEvent.clientX=s.ui.window.width()-t),s.ui.sideframe.css("width",e.originalEvent.clientX),CMS.settings.sideframe.position=e.originalEvent.clientX,clearTimeout(i),i=setTimeout(function(){CMS.settings=s.setSettings(CMS.settings)},s.settingsRefreshTimer)})},_stopResize:function(){this.ui.shim.css("z-index",1),this.ui.body.off(this.pointerUp).off(this.pointerMove).removeAttr("data-touch-action")},_goToHistory:function(i){var s,t=this.ui.frame.find("iframe");"back"===i&&(this.history.forward.push(this.history.back.pop()),t.attr("src",this.history.back[this.history.back.length-1])),"forward"===i&&(s=this.history.forward.pop(),this.history.back.push(s),t.attr("src",s)),this._updateHistoryButtons()},_addToHistory:function(i){this.history.back.push(i);var s=this.history.back.length;this.history.back[s-1]===this.history.back[s-2]&&this.history.back.pop(),this._updateHistoryButtons()},_updateHistoryButtons:function(){this.history.back.length>1?this.ui.historyBack.removeClass("cms-icon-disabled"):this.ui.historyBack.addClass("cms-icon-disabled"),this.history.forward.length>=1?this.ui.historyForward.removeClass("cms-icon-disabled"):this.ui.historyForward.addClass("cms-icon-disabled")}})}(CMS.$);
var CMS=window.CMS||{};!function(i){"use strict";CMS.Clipboard=new CMS.Class({implement:[CMS.API.Helpers],initialize:function(){this._setupUI(),this.click="click.cms.clipboard",this._events()},_setupUI:function(){var t=i(".cms-clipboard");this.ui={clipboard:t,triggers:i(".cms-clipboard-trigger a"),triggerRemove:i(".cms-clipboard-empty a"),pluginsList:t.find(".cms-clipboard-containers"),document:i(document)}},_events:function(){var t=this,e=400,a=117;t.modal=new CMS.Modal({minWidth:e,minHeight:a,minimizable:!1,maximizable:!1,resizable:!1}),t.modal.on("cms.modal.loaded cms.modal.closed",function(){i(".cms-add-plugin-placeholder").remove()}).on("cms.modal.closed cms.modal.load",function(){t.ui.pluginsList.prependTo(t.ui.clipboard)}).ui.modal.on("cms.modal.load",function(){t.ui.pluginsList.prependTo(t.ui.clipboard)}),t.ui.triggers.on(t.click,function(o){return o.preventDefault(),o.stopPropagation(),i(this).parent().hasClass("cms-toolbar-item-navigation-disabled")?!1:(t.modal.open({html:t.ui.pluginsList,title:t.ui.clipboard.data("title"),width:e,height:a}),void t.ui.document.trigger("click.cms.toolbar"))}),t.ui.triggerRemove.on(t.click,function(e){return e.preventDefault(),e.stopPropagation(),i(this).parent().hasClass("cms-toolbar-item-navigation-disabled")?!1:void t.clear(function(){t.modal.close(),t.ui.triggers.parent().addClass("cms-toolbar-item-navigation-disabled"),t.ui.triggerRemove.parent().addClass("cms-toolbar-item-navigation-disabled"),t.ui.document.trigger("click.cms.toolbar")})})},clear:function(t){var e='{ "csrfmiddlewaretoken": "'+CMS.config.csrf+'" }',a=i(".cms-submenu-item [data-rel=paste]").parent().addClass("cms-submenu-item-disabled");a.find(".cms-submenu-item-paste-tooltip").css("display","none"),a.find(".cms-submenu-item-paste-tooltip-empty").css("display","block"),CMS.API.Toolbar.openAjax({url:CMS.config.clipboard.url,post:e,callback:t})}})}(CMS.$);
var CMS=window.CMS||{};!function(e){"use strict";var s,t,i,n;CMS.Plugin=new CMS.Class({implement:[CMS.API.Helpers],options:{type:"",placeholder_id:null,plugin_type:"",plugin_id:null,plugin_language:"",plugin_parent:null,plugin_order:null,plugin_breadcrumb:[],plugin_restriction:[],plugin_parent_restriction:[],urls:{add_plugin:"",edit_plugin:"",move_plugin:"",copy_plugin:"",delete_plugin:""}},initialize:function(s,t){switch(this.options=e.extend(!0,{},this.options,t),this._setupUI(s),this.csrf=CMS.config.csrf,this.click="click.cms.plugin",this.pointerUp="pointerup.cms.plugin",this.pointerDown="pointerdown.cms.plugin",this.pointerOverAndOut="pointerover.cms.plugin pointerout.cms.plugin",this.doubleClick="dblclick.cms.plugin",this.keyUp="keyup.cms.plugin",this.keyDown="keydown.cms.plugin",this.mouseEvents="mousedown.cms.plugin mousemove.cms.plugin mouseup.cms.plugin",this.touchStart="touchstart.cms.plugin",this.touchEnd="touchend.cms.plugin",this.ui.container.data("settings",this.options),this.options.type){case"placeholder":this._setPlaceholder(),this._collapsables();break;case"plugin":this._setPlugin(),this._collapsables();break;default:this._setGeneric()}},_setupUI:function(s){s=e("."+s),this.ui={container:s,publish:e(".cms-btn-publish"),save:e(".cms-toolbar-item-switch-save-edit"),window:e(window),revert:e(".cms-toolbar-revert"),dragbar:null,draggable:null,draggables:null,submenu:null,dropdown:null}},_setPlaceholder:function(){var s=this;this.ui.dragbar=e(".cms-dragbar-"+this.options.placeholder_id),this.ui.draggables=this.ui.dragbar.closest(".cms-dragarea").find("> .cms-draggables"),this.ui.submenu=this.ui.dragbar.find(".cms-submenu-settings");var t=this.ui.dragbar.find(".cms-dragbar-title"),i=this.ui.dragbar.find(".cms-dragbar-toggler a"),n="cms-dragbar-title-expanded";this._setSettingsMenu(this.ui.submenu),this._setAddPluginModal(this.ui.dragbar.find(".cms-submenu-add")),CMS.settings.dragbars=CMS.settings.dragbars||[],i.off(this.click).on(this.click,function(e){e.preventDefault(),t.hasClass(n)?s._collapseAll(t):s._expandAll(t)}),-1!==e.inArray(this.options.placeholder_id,CMS.settings.dragbars)&&t.addClass(n),this._checkIfPasteAllowed()},_setPlugin:function(){var s=this;this.ui.container.add(this.ui.dragitem).on(this.doubleClick,function(e){e.preventDefault(),e.stopPropagation(),s.editPlugin(s.options.urls.edit_plugin,s.options.plugin_name,s.options.plugin_breadcrumb)}),this.ui.container.on(this.pointerOverAndOut+" "+this.touchStart,function(t){t.stopPropagation(),"touchstart"===t.type&&CMS.API.Tooltip._forceTouchOnce();var i=s.options.plugin_name,n=s.options.plugin_id,a=s._getId(s.ui.dragitem.closest(".cms-dragarea")),o=e(".cms-placeholder-"+a);o.length&&o.data("settings")&&(i=o.data("settings").name+": "+i),CMS.API.Tooltip.displayToggle("pointerover"===t.type||"touchstart"===t.type,t,i,n)}),this.ui.container.on("cms.plugins.update",function(e){e.stopPropagation(),s.movePlugin()}),this.ui.container.on("cms.plugin.update",function(t){t.stopPropagation();var i=e(t.delegateTarget),n=e(".cms-draggable-"+i.data("settings").plugin_id),a=s._getId(n.parents(".cms-draggables").last().prevAll(".cms-dragbar").first());if(!a)return!1;var o=i.data("settings");o.target=a,o.parent=s._getId(n.parent().closest(".cms-draggable")),o.move_a_copy=!0,s.movePlugin(o)}),this.ui.draggable=e(".cms-draggable-"+this.options.plugin_id),this.ui.dragitem=this.ui.draggable.find("> .cms-dragitem"),this.ui.draggables=this.ui.draggable.find("> .cms-draggables"),this.ui.submenu=this.ui.dragitem.find(".cms-submenu"),this._setSettingsMenu(this.ui.submenu),this._setAddPluginModal(this.ui.dragitem.find(".cms-submenu-add")),this._checkIfPasteAllowed()},_setGeneric:function(){var e=this;this.ui.container.on(this.doubleClick,function(s){s.preventDefault(),s.stopPropagation(),e.editPlugin(e.options.urls.edit_plugin,e.options.plugin_name,[])}),this.ui.container.on(this.pointerOverAndOut+" "+this.touchStart,function(s){"touchstart"!==s.type&&s.stopPropagation();var t=e.options.plugin_name,i=e.options.plugin_id;CMS.API.Tooltip.displayToggle("pointerover"===s.type||"touchstart"===s.type,s,t,i)})},_checkIfPasteAllowed:function(){var s=this.ui.dropdown.find("[data-rel=paste]"),t=s.parent();if(!n.length)return t.addClass("cms-submenu-item-disabled"),t.find(".cms-submenu-item-paste-tooltip-empty").css("display","block"),!1;if(this.ui.draggable&&this.ui.draggable.hasClass("cms-draggable-disabled"))return t.addClass("cms-submenu-item-disabled"),t.find(".cms-submenu-item-paste-tooltip-disabled").css("display","block"),!1;var i=this.options.plugin_restriction;if(!n.data("settings"))return!1;var a=n.data("settings").plugin_type,o=e.grep(n.data("settings").plugin_parent_restriction,function(e){return"0"!==e}),r=this.options.plugin_type;return i.length&&-1===e.inArray(a,i)||o.length&&-1===e.inArray(r,o)?(t.addClass("cms-submenu-item-disabled"),t.find(".cms-submenu-item-paste-tooltip-restricted").css("display","block"),!1):!0},addPlugin:function(s,t,i){if(CMS.API.locked)return!1;CMS.API.locked=!0;var n=this,a={placeholder_id:this.options.placeholder_id,plugin_type:s,plugin_parent:i||"",plugin_language:this.options.plugin_language,csrfmiddlewaretoken:this.csrf};e.ajax({type:"POST",url:this.options.urls.add_plugin,data:a,success:function(e){CMS.API.locked=!1,n.newPlugin=e,n.editPlugin(e.url,t,e.breadcrumb)},error:function(e){CMS.API.locked=!1;var s=CMS.config.lang.error;CMS.API.Messages.open({message:s+e.responseText||e.status+" "+e.statusText,error:!0})}})},editPlugin:function(s,t,i){var n=new CMS.Modal({newPlugin:this.newPlugin||!1,onClose:this.options.onClose||!1,redirectOnClose:this.options.redirectOnClose||!1});this.newPlugin||n.on("cms.modal.loaded",function(){e(".cms-add-plugin-placeholder").remove()}),n.on("cms.modal.closed",function(){e(".cms-add-plugin-placeholder").remove()}),n.open({url:s,title:t,breadcrumbs:i,width:850})},copyPlugin:function(s,t){if(CMS.API.locked)return!1;CMS.API.locked=!0;var i=!(!s&&!t);s=s||this.options,t?(s.target=s.placeholder_id,s.plugin_id="",s.parent=""):t=s.plugin_language;var n={source_placeholder_id:s.placeholder_id,source_plugin_id:s.plugin_id||"",source_language:t,target_plugin_id:s.parent||"",target_placeholder_id:s.target||CMS.config.clipboard.id,target_language:s.page_language||t,csrfmiddlewaretoken:this.csrf},a={type:"POST",url:s.urls.copy_plugin,data:n,success:function(){CMS.API.Messages.open({message:CMS.config.lang.success}),CMS.API.Helpers.reloadBrowser()},error:function(e){CMS.API.locked=!1;var s=CMS.config.lang.error;CMS.API.Messages.open({message:s+e.responseText||e.status+" "+e.statusText,error:!0})}};i?e.ajax(a):CMS.API.Clipboard.clear(function(){e.ajax(a)})},cutPlugin:function(){if(CMS.API.locked)return!1;CMS.API.locked=!0;var s=this,t={placeholder_id:CMS.config.clipboard.id,plugin_id:this.options.plugin_id,plugin_parent:"",plugin_language:this.options.page_language,plugin_order:[this.options.plugin_id],csrfmiddlewaretoken:this.csrf};CMS.API.Clipboard.clear(function(){return CMS.API.locked?!1:(CMS.API.locked=!0,void e.ajax({type:"POST",url:s.options.urls.move_plugin,data:t,success:function(){CMS.API.Messages.open({message:CMS.config.lang.success}),CMS.API.Helpers.reloadBrowser()},error:function(e){CMS.API.locked=!1;var s=CMS.config.lang.error;CMS.API.Messages.open({message:s+e.responseText||e.status+" "+e.statusText,error:!0})}}))})},pastePlugin:function(){i.appendTo(this.ui.draggables),this.ui.draggables.trigger("cms.update"),n.trigger("cms.plugin.update")},movePlugin:function(s){if(CMS.API.locked)return!1;CMS.API.locked=!0;var t=this;s=s||this.options;var i=e(".cms-plugin-"+s.plugin_id),n=e(".cms-draggable-"+s.plugin_id);this._setPosition(s.plugin_id,i,n);var a=this._getId(n.parents(".cms-draggables").last().prevAll(".cms-dragbar").first()),o=this._getId(n.parent().closest(".cms-draggable")),r=this._getIds(n.siblings(".cms-draggable").andSelf());if(s.move_a_copy&&(r=r.map(function(e){return e===s.plugin_id&&(e="__COPY__"),e})),a===!1)return!1;var l={placeholder_id:a,plugin_id:s.plugin_id,plugin_parent:o||"",plugin_language:s.page_language,plugin_order:r,csrfmiddlewaretoken:this.csrf,move_a_copy:s.move_a_copy};e.ajax({type:"POST",url:s.urls.move_plugin,data:l,success:function(e){e.reload&&CMS.API.Helpers.reloadBrowser(),e.urls&&t._setSettings(s,{urls:e.urls}),CMS.API.locked=!1,t._showSuccess(n)},error:function(e){CMS.API.locked=!1;var s=CMS.config.lang.error;CMS.API.Messages.open({message:s+e.responseText||e.status+" "+e.statusText,error:!0})}}),this.ui.publish.addClass("cms-btn-publish-active").removeClass("cms-btn-disabled").parent().show(),this.ui.window.trigger("resize"),this.ui.revert.removeClass("cms-toolbar-item-navigation-disabled")},_setSettings:function(s,t){var i=e.extend(!0,{},s,t),n=e(".cms-plugin-"+i.plugin_id);this.options=i,n.data("settings",i)},deletePlugin:function(s,t,i){var n=new CMS.Modal({newPlugin:this.newPlugin||!1,onClose:this.options.onClose||!1,redirectOnClose:this.options.redirectOnClose||!1});n.on("cms.modal.loaded",function(){e(".cms-add-plugin-placeholder").remove()}),n.open({url:s,title:t,breadcrumbs:i})},_setPosition:function(s,t,i){var n=i.prev(".cms-draggable"),a=i.next(".cms-draggable"),o=i.parent().closest(".cms-draggable"),r=e(".cms-plugin-"+this._getId(o)),l=i.closest(".cms-dragarea");if(n.length)t.insertAfter(e(".cms-plugin-"+this._getId(n)));else if(a.length)t.insertBefore(e(".cms-plugin-"+this._getId(a)));else if(o.length){for(;r.children().length;)r=r.children();r.append(t)}else l.length?t.insertAfter(e(".cms-placeholder-"+this._getId(l))):CMS.API.Helpers.reloadBrowser()},editPluginPostAjax:function(e,s){this.editPlugin(s.url,this.options.plugin_name,s.breadcrumb)},_setSettingsMenu:function(s){var t=this;this.ui.dropdown=s.siblings(".cms-submenu-dropdown-settings");var i=this.ui.dropdown;s.on(this.pointerUp,function(s){s.preventDefault(),s.stopPropagation();var i=e(this);i.hasClass("cms-btn-active")?CMS.Plugin._hideSettingsMenu(i):(CMS.Plugin._hideSettingsMenu(),t._showSettingsMenu(i))}).on(this.touchStart,function(e){e.stopPropagation()}),i.on(this.mouseEvents,function(e){e.stopPropagation()}).on(this.touchStart,function(e){e.stopPropagation()}),t._setupActions(s),s.on([this.pointerUp,this.pointerDown,this.click,this.doubleClick].join(" "),function(e){e.stopPropagation()}),s.siblings(".cms-quicksearch, .cms-submenu-dropdown-settings").on([this.pointerUp,this.click,this.doubleClick].join(" "),function(e){e.stopPropagation()})},_scrollToElement:function(s,t){var i=t&&void 0!==t.duration?t.duration:200,n=t&&void 0!==t.offset?t.offset:50,a=s.offsetParent(),o=e(window),r=o.height(),l=a.scrollTop(),d=s.position().top,c=s.height(),u=r>=d+c+n;u||a.animate({scrollTop:d+n+c+l-r},i)},_setAddPluginModal:function(s){if(s.hasClass("cms-btn-disabled"))return!1;var t,i,n=this,a=e('<div class="cms-add-plugin-placeholder">'+CMS.config.lang.addPluginPlaceholder+"</div>"),o=new CMS.Modal({minWidth:400,minHeight:400}),r=s.closest(".cms-dragitem"),l=!Boolean(r.length);t=l?s.closest(".cms-dragarea").find("> .cms-draggables"):s.closest(".cms-draggable").find("> .cms-draggables"),o.on("cms.modal.loaded",e.proxy(n._setupKeyboardTraversing,n)),o.on("cms.modal.loaded",function(){t.hasClass("cms-hidden")&&!l&&n._toggleCollapsable(r),e(".cms-add-plugin-placeholder").remove(),a.appendTo(t),n._scrollToElement(a)}),o.on("cms.modal.closed",function(){e(".cms-add-plugin-placeholder").remove()}),o.on("cms.modal.shown",function(){var s=e(".cms-modal-markup .cms-plugin-picker");i||s.find("input").trigger("focus"),i=!1});var d=s.siblings(".cms-plugin-picker");n._setupQuickSearch(d),s.on(this.touchStart,function(e){i=!0,e.stopPropagation()}).on(this.pointerUp,function(e){e.preventDefault(),e.stopPropagation(),CMS.Plugin._hideSettingsMenu();var t=d.clone(!0,!0).data("parentId",n._getId(s.closest(".cms-draggable")));o.open({title:n.options.addPluginHelpTitle,html:t,width:530,height:400})}),s.on([this.pointerUp,this.pointerDown,this.click,this.doubleClick].join(" "),function(e){e.stopPropagation()}),s.siblings(".cms-quicksearch, .cms-submenu-dropdown").on([this.pointerUp,this.click,this.doubleClick].join(" "),function(e){e.stopPropagation()})},_setupQuickSearch:function(s){var t=this,i=s.find("> .cms-quicksearch").find("input"),n=CMS.API.Helpers.debounce(function(){var s=e(this),i=s.closest(".cms-plugin-picker");t._filterPluginsList(i,s)},100);i.on(this.keyUp,n).on(this.keyUp,CMS.API.Helpers.debounce(function(s){var t,i;s.keyCode===CMS.KEYS.ENTER&&(t=e(this),i=t.closest(".cms-plugin-picker"),i.find(".cms-submenu-item").not(".cms-submenu-item-title").filter(":visible").first().find("> a").focus().trigger("click"))},110))},_setupActions:function(s){var t=this,i=".cms-submenu-edit, .cms-submenu-item a";s.parent().find(".cms-submenu-edit").on(this.touchStart,function(e){e.stopPropagation()}),s.parent().find(i).on(t.click,function(i){i.preventDefault(),i.stopPropagation(),CMS.API.Toolbar.showLoader();var n=e(this);switch(CMS.Plugin._hideSettingsMenu(s),n.attr("data-rel")){case"add":t.addPlugin(n.attr("href").replace("#",""),n.text(),n.closest(".cms-plugin-picker").data("parentId"));break;case"ajax_add":CMS.API.Toolbar.openAjax({url:n.attr("href"),post:JSON.stringify(n.data("post")),text:n.data("text"),callback:e.proxy(t.editPluginPostAjax,t),onSuccess:n.data("on-success")});break;case"edit":t.editPlugin(t.options.urls.edit_plugin,t.options.plugin_name,t.options.plugin_breadcrumb);break;case"copy-lang":t.copyPlugin(this.options,n.attr("data-language"));break;case"copy":n.parent().hasClass("cms-submenu-item-disabled")?CMS.API.Toolbar.hideLoader():t.copyPlugin();break;case"cut":t.cutPlugin();break;case"paste":n.parent().hasClass("cms-submenu-item-disabled")?CMS.API.Toolbar.hideLoader():t.pastePlugin();break;case"delete":t.deletePlugin(t.options.urls.delete_plugin,t.options.plugin_name,t.options.plugin_breadcrumb);break;default:CMS.API.Toolbar.hideLoader(),CMS.API.Toolbar._delegate(n)}})},_setupKeyboardTraversing:function(){var t=e(".cms-modal-markup .cms-plugin-picker");t.length&&(s.off(this.keyDown+".traverse"),s.on(this.keyDown+".traverse",function(e){var s=t.find(".cms-submenu-item:visible a"),i=s.index(s.filter(":focus"));e.keyCode!==CMS.KEYS.DOWN&&e.keyCode!==CMS.KEYS.TAB||(e.preventDefault(),i>=0&&i<s.length-1?s.eq(i+1).focus():s.eq(0).focus()),(e.keyCode===CMS.KEYS.UP||e.keyCode===CMS.KEYS.TAB&&e.shiftKey)&&(e.preventDefault(),s.is(":focus")?s.eq(i-1).focus():s.eq(s.length).focus())}))},_showSettingsMenu:function(e){var s=this.ui.dropdown,t=e.parentsUntil(".cms-dragarea").last();e.addClass("cms-btn-active"),t.addClass("cms-z-index-9999"),s.show(),this.ui.window.height()+this.ui.window.scrollTop()-e.offset().top-s.height()<=10&&e.offset().top-s.height()>=0?s.removeClass("cms-submenu-dropdown-top").addClass("cms-submenu-dropdown-bottom"):s.removeClass("cms-submenu-dropdown-bottom").addClass("cms-submenu-dropdown-top")},_filterPluginsList:function(s,t){var i=s.find(".cms-submenu-item"),n=s.find(".cms-submenu-item-title"),a=t.val();return""===a?(i.add(n).show(),!1):(i.find("a, span").each(function(s,t){t=e(t);var i=t.text().toLowerCase(),n=a.toLowerCase();i.indexOf(n)>=0?t.parent().show():t.parent().hide()}),n.filter(":visible").each(function(s,t){n.hide(),e(t).nextUntil(".cms-submenu-item-title").show()}),i.filter(":visible").each(function(s,t){t=e(t),t.prev().hasClass("cms-submenu-item-title")?t.prev().show():t.prevUntil(".cms-submenu-item-title").last().prev().show()}),s.siblings(".cms-submenu-dropdown-children").show(),void(i.add(n).filter(":visible").length<=0&&s.siblings(".cms-submenu-dropdown-children").hide()))},_toggleCollapsable:function(t){var i,n=this,a=n._getId(t.parent()),o=this.ui.draggable,r=CMS.settings;if(r.states=r.states||[],t.hasClass("cms-dragitem-expanded")){if(r.states.splice(e.inArray(a,r.states),1),t.removeClass("cms-dragitem-expanded").parent().find("> .cms-collapsable-container").addClass("cms-hidden"),s.data("expandmode")){if(i=o.find(".cms-draggable").find(".cms-dragitem-collapsable"),!i.length)return!1;i.each(function(){var s=e(this);s.hasClass("cms-dragitem-expanded")&&n._toggleCollapsable(s)})}}else if(r.states.push(a),t.addClass("cms-dragitem-expanded").parent().find("> .cms-collapsable-container").removeClass("cms-hidden"),s.data("expandmode")){if(i=o.find(".cms-draggable").find(".cms-dragitem-collapsable"),!i.length)return!1;i.each(function(){var s=e(this);s.hasClass("cms-dragitem-expanded")||n._toggleCollapsable(s)})}this.ui.window.trigger("resize.sideframe"),CMS.API.Toolbar.setSettings(r)},_collapsables:function(){var s=this;this.ui.draggable=e(".cms-draggable-"+this.options.plugin_id);var t=this.ui.draggable.find("> .cms-dragitem");if(this.ui.container.each(function(s,t){var i=e(t).find(".cms-dragitem-collapsable"),n=i.filter(".cms-dragitem-expanded");i.length===n.length&&i.length+n.length!==0&&e(t).find(".cms-dragbar-title").addClass("cms-dragbar-title-expanded")}),!this.ui.draggable.length)return!1;if(t.find("> .cms-dragitem-text").on(this.touchEnd+" "+this.click,CMS.API.Helpers.debounce(function(){t.hasClass("cms-dragitem-collapsable")&&s._toggleCollapsable(t)},0)),this.ui.draggable.on(this.doubleClick,function(t){t.stopPropagation(),e(".cms-plugin-"+s._getId(e(this))).trigger("dblclick.cms")}),CMS.Toolbar.ready)return!1;for(var i=CMS.settings.states.sort(),n=[],a=0;a<i.length;a++)i[a]!==i[a+1]&&n.push(i[a]);CMS.settings.states=n,e.each(CMS.settings.states,function(s,t){var i=e(".cms-draggable-"+t);i.find(".cms-draggables").length&&(i.find("> .cms-collapsable-container").removeClass("cms-hidden"),i.find("> .cms-dragitem").addClass("cms-dragitem-expanded"))}),CMS.Toolbar.ready=!0},_expandAll:function(s){var t=this,i=s.closest(".cms-dragarea").find(".cms-dragitem-collapsable");if(!i.length)return!1;i.each(function(){var s=e(this);s.hasClass("cms-dragitem-expanded")||t._toggleCollapsable(s)}),s.addClass("cms-dragbar-title-expanded");var n=CMS.settings;n.dragbars=n.dragbars||[],n.dragbars.push(this.options.placeholder_id),CMS.API.Toolbar.setSettings(n)},_collapseAll:function(s){var t=this,i=s.closest(".cms-dragarea").find(".cms-dragitem-collapsable");i.each(function(){var s=e(this);s.hasClass("cms-dragitem-expanded")&&t._toggleCollapsable(s)}),s.removeClass("cms-dragbar-title-expanded");var n=CMS.settings;n.dragbars=n.dragbars||[],n.dragbars.splice(e.inArray(this.options.placeholder_id,n.states),1),CMS.API.Toolbar.setSettings(n)},_getId:function(e){return CMS.API.StructureBoard.getId(e)},_getIds:function(e){return CMS.API.StructureBoard.getIds(e)},_showSuccess:function(s){var t=e('<div class="cms-dragitem-success"></div>');s.addClass("cms-draggable-success").append(t),t.fadeOut(1e3,function(){e(this).remove(),s.removeClass("cms-draggable-success")}),this.ui.window.trigger("resize.sideframe")}}),CMS.Plugin._hideSettingsMenu=function(s){s=s||e(".cms-submenu-btn.cms-btn-active"),s.length&&(s.removeClass("cms-btn-active"),s.closest(".cms-draggable").data("active",!1),e(".cms-z-index-9999").removeClass("cms-z-index-9999"),s.siblings(".cms-submenu-dropdown").hide(),s.siblings(".cms-quicksearch").hide(),s.siblings(".cms-quicksearch").find("input").val("").trigger(this.keyUp).blur(),e(".cms-dragbar").css("position",""))},CMS.Plugin._initializeGlobalHandlers=function(){var a,o=0;s=e(document),t=e(".cms-clipboard"),i=t.find(".cms-draggable:first"),n=t.find(".cms-plugin:first"),s.on("pointerup.cms.plugin",function(){CMS.Plugin._hideSettingsMenu()}).on("keydown.cms.plugin",function(e){e.keyCode===CMS.KEYS.SHIFT&&s.data("expandmode",!0)}).on("keyup.cms.plugin",function(e){e.keyCode===CMS.KEYS.SHIFT&&s.data("expandmode",!1)}).on("click.cms.plugin",".cms-plugin a, a:has(.cms-plugin)",function(s){s.shiftKey||s.ctrlKey||s.metaKey||s.isDefaultPrevented()||(s.preventDefault(),1===++o?a=setTimeout(function(){var t=e(s.currentTarget);o=0,window.open(t.attr("href"),t.attr("target")||"_self")},300):(clearTimeout(a),o=0))})},e(CMS.Plugin._initializeGlobalHandlers)}(CMS.$);
var CMS=window.CMS||{};!function(e){"use strict";function t(){i.each(function(){var t=e(this),s=t.find('.cms-dragbar .cms-submenu-item:has(a[data-rel="copy"]):first');t.find("> .cms-draggables").children(".cms-draggable:not(.cms-draggable-is-dragging)").length?(t.removeClass("cms-dragarea-empty"),s.removeClass("cms-submenu-item-disabled")):(t.addClass("cms-dragarea-empty"),s.addClass("cms-submenu-item-disabled"))})}function s(t){t.each(function(){var t=e(this),s=t.closest(".cms-draggable").find("> .cms-dragitem");t.children().length?s.addClass("cms-dragitem-collapsable cms-dragitem-expanded"):s.removeClass("cms-dragitem-collapsable")})}var i;CMS.StructureBoard=new CMS.Class({implement:[CMS.API.Helpers],initialize:function(){this._setupUI(),this.click="click.cms",this.pointerUp="pointerup.cms",this.state=!1,this.dragging=!1,this._setup(),this._setupModeSwitcher(),t()},_setupUI:function(){var t=e(".cms-structure"),s=e(".cms-toolbar");this.ui={container:t,content:e(".cms-structure-content"),doc:e(document),window:e(window),html:e("html"),toolbar:s,sortables:e(".cms-draggables"),plugins:e(".cms-plugin"),render_model:e(".cms-render-model"),placeholders:e(".cms-placeholder"),dragitems:e(".cms-draggable"),dragareas:e(".cms-dragarea"),toolbarModeSwitcher:s.find(".cms-toolbar-item-cms-mode-switcher"),toolbarModeLinks:s.find(".cms-toolbar-item-cms-mode-switcher a"),toolbarTrigger:e(".cms-toolbar-trigger")}},_setup:function(){var e=this;return this.ui.dragareas.length&&this.ui.toolbarModeSwitcher.length?(setTimeout(function(){"structure"===CMS.settings.mode?e.show(!0):e.hide(!0)},0),this.ui.placeholders.length&&this.ui.toolbarModeSwitcher.show(),void this._drag()):!1},_setupModeSwitcher:function(){var e=this,t=e.ui.toolbarModeLinks;t.eq(1).on(e.click+" "+e.pointerUp,function(t){return t.preventDefault(),"edit"===CMS.settings.mode?!1:void e.hide()}),t.eq(0).on(e.click+" "+e.pointerUp,function(t){return t.preventDefault(),"structure"===CMS.settings.mode?!1:void e.show()}),e.ui.toolbarModeSwitcher.length&&e.ui.doc.on("keydown.cms.structureboard.switcher",function(t){var s=document.activeElement!==document.body;t.keyCode!==CMS.KEYS.SPACE||s||(t.preventDefault(),"structure"===CMS.settings.mode?e.hide():"edit"===CMS.settings.mode&&e.show())})},show:function(e){if("live"===CMS.config.mode)return!1;var t=this.ui.toolbar.width(),s=this.ui.window[0].innerWidth-t;s&&(this.ui.toolbar.css("right",s),this.ui.toolbarTrigger.css("right",s));var i=this.ui.toolbarModeLinks;i.removeClass("cms-btn-active").eq(0).addClass("cms-btn-active"),this.ui.html.removeClass("cms-structure-mode-content").addClass("cms-structure-mode-structure"),CMS.settings.mode="structure",e||(CMS.settings=this.setSettings(CMS.settings)),this.ui.dragareas.show(),this._showBoard()},hide:function(e){if("live"===CMS.config.mode)return!1;this.ui.toolbar.css("right",""),this.ui.toolbarTrigger.css("right","");var t=this.ui.toolbarModeLinks;t.removeClass("cms-btn-active").eq(1).addClass("cms-btn-active"),this.ui.html.removeClass("cms-structure-mode-structure").addClass("cms-structure-mode-content"),this.ui.container.find(".cms-clipboard").hide(),CMS.settings.mode="edit",e||(CMS.settings=this.setSettings(CMS.settings)),this._hideBoard()},getId:function(e){if(void 0===e||null===e||e.length<=0)return!1;var t=null,s=e.attr("class").split(" ")[1];return e.hasClass("cms-plugin")?t=s.replace("cms-plugin-",""):e.hasClass("cms-draggable")?t=s.replace("cms-draggable-",""):e.hasClass("cms-placeholder")?t=s.replace("cms-placeholder-",""):e.hasClass("cms-dragbar")?t=s.replace("cms-dragbar-",""):e.hasClass("cms-dragarea")&&(t=s.replace("cms-dragarea-","")),t},getIds:function(t){var s=this,i=[];return t.each(function(){i.push(s.getId(e(this)))}),i},_showBoard:function(){var t=this;if(this.ui.container.show(),this.ui.dragareas.css("opacity",1),this.ui.plugins.not(this.ui.render_model).hide(),this.ui.placeholders.show(),CMS.config.simpleStructureBoard){var s=this.ui.content,i=s.find(".cms-dragarea");s.addClass("cms-structure-content-simple"),i.addClass("cms-dragarea-simple"),i.each(function(t,i){e(i).hasClass("cms-dragarea-static")&&s.append(i)}),i.filter(".cms-dragarea-static").eq(0).css("margin-top","50px")}else this.ui.container.addClass("cms-structure-dynamic"),this.ui.window.on("resize.sideframe",function(){t._resizeBoard()}).trigger("resize.sideframe")},_hideBoard:function(){this.ui.container.hide(),this.ui.plugins.show(),this.ui.placeholders.hide(),this.ui.window.off("resize.sideframe"),this.ui.window.trigger("structureboard_hidden.sideframe"),this.ui.window.trigger("resize"),CMS.config.simpleStructureBoard||this.ui.container.height(this.ui.doc.outerHeight())},_resizeBoard:function(){var t=null,s=null,i=null,a=null,r=this;setTimeout(function(){r.ui.container.height(r.ui.doc.outerHeight())},0),this.ui.placeholders.each(function(r,n){n=e(n),t=n.data("settings").placeholder_id,s=e(".cms-dragarea-"+t),n.height(s.outerHeight(!0)),i=n.width()?0:150,a=e(s).offsetParent().offset(),s.css({top:n.offset().top-a.top-5,left:n.offset().left-a.left-i,width:n.width()+i})})},_drag:function(){var i,a=this;this.ui.sortables.nestedSortable({items:"> .cms-draggable:not(.cms-draggable-disabled .cms-draggable)",placeholder:"cms-droppable",connectWith:".cms-draggables:not(.cms-hidden)",tolerance:"intersect",toleranceElement:"> div",dropOnEmpty:!0,helper:function(e,t){var s=t.find("> .cms-dragitem").clone();return s.wrap('<div class="'+t[0].className+'"></div>'),s.parent()},appendTo:".cms-structure-content",cursor:"move",cursorAt:{left:-15,top:-15},opacity:1,zIndex:9999999,delay:100,tabSize:15,listType:"div.cms-draggables",doNotClear:!0,disableNestingClass:"cms-draggable-disabled",errorClass:"cms-draggable-disallowed",scrollSpeed:15,scrollSensitivity:.2*a.ui.window.height(),start:function(s,r){a.ui.content.attr("data-touch-action","none"),i=r.item.closest(".cms-draggables"),a.dragging=!0,t(),CMS.Plugin._hideSettingsMenu(),a.ui.sortables.each(function(){var t=e(this);0===t.children().length&&t.removeClass("cms-hidden")}),r.item.addClass("cms-is-dragging"),r.helper.addClass("cms-draggable-is-dragging"),r.item.find("> .cms-draggables").children().length&&r.helper.addClass("cms-draggable-stack"),a.ui.doc.on("keyup.cms.interrupt",function(t,s){(t.keyCode===CMS.KEYS.ESC&&a.dragging||s)&&(a.state=!1,e.ui.sortable.prototype._mouseStop(),a.ui.sortables.trigger("mouseup"))})},beforeStop:function(e,t){a.dragging=!1,t.item.removeClass("cms-is-dragging cms-draggable-stack"),a.ui.doc.off("keyup.cms.interrupt"),a.ui.content.attr("data-touch-action","pan-y")},update:function(r,n){if(!a.state)return!1;var c=n.item.closest(".cms-draggables");if(i.is(c)){if(!c.is(this))return!1}else s(c.add(i));var o=a.getId(n.item),d=e(".cms-plugin-"+o);d.closest(".cms-clipboard").length?d.trigger("cms.plugin.update"):d.trigger("cms.plugins.update"),a.ui.sortables.each(function(){var t=e(this);0===t.children().length&&t.addClass("cms-hidden")}),t()},isAllowed:function(t,s,i){if(CMS.API.locked)return!1;var r,n=[],c=e(".cms-plugin-"+a.getId(i));if(0===c.length||!c.data("settings"))return!1;var o,d=e.grep(c.data("settings").plugin_parent_restriction,function(e){return"0"!==e}),l=c.data("settings").plugin_type,u=a.getId(t.closest(".cms-dragarea")),g=e(".cms-placeholder-"+u);return o=e(s&&s.length?".cms-plugin-"+a.getId(s.closest(".cms-draggable")):".cms-plugin-"+a.getId(t.closest(".cms-draggable"))),g.length&&(n=g.data("settings").plugin_restriction,r=g.data("settings").plugin_type),o.length&&(n=o.data("settings").plugin_restriction,r=o.data("settings").plugin_type),t.parent().hasClass("cms-draggable-disabled")?!1:(a.state=!n.length||-1!==e.inArray(l,n),d.length&&(a.state=-1!==e.inArray(r,d)),a.state)}}).on("cms.update",t)}}),CMS.StructureBoard._initializeGlobalHandlers=function(){i=e(".cms-dragarea:not(.cms-clipboard-containers)")},e(CMS.StructureBoard._initializeGlobalHandlers)}(CMS.$);
var CMS=window.CMS||{};!function(t){"use strict";CMS.Navigation=new CMS.Class({implement:[CMS.API.Helpers],initialize:function(){this._setupUI(),this._getWidths(),this.rightMostItemIndex=this.items.left.length-1,this.leftMostItemIndex=0,this.resize="resize.cms.navigation",this.load="load.cms.navigation",this.orientationChange="orientationchange.cms.navigation",this._events()},_setupUI:function(){var i=t(".cms"),e=i.find(".cms-toolbar-more");this.ui={window:t(window),toolbarLeftPart:i.find(".cms-toolbar-left"),toolbarRightPart:i.find(".cms-toolbar-right"),trigger:e,dropdown:e.find("> ul"),toolbarTrigger:i.find(".cms-toolbar-trigger"),logo:i.find(".cms-toolbar-item-logo")}},_events:function(){this.ui.window.on([this.resize,this.load,this.orientationChange].join(" "),CMS.API.Helpers.throttle(this._handleResize.bind(this),50))},_getWidths:function(){var i=this;i.items={left:[],leftTotalWidth:0,right:[],rightTotalWidth:0,moreButtonWidth:0};var e=i.ui.toolbarLeftPart.find(".cms-toolbar-item-navigation > li:not(.cms-toolbar-more)"),o=i.ui.toolbarRightPart.find("> .cms-toolbar-item"),s=function(i,e){var o=t(i),s=t(i).outerWidth(!0);e.push({element:o,width:s})},h=function(t,i){return t+i.width};e.each(function(){s(this,i.items.left)}),o.each(function(){s(this,i.items.right)}),i.items.leftTotalWidth=i.items.left.reduce(h,0),i.items.rightTotalWidth=i.items.right.reduce(h,0),i.items.moreButtonWidth=i.ui.trigger.outerWidth()},_calculateAvailableWidth:function(){var t=this.ui.window.width(),i=parseInt(this.ui.toolbarRightPart.css("padding-right"),10)+this.ui.logo.offset().left+this.ui.logo.outerWidth(!0)+15;return t-i},_showDropdown:function(){this.ui.trigger.css("display","list-item")},_hideDropdown:function(){this.ui.trigger.css("display","none")},_handleResize:function(){var t,i=this._calculateAvailableWidth();if(i>this.items.leftTotalWidth+this.items.rightTotalWidth)this._showAll();else{t=i-this.items.moreButtonWidth-this.items.rightTotalWidth;for(var e=-1;t-this.items.left[e+1].width>=0;)t-=this.items.left[e+1].width,e++;if(e<this.rightMostItemIndex?this._moveToDropdown(this.rightMostItemIndex-e):this.rightMostItemIndex<e&&this._moveOutOfDropdown(e-this.rightMostItemIndex),this._showDropdown(),0>t&&-1===this.rightMostItemIndex){t+=this.items.rightTotalWidth;var o=this.items.right.length;this._moveToDropdown(o-this.leftMostItemIndex,"right"),this.ui.dropdown.addClass("cms-more-dropdown-full")}else this._showAllRight(),this.ui.dropdown.removeClass("cms-more-dropdown-full")}},_showAll:function(){this._showAllLeft(),this._showAllRight(),this._hideDropdown()},_showAllLeft:function(){this._moveOutOfDropdown(this.items.left.length-1-this.rightMostItemIndex)},_showAllRight:function(){this._moveOutOfDropdown(this.leftMostItemIndex,"right")},_moveToDropdown:function(t,i){if(!(0>=t)){var e,o,s,h;if("right"===i){for(o=this.leftMostItemIndex,s=this.leftMostItemIndex+t-1,h=o;s>=h;h++)e=this.items.right[h].element,this.ui.dropdown.prepend(e.wrap('<li class="cms-more-buttons"></li>').parent());this.leftMostItemIndex+=t}else{for(s=this.rightMostItemIndex,o=this.rightMostItemIndex-t+1,h=s;h>=o;h--)e=this.items.left[h].element,this.ui.dropdown.prepend(e),e.find("> ul").children().length&&e.addClass("cms-toolbar-item-navigation-children");this.rightMostItemIndex-=t}}},_moveOutOfDropdown:function(t,i){if(!(0>=t)){var e,o,s,h;if("right"===i){for(h=this.leftMostItemIndex-1,s=this.leftMostItemIndex-t,e=h;e>=s;e--)o=this.items.right[e].element,o.unwrap("<li></li>"),o.prependTo(this.ui.toolbarRightPart);this.leftMostItemIndex-=t}else{for(s=this.rightMostItemIndex+1,h=this.rightMostItemIndex+t,e=s;h>=e;e++)o=this.items.left[e].element,o.insertBefore(this.ui.trigger),o.removeClass("cms-toolbar-item-navigation-children"),o.find("> ul").removeAttr("style");this.rightMostItemIndex+=t}}}})}(CMS.$);
var CMS=window.CMS||{};!function(t){"use strict";CMS.Toolbar=new CMS.Class({implement:[CMS.API.Helpers],options:{toolbarDuration:200},initialize:function(i){this.options=t.extend(!0,{},this.options,i),this._setupUI(),this.navigation=new CMS.Navigation,this._position={top:0,stickyTop:0,isSticky:!0},this.click="click.cms.toolbar",this.touchStart="touchstart.cms.toolbar",this.pointerUp="pointerup.cms.toolbar",this.pointerOverOut="pointerover.cms.toolbar pointerout.cms.toolbar",this.pointerLeave="pointerleave.csm.toolbar",this.mouseEnter="mouseenter.cms.toolbar",this.mouseLeave="mouseleave.cms.toolbar",this.resize="resize.cms.toolbar",this.scroll="scroll.cms.toolbar",this.key="keydown.cms.toolbar keyup.cms.toolbar",this.timer=function(){},this.lockToolbar=!1,this.ui.toolbar.data("ready")||this._events();var o=this;setTimeout(function(){o._initialStates()},200),this.ui.toolbar.data("ready",!0)},_setupUI:function(){var i=t(".cms");this.ui={container:i,body:t("html"),document:t(document),window:t(window),toolbar:i.find(".cms-toolbar"),toolbarTrigger:i.find(".cms-toolbar-trigger"),navigations:i.find(".cms-toolbar-item-navigation"),buttons:i.find(".cms-toolbar-item-buttons"),messages:i.find(".cms-messages"),screenBlock:i.find(".cms-screenblock"),structureBoard:i.find(".cms-structure")}},_events:function(){var i=this;this.ui.toolbarTrigger.on(this.pointerUp,function(t){t.preventDefault(),i.toggle(),i.ui.document.trigger(i.click)}).on(this.click,function(t){t.preventDefault()}),this.ui.navigations.each(function(){function o(){u=!1,h=!1,e.removeClass(a),e.find("ul ul").hide(),s.find("> li").off(i.mouseEnter),i.ui.document.off(i.click),i.ui.toolbar.off(i.click,o),i.ui.structureBoard.off(i.click),i.ui.window.off(i.resize+".menu.reset"),i._handleLongMenus()}var s=t(this),e=s.find("li"),n="cms-toolbar-item-navigation",a="cms-toolbar-item-navigation-hover",r="cms-toolbar-item-navigation-disabled",l="cms-toolbar-item-navigation-children",c=!1,u=!1,h=!1;s.find("a").on(i.click+" "+i.key,function(s){var e=t(this);return s.keyCode!==CMS.KEYS.CMD_LEFT&&s.keyCode!==CMS.KEYS.CMD_RIGHT&&s.keyCode!==CMS.KEYS.CMD_FIREFOX&&s.keyCode!==CMS.KEYS.SHIFT&&s.keyCode!==CMS.KEYS.CTRL||(h=!0),"keyup"===s.type&&(h=!1),""===e.attr("href")||"#"===e.attr("href")||e.parent().hasClass(r)?void 0:(h?CMS.API.Helpers._getWindow().open(e.attr("href"),"_blank"):i._delegate(t(this)),o(),!1)}).on(i.touchStart,function(){c=!0}),e.on(i.click,function(e){e.preventDefault(),e.stopPropagation();var h=t(this);return h.parent().hasClass(n)&&u?(i.ui.body.trigger(i.click),!1):(h.hasClass(l)||o(),h.parent().hasClass(n)&&h.hasClass(a)||h.hasClass(r)?!1:(h.addClass(a),i._handleLongMenus(),c||s.find("> li").on(i.mouseEnter,function(){return t(this).hasClass(a)?!1:(u=!1,void t(this).trigger(i.click))}),c=!1,i.ui.document.on(i.click,o),i.ui.structureBoard.on(i.click,o),i.ui.toolbar.on(i.click,o),i.ui.window.on(i.resize+".menu.reset",CMS.API.Helpers.throttle(o,1e3)),void(u=!0)))}),e.on(i.pointerOverOut,"li",function(){var o=t(this),s=o.closest(".cms-toolbar-item-navigation-children").add(o.parents(".cms-toolbar-item-navigation-children")),n=o.hasClass(l)||s.length;return o.hasClass(r)?!1:o.hasClass(a)?!0:(e.find("li").removeClass(a),o.addClass(a),n?(o.find("> ul").show(),s.addClass(a),i._handleLongMenus()):(e.find("ul ul").hide(),i._handleLongMenus()),void o.siblings().find("> ul").hide())}).on(i.click,function(t){t.preventDefault(),t.stopPropagation()}),e.on(i.pointerLeave,"> ul",function(){e.find("li").removeClass(a)})}),this.ui.buttons.each(function(){var o=t(this);o.find("a").attr("data-rel")?o.on(i.click,function(o){o.preventDefault(),i._delegate(t(this).find("a"))}):o.find("a").on(i.click,function(t){t.stopPropagation()}),o.find(".cms-publish-page").on(i.click,function(t){CMS.API.Helpers.secureConfirm(CMS.config.lang.publish)||t.preventDefault()}),o.find(".cms-btn-publish").on(i.click,function(i){i.preventDefault(),t.ajax({type:"post",url:t(this).prop("href"),data:{csrfmiddlewaretoken:CMS.config.csrf},success:function(){var t=CMS.API.Helpers.makeURL(CMS.API.Helpers._getWindow().location.href.split("?")[0],[CMS.settings.edit_off+"=true"]);CMS.API.Helpers.reloadBrowser(t)},error:function(t){throw new Error(t)}})})}),this.ui.window.on([this.resize,this.scroll].join(" "),CMS.API.Helpers.throttle(t.proxy(this._handleLongMenus,this),10))},_initialStates:function(){var i=t(".cms-btn-publish").parent();if("expanded"===CMS.settings.toolbar?this.open({duration:0}):this.close(),i.hide(),t(".cms-btn-publish-active").length&&(i.show(),this.ui.window.trigger("resize")),CMS.config.debug&&this._debug(),CMS.config.messages&&CMS.API.Messages.open({message:CMS.config.messages}),CMS.config.error&&CMS.API.Messages.open({message:CMS.config.error,error:!0}),CMS.config.auth&&CMS.config.settings.version===CMS.settings.version||(this.open({duration:0}),CMS.settings=this.setSettings(CMS.config.settings)),CMS.config.publisher&&CMS.API.Messages.open({message:CMS.config.publisher,dir:"right"}),CMS.settings.sideframe&&CMS.settings.sideframe.url){var o=new CMS.Sideframe;o.open({url:CMS.settings.sideframe.url,animate:!1})}this.ui.screenBlock.length&&this._screenBlock(),this.ui.body.addClass("cms-ready"),this.ui.document.trigger("cms-ready")},toggle:function(){"collapsed"===CMS.settings.toolbar?this.open():this.close()},open:function(t){this._show(t),CMS.settings.toolbar="expanded",CMS.settings=this.setSettings(CMS.settings)},_show:function(i){var o=this,s=i&&void 0!==i.duration?i.duration:this.options.toolbarDuration,e=t(".cms-debug-bar").height()||0,n=t(".cms-toolbar").height()+10;this.ui.toolbar.css({transition:"margin-top "+s+"ms","margin-top":0}),this.ui.toolbarTrigger.addClass("cms-toolbar-trigger-expanded"),this.ui.body.addClass("cms-toolbar-expanding"),this.ui.body.animate({"margin-top":n-10+e},s,"linear",function(){o.ui.body.removeClass("cms-toolbar-expanding"),o.ui.body.addClass("cms-toolbar-expanded")}),this.ui.messages.css("top",n-10)},close:function(){this._hide(),CMS.settings.toolbar="collapsed",CMS.settings=this.setSettings(CMS.settings)},_hide:function(){var i=this.options.toolbarDuration,o=t(".cms-toolbar").height()+10,s=this;return this.ui.toolbar.css("transition","margin-top "+i+"ms"),this.lockToolbar?!1:(this.ui.toolbar.css("margin-top",-o),this.ui.toolbarTrigger.removeClass("cms-toolbar-trigger-expanded"),this.ui.body.addClass("cms-toolbar-collapsing"),this.ui.body.animate({"margin-top":CMS.config.debug?5:0},i,"linear",function(){s.ui.body.removeClass("cms-toolbar-expanded cms-toolbar-collapsing")}),void this.ui.messages.css("top",0))},openAjax:function(i){var o=this,s=i.url,e=i.post||"{}",n=i.text||"",a=i.callback,r=i.onSuccess,l=n?CMS.API.Helpers.secureConfirm(n):!0;return l?(this.showLoader(),t.ajax({type:"POST",url:s,data:JSON.parse(e)}).done(function(t){CMS.API.locked=!1,a?(a(o,t),o.hideLoader()):r?CMS.API.Helpers.reloadBrowser(r,!1,!0):CMS.API.Helpers.reloadBrowser(!1,!1,!0)}).fail(function(t){CMS.API.locked=!1,CMS.API.Messages.open({message:t.responseText+" | "+t.status+" "+t.statusText,error:!0})})):!1},showLoader:function(){this.ui.toolbarTrigger.addClass("cms-toolbar-loader")},hideLoader:function(){this.ui.toolbarTrigger.removeClass("cms-toolbar-loader")},_delegate:function(t){var i=t.data("rel");if(t.hasClass("cms-btn-disabled"))return!1;switch(i){case"modal":var o=new CMS.Modal({onClose:t.data("on-close")});o.open({url:t.attr("href"),title:t.data("name")});break;case"message":CMS.API.Messages.open({message:t.data("text")});break;case"sideframe":var s=new CMS.Sideframe({onClose:t.data("on-close")});s.open({url:t.attr("href"),animate:!0});break;case"ajax":this.openAjax({url:t.attr("href"),post:JSON.stringify(t.data("post")),text:t.data("text"),onSuccess:t.data("on-success")});break;default:CMS.API.Helpers._getWindow().location.href=t.attr("href")}},_lock:function(t){t?(this.lockToolbar=!0,this.ui.toolbarTrigger.css("opacity",.2)):(this.lockToolbar=!1,this.ui.toolbarTrigger.css("opacity",1))},_debug:function(){var t=1e3,i=function(){},o=this.ui.container.find(".cms-debug-bar");o.on(this.mouseEnter+" "+this.mouseLeave,function(o){clearTimeout(i),"mouseenter"===o.type&&(i=setTimeout(function(){CMS.API.Messages.open({message:CMS.config.lang.debug})},t))})},_screenBlock:function(){var i=this,o=20,s=this.ui.screenBlock,e=t(".cms-sideframe");i.ui.window.on(i.resize+".screenblock",function(){s.css({width:i.ui.window.width()-e.width(),height:i.ui.window.height()})}).trigger(i.resize+".screenblock"),setInterval(function(){i.ui.window.trigger(i.resize+".screenblock")},o)},_handleLongMenus:function(){var i=t(".cms-toolbar-item-navigation-hover > ul");if(!i.length)return void this._stickToolbar();var o=i.toArray().map(function(i){var o=t(i);return t.extend({},o.position(),{height:o.height()})}),s=this.ui.window.height();this._position.top=this.ui.window.scrollTop();var e=o.some(function(t){return t.top+t.height>s});e&&this._position.top>=this._position.stickyTop?this._position.isSticky&&this._unstickToolbar():this._stickToolbar()},_stickToolbar:function(){this._position.stickyTop=0,this._position.isSticky=!0,this.ui.toolbar.removeClass("cms-toolbar-non-sticky"),this.ui.toolbar.css({top:0,"margin-top":""})},_unstickToolbar:function(){var i=parseInt(t("html").css("margin-top"),10);this._position.stickyTop=this._position.top,this.ui.toolbar.addClass("cms-toolbar-non-sticky"),this.ui.toolbar[0].style.setProperty("top",this._position.stickyTop+(CMS.config.debug?5:-5)+"px","important"),this.ui.toolbar.css({"margin-top":-(i+(CMS.config.debug?5:0))}),this._position.isSticky=!1}})}(CMS.$);
var CMS=window.CMS||{};!function(i){"use strict";CMS.Tooltip=new CMS.Class({initialize:function(){this.body=i("body"),this.isTouch=!1,this.domElem=this._pick(),this._forceTouchOnce=CMS.API.Helpers.once(this._forceTouch),this._checkTouch()},_checkTouch:function(){this.body.one("touchstart.cms",i.proxy(this._forceTouchOnce,this))},_forceTouch:function(){this.isTouch=!0,this.domElem=this._pick(),this.domElem.on("touchstart.cms",function(){var t=i(this).data("plugin_id"),o=i(".cms-plugin-"+t);if(o.length)o.trigger("dblclick.cms");else{var s=i('.cms-plugin[class*="cms-plugin-cms-"][class*="-'+t+'"]');s.eq(0).trigger("dblclick.cms")}})},displayToggle:function(i,t,o,s){i?this.show(t,o,s):this.hide()},show:function(i,t,o){var s=this.domElem,c=this;s.css("visibility","visible").data("plugin_id",o||null).show().find("span").html(t),this.isTouch?this.position(i.originalEvent,s):(c.position(i.originalEvent,s),this.body.on("mousemove.cms.tooltip",function(i){c.position(i,s)}))},hide:function(){this.domElem.css("visibility","hidden").hide(),this.isTouch||this.body.off("mousemove.cms.tooltip")},_pick:function(){return i(".cms-tooltip-touch, .cms-tooltip").css("visibility","hidden").hide(),i(this.isTouch?".cms-tooltip-touch":".cms-tooltip")},position:function(t,o){var s=20,c=t.pageX-i(o).offsetParent().offset().left,h=t.pageY-i(o).offsetParent().offset().top,e=i(o).offsetParent().width(),n=c+o.outerWidth(!0)+s;o.css({left:n>=e?c-o.outerWidth(!0)-s:c+s,top:h-12})}})}(CMS.$);
>>>>>>> 98e04bebfc125fad9f9eba68f8857a884bfd7dc6
